{"version":3,"sources":["integration-test/mock/index.js"],"names":["createSDK","mockApi","authentication","logout","tokenRefresh","presence","dialingPlan","extensionInfo","extensionList","accountInfo","apiInfo","messageSync","authzProfile","blockedNumber","forwardingNumber","phoneNumber","subscription","mockForLogin","mockClient","require","polyfill","RingCentral","fetchMock","dialingPlanBody","extensionBody","extensionListBody","accountBody","subscriptionBody","apiInfoBody","messageSyncBody","authzProfileBody","blockedNumberBody","forwardingNumberBody","phoneNumberBody","mockServer","options","opts","appKey","appSecret","server","Request","constructor","Response","Headers","fetch","bind","refreshDelayMs","redirectUri","cachePrefix","method","path","url","body","status","statusText","headers","responseHeaders","isJson","mockUrl","once","sendAsJson","times","access_token","token_type","expires_in","refresh_token","refresh_token_expires_in","scope","expireTime","Date","getTime","owner_id","endpoint_id","failure","message","error_description","description","id","uri","extension","extensionNumber","activeCalls","presenceStatus","telephonyStatus","userStatus","dndStatus","extensionId","client","service"],"mappings":"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","file":"index.js","sourcesContent":["require('es6-promise').polyfill();\nrequire('./pubnub');\nconst RingCentral = require('ringcentral');\nconst fetchMock = require('fetch-mock/es5/client');\n\nconst dialingPlanBody = require('./data/dialingPlan');\nconst extensionBody = require('./data/extensionInfo');\nconst extensionListBody = require('./data/extension');\nconst accountBody = require('./data/accountInfo');\nconst subscriptionBody = require('./data/subscription');\nconst apiInfoBody = require('./data/subscription');\nconst messageSyncBody = require('./data/messageSync');\nconst authzProfileBody = require('./data/authzProfile');\nconst blockedNumberBody = require('./data/blockedNumber');\nconst forwardingNumberBody = require('./data/forwardingNumber');\nconst phoneNumberBody = require('./data/phoneNumber');\n\nconst mockServer = 'http://whatever';\nexport function createSDK(options = {}) {\n  const opts = {\n    ...options,\n    appKey: 'test key',\n    appSecret: 'test secret',\n    server: mockServer,\n    Request: fetchMock.constructor.Request,\n    Response: fetchMock.constructor.Response,\n    Headers: fetchMock.constructor.Headers,\n    fetch: fetchMock.fetchMock.bind(fetchMock),\n    refreshDelayMs: 1,\n    redirectUri: 'http://foo',\n    cachePrefix: 'sdkPrefix',\n  };\n  return new RingCentral(opts);\n}\n\nexport function mockApi({\n  method = 'GET',\n  path,\n  server = mockServer,\n  url,\n  body = {},\n  status = 200,\n  statusText = 'OK',\n  headers,\n}) {\n  let responseHeaders;\n  const isJson = typeof body !== 'string';\n  if (isJson && !headers) {\n    responseHeaders = { 'Content-Type': 'application/json' };\n  } else {\n    responseHeaders = headers;\n  }\n  let mockUrl;\n  if (url) {\n    mockUrl = url;\n  } else {\n    mockUrl = `${server}${path}`;\n  }\n  fetchMock.once(mockUrl, {\n    body: isJson ? JSON.stringify(body) : body,\n    status,\n    statusText,\n    headers: responseHeaders,\n    sendAsJson: false\n  }, {\n    method,\n    times: 1,\n  });\n}\n\nexport function authentication() {\n  mockApi({\n    method: 'POST',\n    path: '/restapi/oauth/token',\n    body: {\n      access_token: 'ACCESS_TOKEN',\n      token_type: 'bearer',\n      expires_in: 3600,\n      refresh_token: 'REFRESH_TOKEN',\n      refresh_token_expires_in: 60480,\n      scope: 'SMS RCM Foo Boo',\n      expireTime: new Date().getTime() + 3600000,\n      owner_id: '23231231\"',\n      endpoint_id: '3213213131',\n    }\n  });\n}\n\nexport function logout() {\n  mockApi({\n    method: 'POST',\n    path: '/restapi/oauth/revoke'\n  });\n}\n\nexport function tokenRefresh(failure) {\n  if (!failure) {\n    mockApi({\n      method: 'POST',\n      path: '/restapi/oauth/token',\n      body: {\n        access_token: 'ACCESS_TOKEN_FROM_REFRESH',\n        token_type: 'bearer',\n        expires_in: 3600,\n        refresh_token: 'REFRESH_TOKEN_FROM_REFRESH',\n        refresh_token_expires_in: 60480,\n        scope: 'SMS RCM Foo Boo'\n      }\n    });\n  } else {\n    mockApi({\n      method: 'POST',\n      path: '/restapi/oauth/token',\n      body: {\n        message: 'Wrong token',\n        error_description: 'Wrong token',\n        description: 'Wrong token'\n      },\n      status: 400,\n    });\n  }\n}\n\nexport function presence(id) {\n  mockApi({\n    path: `/restapi/v1.0/account/~/extension/${id}/presence`,\n    body: {\n      uri: `https://platform.ringcentral.com/restapi/v1.0/account/123/extension/${id}/presence`,\n      extension: {\n        uri: `https://platform.ringcentral.com/restapi/v1.0/account/123/extension/${id}`,\n        extensionNumber: '101',\n        id,\n      },\n      activeCalls: [],\n      presenceStatus: 'Available',\n      telephonyStatus: 'Ringing',\n      userStatus: 'Available',\n      dndStatus: 'TakeAllCalls',\n      extensionId: id\n    }\n  });\n}\n\nexport function dialingPlan() {\n  mockApi({\n    path: '/restapi/v1.0/account/~/dialing-plan?perPage=MAX&page=1',\n    body: dialingPlanBody,\n  });\n}\n\nexport function extensionInfo() {\n  mockApi({\n    path: '/restapi/v1.0/account/~/extension/~',\n    body: extensionBody,\n  });\n}\n\nexport function extensionList() {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension?`,\n    body: extensionListBody,\n  });\n}\n\nexport function accountInfo() {\n  mockApi({\n    path: '/restapi/v1.0/account/~',\n    body: accountBody,\n  });\n}\n\nexport function apiInfo() {\n  mockApi({\n    path: '/restapi/v1.0',\n    body: apiInfoBody,\n  });\n}\n\nexport function messageSync() {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/message-sync`,\n    body: messageSyncBody,\n  });\n}\n\nexport function authzProfile() {\n  mockApi({\n    path: '/restapi/v1.0/account/~/extension/~/authz-profile',\n    body: authzProfileBody,\n  });\n}\n\nexport function blockedNumber() {\n  mockApi({\n    path: '/restapi/v1.0/account/~/extension/~/blocked-number',\n    body: blockedNumberBody,\n  });\n}\n\nexport function forwardingNumber() {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/forwarding-number`,\n    body: forwardingNumberBody,\n  });\n}\n\nexport function phoneNumber() {\n  mockApi({\n    url: `begin:${mockServer}/restapi/v1.0/account/~/extension/~/phone-number`,\n    body: phoneNumberBody,\n  });\n}\n\nexport function subscription() {\n  mockApi({\n    method: 'POST',\n    path: '/restapi/v1.0/subscription',\n    body: subscriptionBody,\n  });\n}\n\nexport function mockForLogin() {\n  authentication();\n  logout();\n  tokenRefresh();\n  presence('~');\n  dialingPlan();\n  extensionInfo();\n  accountInfo();\n  apiInfo();\n  authzProfile();\n  extensionList();\n  blockedNumber();\n  forwardingNumber();\n  messageSync();\n  phoneNumber();\n  subscription();\n}\n\nexport function mockClient(client) {\n  client.service = createSDK({});\n}\n"]}