{"version":3,"sources":["integration-test/spec-modules/composeText.js"],"names":["auth","client","account","alert","regionSettings","composeText","messageSender","describe","timeout","conditionalDescribe","before","isLoginSuccess","skip","console","error","senderNumbersList","senderNumber","it","expect","to","equals","updateSenderNumber","logout","loginStatus","notLoggedIn","login","loggedIn","updateTypingToNumber","typingToNumber","cleanTypingToNumber","updateMessageText","messageText","beforeEach","clean","addToNumber","phoneNumber","toNumbers","deep","removeToNumber","clientHistoryRequest","send","response","include","keys","type","subject","rawRequest","getRawResponse","endPoints","sms","equal","companyPager","smsRequest","pagerRequest","dismissAll","state","messages","length","isAlertClear","str","Array","join","recipientNumberInvalids","not","undefined","textTooLong","noToNumber","setData","countryCode","areaCode","noAreaCode","textEmpty","idle","recipientsEmpty","notAnExtension","specialNumber","debug","notSmsToExtension"],"mappings":"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","file":"composeText.js","sourcesContent":["import loginStatus from '../../modules/Auth/loginStatus';\nimport messageSenderMessages from '../../modules/MessageSender/messageSenderMessages';\nimport { containsErrorMessage, ensureLogin } from '../utils/HelpUtil';\nimport { waitUntilEqual, waitInSeconds, waitUntilNotNull, waitUntilObjectSizeGreaterThan } from '../utils/WaitUtil';\nimport ClientHistoryRequest from '../utils/ClientHistoryRequest';\n\nexport default (auth, client, account, alert, regionSettings, composeText, messageSender) => {\n  describe('ComposeText', async function () {\n    this.timeout(20000);\n    let conditionalDescribe = describe;\n    before(async function () {\n      const isLoginSuccess = await ensureLogin(auth, account);\n      if (!isLoginSuccess) {\n        conditionalDescribe = describe.skip;\n        console.error('Skip test case as failed to login with credential ', account);\n      }\n      await waitUntilNotNull(() => messageSender.senderNumbersList[0], 'First number in senderNumberList', 3);\n      await waitUntilObjectSizeGreaterThan(() => composeText.senderNumber, 'Sender Number', 0, 3);\n    });\n\n    conditionalDescribe('Should Init Successfully with Deafult Setting', () => {\n      it('Should Set Sender Number with First SmsSender Phone Number by Default', () => {\n        expect(composeText.senderNumber).to.equals(messageSender.senderNumbersList[0]);\n      });\n    });\n\n    conditionalDescribe('Should Save Sender Number', () => {\n      it('Should Update Sender Number After User Change Sender Number', () => {\n        composeText.updateSenderNumber(messageSender.senderNumbersList[1]);\n        expect(composeText.senderNumber).to.equals(messageSender.senderNumbersList[1]);\n      });\n\n      it('Should Remember Sender Number After Logout', async () => {\n        composeText.updateSenderNumber(messageSender.senderNumbersList[1]);\n        auth.logout();\n        await waitUntilEqual(() => auth.loginStatus, 'LoginStatus', loginStatus.notLoggedIn, 3);\n        auth.login({\n          ...account\n        });\n        await waitUntilEqual(() => auth.loginStatus, 'LoginStatus', loginStatus.loggedIn, 3);\n        waitInSeconds(2);\n        expect(composeText.senderNumber).to.equals(messageSender.senderNumbersList[1]);\n      });\n    });\n\n    conditionalDescribe('Should Update Typing Number', () => {\n      it('Should Update Typing Number When User Typing Number', () => {\n        composeText.updateTypingToNumber('123');\n        expect(composeText.typingToNumber).to.equals('123');\n      });\n\n      it('Should Clean Typing Number When User Click Clean Button', () => {\n        composeText.updateTypingToNumber('123');\n        composeText.cleanTypingToNumber();\n        expect(composeText.typingToNumber).to.equals('');\n      });\n    });\n\n    conditionalDescribe('Should Update Message Text', () => {\n      it('Should Update Message Text When User Type', () => {\n        composeText.updateMessageText('1234');\n        expect(composeText.messageText).to.equals('1234');\n      });\n    });\n\n    conditionalDescribe('Should Update ToNumbers', () => {\n      beforeEach(() => {\n        composeText.clean();\n      });\n\n      it('Should Add Number to Selected Number List to ToNumbers When User Add it', () => {\n        composeText.addToNumber({ phoneNumber: '+18558990011' });\n        expect(composeText.toNumbers).to.deep.equals([{ phoneNumber: '+18558990011' }]);\n      });\n\n      it('Should Not Repeat Add Number to Selected Number List When User had add it', () => {\n        composeText.addToNumber({ phoneNumber: '+18558990011' });\n        composeText.addToNumber({ phoneNumber: '+18558990011' });\n        expect(composeText.toNumbers).to.deep.equals([{ phoneNumber: '+18558990011' }]);\n      });\n\n      it('Should Remove ToNumber from Selected Number List When User Click Remove Button', () => {\n        composeText.addToNumber({ phoneNumber: '+18558990011' });\n        composeText.removeToNumber({ phoneNumber: '+18558990011' });\n        expect(composeText.toNumbers).to.deep.equals([]);\n      });\n    });\n\n    conditionalDescribe('Should Clean All Inputs After User Submit', () => {\n      it('Should Clean All Inputs', () => {\n        composeText.updateTypingToNumber('123');\n        composeText.addToNumber({ phoneNumber: '+18558990011' });\n        composeText.updateMessageText('1234');\n        composeText.clean();\n        expect(composeText.toNumbers).to.deep.equals([]);\n        expect(composeText.typingToNumber).to.equals('');\n        expect(composeText.messageText).to.equals('');\n      });\n    });\n\n    conditionalDescribe('Should Send Message', () => {\n      const clientHistoryRequest = new ClientHistoryRequest(new Map(), client);\n      beforeEach(() => {\n        composeText.clean();\n      });\n\n      it('Should SMS Message Successfully', async () => {\n        composeText.addToNumber({ phoneNumber: '+18558990011' });\n        composeText.updateMessageText('test');\n        const response = await composeText.send();\n        expect(response).to.include.keys('id', 'conversation');\n        expect(response.type).to.equals('SMS');\n        expect(response.subject).to.equals('test');\n        const rawRequest = clientHistoryRequest.getRawResponse(ClientHistoryRequest.endPoints.sms);\n        expect(JSON.stringify(response)).to.equal(JSON.stringify(rawRequest));\n      });\n\n      it('Should Send Pager Message Successfully', async () => {\n        composeText.clean();\n        composeText.addToNumber({ phoneNumber: '101' });\n        composeText.updateMessageText('test 2');\n        const response = await composeText.send();\n        expect(response).to.include.keys('id', 'conversation');\n        expect(response.type).to.equals('Pager');\n        expect(response.subject).to.equals('test 2');\n        const rawRequest =\n          clientHistoryRequest.getRawResponse(ClientHistoryRequest.endPoints.companyPager);\n        expect(JSON.stringify(response)).to.equal(JSON.stringify(rawRequest));\n      });\n\n      it('Should Send SMS and Pager Message Together Successfully', async () => {\n        composeText.clean();\n        composeText.addToNumber({ phoneNumber: '+18558990011' });\n        composeText.addToNumber({ phoneNumber: '101' });\n        composeText.updateMessageText('test 3');\n        const response = await composeText.send();\n        expect(response).to.include.keys('id', 'conversation');\n        expect(response.subject).to.equals('test 3');\n        const smsRequest = clientHistoryRequest.getRawResponse(ClientHistoryRequest.endPoints.sms);\n        const pagerRequest =\n          clientHistoryRequest.getRawResponse(ClientHistoryRequest.endPoints.companyPager);\n        expect(smsRequest.type).to.equals('SMS');\n        expect(smsRequest.subject).to.equals('test 3');\n        expect(pagerRequest.type).to.equals('Pager');\n        expect(pagerRequest.subject).to.equals('test 3');\n      });\n\n      it('Should Send Pager Message Successfully with Typing Number', async () => {\n        composeText.clean();\n        composeText.updateTypingToNumber('101');\n        composeText.updateMessageText('test 4');\n        const response = await composeText.send();\n        expect(response).to.include.keys('id', 'conversation');\n        expect(response.type).to.equals('Pager');\n        expect(response.subject).to.equals('test 4');\n        const rawRequest =\n          clientHistoryRequest.getRawResponse(ClientHistoryRequest.endPoints.companyPager);\n        expect(JSON.stringify(response)).to.equal(JSON.stringify(rawRequest));\n      });\n    });\n\n    conditionalDescribe('Should Allow Alert', () => {\n      beforeEach(async () => {\n        composeText.clean();\n        const isAlertClear = await waitUntilEqual(() => {\n          alert.dismissAll();\n          return alert.state.messages.length;\n        }, 'Alert', 0, 5);\n        if (!isAlertClear) {\n          console.error('Alert is not cleared after dismissAll');\n          this.skip();\n        }\n      });\n\n      it('Should Alert of recipientNumberInvalids When Typing Number Length more than 30', () => {\n        const str = Array(32).join('x');\n        composeText.updateTypingToNumber(str);\n        expect(containsErrorMessage(\n          alert.state.messages,\n          messageSenderMessages.recipientNumberInvalids\n        )).to.not.equal(undefined);\n        expect(composeText.typingToNumber).to.equals('');\n      });\n\n      it('Should Alert of textTooLong When Message Text length more than 1000', () => {\n        const str = Array(1002).join('x');\n        composeText.updateMessageText(str);\n        expect(containsErrorMessage(\n          alert.state.messages,\n          messageSenderMessages.textTooLong\n        )).to.not.equal(undefined);\n        expect(composeText.messageText).to.equals('');\n      });\n\n      it('Should Alert of noToNumber When Send With wrong Typing Number', async () => {\n        composeText.updateTypingToNumber('test');\n        composeText.updateMessageText('test 5');\n        const response = await composeText.send();\n        expect(containsErrorMessage(\n          alert.state.messages,\n          messageSenderMessages.noToNumber\n        )).to.not.equal(undefined);\n        expect(response).to.equals(null);\n      });\n\n      it('Should Alert of noAreaCode When Send With wrong Typing Number', async () => {\n        regionSettings.setData({ countryCode: 'CA', areaCode: '' });\n        composeText.updateTypingToNumber('6545672');\n        composeText.updateMessageText('test 6');\n        const response = await composeText.send();\n        expect(containsErrorMessage(\n          alert.state.messages,\n          messageSenderMessages.noAreaCode\n        )).to.not.equal(undefined);\n        expect(response).to.equals(null);\n      });\n\n      it('Should Alert of textEmpty When Text Is Empty', async () => {\n        composeText.updateTypingToNumber('+18558990011');\n        composeText.updateMessageText('');\n        const response = await composeText.send();\n        expect(containsErrorMessage(\n          alert.state.messages,\n          messageSenderMessages.textEmpty\n        )).to.not.equal(undefined);\n      });\n\n      it('Should Alert of textEmpty When Text Is Empty with Space', async () => {\n        composeText.updateTypingToNumber('+18558990011');\n        composeText.updateMessageText('   ');\n        const response = await composeText.send();\n        expect(containsErrorMessage(\n          alert.state.messages,\n          messageSenderMessages.textEmpty\n        )).to.not.equal(undefined);\n        expect(messageSender.idle).to.equals(true);\n        expect(response).to.equals(null);\n      });\n\n      it('Should Alert of recipientsEmpty When User Does Not Input Recepiant Number', async () => {\n        composeText.updateMessageText('test sender');\n        const response = await composeText.send();\n        expect(containsErrorMessage(\n          alert.state.messages,\n          messageSenderMessages.recipientsEmpty\n        )).to.not.equal(undefined);\n      });\n\n      it('Should Alert of notAnExtension - Typing Number with a Wrong ExtensionNumber', async () => {\n        composeText.updateTypingToNumber('11111');\n        composeText.updateMessageText('test sender');\n        const response = await composeText.send();\n        expect(containsErrorMessage(\n          alert.state.messages,\n          messageSenderMessages.notAnExtension\n        )).to.not.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n          .to.equal(undefined);\n      });\n\n      it('Should Alert of notAnExtension - ToNumber List with a Wrong ExtensionNumber', async () => {\n        composeText.addToNumber({ phoneNumber: '1111' });\n        composeText.updateMessageText('test sender');\n        const response = await composeText.send();\n        expect(containsErrorMessage(\n          alert.state.messages,\n          messageSenderMessages.notAnExtension\n        )).to.not.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n          .to.equal(undefined);\n      });\n\n      it('Should Alert of recipientNumberInvalids - toNumber is invalid', async () => {\n        composeText.addToNumber({ phoneNumber: '199999' });\n        composeText.updateMessageText('test sender');\n        try {\n          await composeText.send();\n        } catch (error) {\n          console.debug('message sender e:', error);\n        }\n        expect(containsErrorMessage(\n          alert.state.messages,\n          messageSenderMessages.recipientNumberInvalids\n        )).to.not.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n          .to.equal(undefined);\n      });\n\n      it('Should Alert of notSmsToExtension - toNumber is phoneNumber with extensionNumber', async () => {\n        composeText.addToNumber({ phoneNumber: '18558990011*101' });\n        composeText.updateMessageText('test sender');\n        try {\n          await composeText.send();\n        } catch (error) {\n          console.debug('message sender e:', error);\n        }\n        expect(containsErrorMessage(\n          alert.state.messages,\n          messageSenderMessages.notSmsToExtension\n        )).to.not.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n          .to.equal(undefined);\n      });\n\n      it('Should Alert of noToNumber - Typing Number is not number', async () => {\n        composeText.addToNumber({ phoneNumber: \"iamn%@onedi!@$%^&()_=\\\\][';/.,~nu><.,,?/mber\" });\n        composeText.updateMessageText('test sender');\n        await composeText.send();\n        expect(containsErrorMessage(\n          alert.state.messages,\n          messageSenderMessages.noToNumber\n        )).to.not.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n          .to.equal(undefined);\n      });\n\n      it('Should Alert of noToNumber - toNumber include one that is not number', async () => {\n        composeText.addToNumber({ phoneNumber: '101' });\n        composeText.addToNumber({ phoneNumber: 'test' });\n        composeText.updateMessageText('test sender');\n        await composeText.send();\n        expect(containsErrorMessage(\n          alert.state.messages,\n          messageSenderMessages.noToNumber\n        )).to.not.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n          .to.equal(undefined);\n      });\n\n      it('Should Alert of No AreaCode - toNumber is 7 Digital Number with US Dialing Plan without Area Code', async () => {\n        regionSettings.setData({ countryCode: 'US', areaCode: '' });\n        composeText.addToNumber({ phoneNumber: '8990011' });\n        composeText.updateMessageText('test sender');\n        await composeText.send();\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.not.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n          .to.equal(undefined);\n      });\n\n      it('Should Alert of No AreaCode - toNumber is 7 Digital Number with CA Dialing Plan without Area Code', async () => {\n        regionSettings.setData({ countryCode: 'CA', areaCode: '' });\n        composeText.addToNumber({ phoneNumber: '8990011' });\n        composeText.updateMessageText('test sender');\n        await composeText.send();\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.not.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n          .to.equal(undefined);\n      });\n\n      it('Should Not Alert of Anything - toNumber is 7 Digital Number with CA Dialing Plan with Area Code', async () => {\n        regionSettings.setData({ countryCode: 'CA', areaCode: '855' });\n        composeText.addToNumber({ phoneNumber: '8990011' });\n        composeText.updateMessageText('test sender');\n        try {\n          await composeText.send();\n        } catch (error) {\n          console.debug('message sender e:', error);\n        }\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n          .to.equal(undefined);\n        expect(messageSender.idle).to.equals(true);\n      });\n\n      it('Should Not Alert of Anything - toNumber is 7 Digital Number with US Dialing Plan with Area Code', async () => {\n        regionSettings.setData({ countryCode: 'US', areaCode: '855' });\n        composeText.addToNumber({ phoneNumber: '8990011' });\n        composeText.updateMessageText('test sender');\n        try {\n          await composeText.send();\n        } catch (error) {\n          console.debug('message sender e:', error);\n        }\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n          .to.equal(undefined);\n      });\n\n      it('Should Alert Special Number - toNumber is 911 with US Dialing Plan', async () => {\n        regionSettings.setData({ countryCode: 'US', areaCode: '' });\n        composeText.addToNumber({ phoneNumber: '911' });\n        composeText.updateMessageText('test sender');\n        await composeText.send();\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.not.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n          .to.equal(undefined);\n      });\n\n      it('Should Alert Special Number - toNumber 999 with GB Dialing Plan', async () => {\n        regionSettings.setData({ countryCode: 'GB', areaCode: '' });\n        composeText.addToNumber({ phoneNumber: '999' });\n        composeText.updateMessageText('test sender');\n        await composeText.send();\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.not.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n          .to.equal(undefined);\n      });\n\n      it('Should Not Alert Special Number - toNumber 999 with US Dialing Plan', async () => {\n        regionSettings.setData({ countryCode: 'US', areaCode: '' });\n        composeText.addToNumber({ phoneNumber: '999' });\n        composeText.updateMessageText('test sender');\n        await composeText.send();\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n      });\n\n      it('Should Not Alert Special Number - toNumber 911 with GB Dialing Plan', async () => {\n        regionSettings.setData({ countryCode: 'GB', areaCode: '' });\n        composeText.addToNumber({ phoneNumber: '911' });\n        composeText.updateMessageText('test sender');\n        await composeText.send();\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n      });\n\n      it('Should Not Alert Anything - toNumber 101 (Existed Extension/Not Special Number) with US Dialing Plan', async () => {\n        regionSettings.setData({ countryCode: 'US', areaCode: '' });\n        composeText.addToNumber({ phoneNumber: '101' });\n        composeText.updateMessageText('test sender');\n        try {\n          await composeText.send();\n        } catch (error) {\n          console.debug('message sender e:', error);\n        }\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n          .to.equal(undefined);\n      });\n\n      it('Should Alert Special Number - toNumber 101 (Existed Extension/Special Number) with GB Dialing Plan', async () => {\n        regionSettings.setData({ countryCode: 'GB', areaCode: '' });\n        composeText.addToNumber({ phoneNumber: '101' });\n        composeText.updateMessageText('test sender');\n        await composeText.send();\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.not.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n          .to.equal(undefined);\n      });\n\n      it('Should Alert notAnExtension - toNumber 102 (No Extension/Not Special Number) with US Dialing Plan', async () => {\n        regionSettings.setData({ countryCode: 'US', areaCode: '' });\n        composeText.addToNumber({ phoneNumber: '102' });\n        composeText.updateMessageText('test sender');\n        await composeText.send();\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n          .to.not.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n          .to.equal(undefined);\n      });\n\n      it('Should Alert notAnExtension - toNumber 998 (No Extension) with US Dialing Plan', async () => {\n        regionSettings.setData({ countryCode: 'US', areaCode: '' });\n        composeText.addToNumber({ phoneNumber: '998' });\n        composeText.updateMessageText('test sender');\n        await composeText.send();\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n          .to.not.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n          .to.equal(undefined);\n      });\n\n      it('Should Alert notAnExtension - toNumber 998 (No Extension) with GB Dialing Plan', async () => {\n        regionSettings.setData({ countryCode: 'GB', areaCode: '' });\n        composeText.addToNumber({ phoneNumber: '998' });\n        composeText.updateMessageText('test sender');\n        await composeText.send();\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noAreaCode))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.specialNumber))\n          .to.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.notAnExtension))\n          .to.not.equal(undefined);\n        expect(containsErrorMessage(alert.state.messages, messageSenderMessages.noToNumber))\n          .to.equal(undefined);\n      });\n    });\n  });\n};\n"]}