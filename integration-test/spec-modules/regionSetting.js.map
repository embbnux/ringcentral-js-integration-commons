{"version":3,"sources":["integration-test/spec-modules/regionSetting.js"],"names":["auth","client","regionSettings","account","describe","timeout","isLoginSuccess","clientHistoryRequest","before","console","error","skip","it","retries","expect","availableCountries","to","have","length","above","equal","getRawResponse","endPoints","dialingPlan","records"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;kBAEe,UAACA,IAAD,EAAOC,MAAP,EAAeC,cAAf,EAA+BC,OAA/B,EAA2C;AACxDC,WAAS,yCAAT,EAAoD,YAAW;AAC7D,SAAKC,OAAL,CAAa,KAAb;AACA,QAAIC,uBAAJ;AACA,QAAMC,uBAAuB,mCAAyB,mBAAzB,EAAoCN,MAApC,CAA7B;AACAO,sEAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACkB,2BAAYR,IAAZ,EAAkBG,OAAlB,CADlB;;AAAA;AACLG,4BADK;;AAEL,kBAAI,CAACA,cAAL,EAAqB;AACnBG,wBAAQC,KAAR,CAAc,oDAAd,EAAoEP,OAApE;AACA,qBAAKQ,IAAL;AACD;;AALI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;;AAQAC,OAAG,0DAAH,6DAA+D;AAAA;AAAA;AAAA;AAAA;AAC7D,mBAAKC,OAAL,CAAa,CAAb;AAD6D;AAAA,qBAEvD,6BAAc,CAAd,CAFuD;;AAAA;AAG7DC,qBAAOZ,eAAea,kBAAtB,EAA0CC,EAA1C,CAA6CC,IAA7C,CAAkDC,MAAlD,CAAyDC,KAAzD,CAA+D,CAA/D;;AAH6D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA/D;;AAMAP,OAAG,uDAAH,EAA2D,YAAU;AACnEE,aAAOZ,eAAea,kBAAf,CAAkCG,MAAzC,EAAiDF,EAAjD,CAAoDI,KAApD,CAA0Db,qBAAqBc,cAArB,CAAoC,+BAAqBC,SAArB,CAA+BC,WAAnE,EAAgFC,OAAhF,CAAwFN,MAAlJ;AACD,KAFD;AAGD,GArBD;AAsBD,C","file":"regionSetting.js","sourcesContent":["import { ensureLogin } from '../utils/HelpUtil';\nimport { waitInSeconds } from '../utils/WaitUtil';\nimport ClientHistoryRequest from \"../utils/ClientHistoryRequest\";\n\nexport default (auth, client, regionSettings, account) => {\n  describe('Should Load Region Settings after Login', function() {\n    this.timeout(20000);\n    let isLoginSuccess;\n    const clientHistoryRequest = new ClientHistoryRequest(new Map(), client);\n    before(async function(){\n      isLoginSuccess = await ensureLogin(auth, account);\n      if (!isLoginSuccess) {\n        console.error('Skip test case as failed to login with credential ', account);\n        this.skip();\n      }\n    });\n\n    it('Region Settings should be ready in 2 seconds after login', async function () {\n      this.retries(2);\n      await waitInSeconds(2);\n      expect(regionSettings.availableCountries).to.have.length.above(0);\n    });\n    \n    it('Record fetched from SDK should be the same as RawData',function(){\n      expect(regionSettings.availableCountries.length).to.equal(clientHistoryRequest.getRawResponse(ClientHistoryRequest.endPoints.dialingPlan).records.length);\n    });\n  });\n}"]}