{"version":3,"sources":["integration-test/spec-modules/callingSettings.js"],"names":["auth","client","alert","account","callingSettings","extensionPhoneNumber","extensionInfo","describe","timeout","conditionalDescribe","isLoginSuccess","skip","console","error","it","expect","callWith","to","equals","softphone","callingMode","setData","myphone","ringout","otherphone","customphone","myLocation","ringoutPrompt","beforeEach","dismissAll","state","messages","length","isAlertClear","saveSuccessWithSoftphone","not","equal","undefined","saveSuccess","logout","loginStatus","notLoggedIn","login","loggedIn","myPhoneNumbers","directNumbers","map","item","phoneNumber","mainCompanyNumber","extensionNumber","push","forEach","number","include"],"mappings":"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","file":"callingSettings.js","sourcesContent":["import callingOptions from '../..//modules/CallingSettings/callingOptions';\nimport callingModes from '../../modules/CallingSettings/callingModes';\nimport callingSettingsMessages from '../..//modules/CallingSettings/callingSettingsMessages';\nimport loginStatus from '../..//modules/Auth/loginStatus';\nimport { containsErrorMessage, ensureLogin } from '../utils/HelpUtil';\nimport { waitUntilEqual, waitInSeconds } from '../utils/WaitUtil';\n\nexport default (auth, client, alert, account, callingSettings, extensionPhoneNumber, extensionInfo) => {\n  describe('Calling Settings', async function () {\n    this.timeout(20000);\n    let conditionalDescribe = describe;\n    const isLoginSuccess = await ensureLogin(auth, account);\n    if (!isLoginSuccess) {\n      conditionalDescribe = describe.skip;\n      console.error('Skip test case as failed to login with credential ', account);\n    } \n    conditionalDescribe('Should Be Make Call with Softphone by Default', function() {\n      it('Should Be Make Call with Softphone by Default', async function () {\n        expect(callingSettings.callWith).to.equals(callingOptions.softphone);\n        expect(callingSettings.callingMode).to.equals(callingModes.softphone);\n      });\n    });\n    conditionalDescribe('Should Save Calling Mode', function () {\n      it('Should Save My RingCentral Phone', async function () {\n        callingSettings.setData({\n          callWith: callingOptions.myphone\n        });\n        expect(callingSettings.callWith).to.equals(callingOptions.myphone);\n        expect(callingSettings.callingMode).to.equals(callingModes.ringout);\n      });\n      it('Should Save Other Phone', async function () {\n        callingSettings.setData({\n          callWith: callingOptions.otherphone\n        });\n        expect(callingSettings.callWith).to.equals(callingOptions.otherphone);\n        expect(callingSettings.callingMode).to.equals(callingModes.ringout);\n      });\n      it('Should Save Custom Phone', async function () {\n        callingSettings.setData({\n          callWith: callingOptions.customphone\n        });\n        expect(callingSettings.callWith).to.equals(callingOptions.customphone);\n        expect(callingSettings.callingMode).to.equals(callingModes.ringout);\n      });\n    });\n    conditionalDescribe('Should Save Options in RingOut Mode', function () {\n      it('Should Save From Number', async function () {\n         callingSettings.setData({\n          myLocation: '123'\n        });\n        expect(callingSettings.myLocation).to.equals('123');\n      });\n      it('Should Save RingoutPrompt', async function () {\n         callingSettings.setData({\n          ringoutPrompt: '123'\n        });\n        expect(callingSettings.ringoutPrompt).to.equals('123');\n      });\n    });\n    conditionalDescribe('Should Allow Alert', function() {\n      beforeEach(async function () {\n        const isAlertClear = await waitUntilEqual(() => {\n          alert.dismissAll();\n          return alert.state.messages.length;\n        }, 'Alert', 0, 5);\n        if (!isAlertClear) {\n          console.error('Alert is not cleared after dismissAll');\n          this.skip();\n        }\n      });\n      describe('Should Prompt Alerts when withPrompt Equals True', function () {\n        it('Should Prompt Alert of saveSuccessWithSoftphone', async function () {\n          callingSettings.setData({\n            callWith: callingOptions.softphone\n          }, true);\n          expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccessWithSoftphone)).to.not.equal(undefined);\n        });\n        it('Should Prompt Alert of saveSuccess when Calling Option is Other Phone', async function () {\n          callingSettings.setData({\n            callWith: callingOptions.otherphone\n          }, true);\n          expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccess)).to.not.equal(undefined);\n        });\n        it('Should Prompt Alert of saveSuccess when Calling Option is My RingCentral Phone', async function () {\n          callingSettings.setData({\n            callWith: callingOptions.myphone\n          }, true);\n          expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccess)).to.not.equal(undefined);\n        });\n        it('Should Prompt Alert of saveSuccess when Calling Option is Custom Phone', async function () {\n          callingSettings.setData({\n            callWith: callingOptions.customphone\n          }, true);\n          expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccess)).to.not.equal(undefined);\n        });\n     \n      });\n      describe('Should Not Prompt Alerts when withPrompt Equals False', function() {\n        it('Should Not Prompt Alert when Calling Option is Softphone', async function () {\n          callingSettings.setData({\n            callWith: callingOptions.softphone\n          }, false);\n          expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccess)).to.equal(undefined);\n          expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccessWithSoftphone)).to.equal(undefined);\n        });\n        it('Should Not Prompt Alert when Calling Option is My RingCentral Phone', async function () {\n          callingSettings.setData({\n            callWith: callingOptions.myphone\n          }, false);\n          expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccess)).to.equal(undefined);\n          expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccessWithSoftphone)).to.equal(undefined);\n        });\n        it('Should Not Prompt Alert when Calling Option is Other Phone', async function () {\n          callingSettings.setData({\n            callWith: callingOptions.otherphone\n          }, false);\n          expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccess)).to.equal(undefined);\n          expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccessWithSoftphone)).to.equal(undefined);\n        });\n        it('Should Not Prompt Alert when Calling Option is Custom Phone', async function () {\n          callingSettings.setData({\n            callWith: callingOptions.customphone\n          }, false);\n          expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccess)).to.equal(undefined);\n          expect(containsErrorMessage(alert.state.messages, callingSettingsMessages.saveSuccessWithSoftphone)).to.equal(undefined);\n        });\n      });\n    });\n    conditionalDescribe('Should Remember after Logout', function() {\n      it('Should Remember Calling Settings after Re-login', async function () {\n        callingSettings.setData({\n          callWith: callingOptions.customphone,\n          myLocation: '456',\n          ringoutPrompt: '456'\n        });\n        auth.logout();\n        await waitUntilEqual(() => auth.loginStatus, 'LoginStatus', loginStatus.notLoggedIn, 3);\n        auth.login({\n          ...account\n        });\n        await waitUntilEqual(() => auth.loginStatus, 'LoginStatus', loginStatus.loggedIn, 3);\n        waitInSeconds(2);\n        expect(callingSettings.ringoutPrompt).to.equals('456');\n        expect(callingSettings.myLocation).to.equals('456');\n        expect(callingSettings.callWith).to.equals(callingOptions.customphone);\n        expect(callingSettings.callingMode).to.equals(callingModes.ringout);\n      });\n    });\n    conditionalDescribe('Should Have Required Phone Numbers', function() {\n      it('Should Have My Phone Numbers', async function() {\n        const myPhoneNumbers = extensionPhoneNumber.directNumbers.map(item => item.phoneNumber);\n        const mainCompanyNumber = extensionPhoneNumber.mainCompanyNumber;\n        const extensionNumber = extensionInfo.extensionNumber;\n        if (mainCompanyNumber && extensionNumber) {\n          myPhoneNumbers.push(`${mainCompanyNumber.phoneNumber}*${extensionNumber}`);\n        }\n        expect(callingSettings.myPhoneNumbers.length).to.equal(myPhoneNumbers.length);\n        callingSettings.myPhoneNumbers.forEach((number) => {\n          expect(myPhoneNumbers).to.include(number);\n        });\n      });\n      //TODO: Add test cases for Other Phone Numbers\n    });\n  });\n}\n"]}