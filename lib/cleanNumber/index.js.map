{"version":3,"sources":["lib/cleanNumber/index.js"],"names":["cleanNumber","cleanRegex","plusRegex","extensionDelimiter","phoneNumber","cleaned","replace","hasPlus","output","split","slice","join"],"mappings":";;;;;kBASwBA,W;AATxB,IAAMC,aAAa,WAAnB;AACA,IAAMC,YAAY,KAAlB;AACA,IAAMC,qBAAqB,OAA3B;AACA;;;;;;AAMe,SAASH,WAAT,CAAqBI,WAArB,EAAkC;AAC/C,MAAMC,UAAUD,YAAYE,OAAZ,CAAoBL,UAApB,EAAgC,EAAhC,CAAhB;AACA,MAAMM,UAAUF,QAAQ,CAAR,MAAe,GAA/B;AACA,MAAMG,SAASH,QAAQC,OAAR,CAAgBJ,SAAhB,EAA2B,EAA3B,EACZO,KADY,CACNN,kBADM,EAEZO,KAFY,CAEN,CAFM,EAEH,CAFG,EAGZC,IAHY,CAGP,GAHO,CAAf;AAIA,SAAOJ,gBACDC,MADC,GAELA,MAFF;AAGD","file":"index.js","sourcesContent":["const cleanRegex = /[^\\d*+#]/g;\nconst plusRegex = /\\+/g;\nconst extensionDelimiter = /[*#]/g;\n/**\n * @function\n * @param {String} phoneNumber\n * @description Remove any characters except numeric, #, *, and leading +. We only consider \n * first occurence of * or #. Things after subsequent * or # will be removed.\n */\nexport default function cleanNumber(phoneNumber) {\n  const cleaned = phoneNumber.replace(cleanRegex, '');\n  const hasPlus = cleaned[0] === '+';\n  const output = cleaned.replace(plusRegex, '')\n    .split(extensionDelimiter)\n    .slice(0, 2)\n    .join('*');\n  return hasPlus ?\n    `+${output}` :\n    output;\n}\n"]}