{"version":3,"sources":["lib/ChromeTransport/ClientTransport.js"],"names":["ClientTransport","options","name","_requests","_port","chrome","runtime","connect","onMessage","addListener","type","payload","requestId","result","error","_events","push","emit","response","has","get","reject","Error","resolve","v4","promise","set","postMessage","request","timeout","setTimeout","_timeout","then","clearTimeout","delete","catch"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA;;IAEqBA,e;;;AACnB,2BAAYC,OAAZ,EAAqB;AAAA;;AAAA,mLAEdA,OAFc;AAGjBC,YAAM;AAHW;;AAKnB,UAAKC,SAAL,GAAiB,mBAAjB;AACA,UAAKC,KAAL,GAAaC,OAAOC,OAAP,CAAeC,OAAf,CAAuB,EAAEL,MAAM,WAAR,EAAvB,CAAb;AACA,UAAKE,KAAL,CAAWI,SAAX,CAAqBC,WAArB,CAAiC,gBAM3B;AAAA,UALJC,IAKI,QALJA,IAKI;AAAA,UAJJC,OAII,QAJJA,OAII;AAAA,UAHJC,SAGI,QAHJA,SAGI;AAAA,UAFJC,MAEI,QAFJA,MAEI;AAAA,UADJC,KACI,QADJA,KACI;;AACJ,cAAQJ,IAAR;AACE,aAAK,MAAKK,OAAL,CAAaC,IAAlB;AACE,cAAIL,OAAJ,EAAa;AACX,kBAAKM,IAAL,CAAU,MAAKF,OAAL,CAAaC,IAAvB,EAA6BL,OAA7B;AACD;AACD;AACF,aAAK,MAAKI,OAAL,CAAaG,QAAlB;AACE,cAAIN,aAAa,MAAKT,SAAL,CAAegB,GAAf,CAAmBP,SAAnB,CAAjB,EAAgD;AAC9C,gBAAIE,KAAJ,EAAW;AACT,oBAAKX,SAAL,CAAeiB,GAAf,CAAmBR,SAAnB,EAA8BS,MAA9B,CAAqC,IAAIC,KAAJ,CAAUR,KAAV,CAArC;AACD,aAFD,MAEO;AACL,oBAAKX,SAAL,CAAeiB,GAAf,CAAmBR,SAAnB,EAA8BW,OAA9B,CAAsCV,MAAtC;AACD;AACF;AACD;AACF;AACE;AAhBJ;AAkBD,KAzBD;AAPmB;AAiCpB;;;;;;;;YACeF,O,SAAAA,O;;;;;;AACRC,yB,GAAY,eAAKY,EAAL,E;AACdC,uB,GAAU,sBAAY,UAACF,OAAD,EAAUF,MAAV,EAAqB;AAC7C,yBAAKlB,SAAL,CAAeuB,GAAf,CAAmBd,SAAnB,EAA8B;AAC5BW,oCAD4B;AAE5BF;AAF4B,mBAA9B;AAIA,yBAAKjB,KAAL,CAAWuB,WAAX,CAAuB;AACrBjB,0BAAM,OAAKK,OAAL,CAAaa,OADE;AAErBhB,wCAFqB;AAGrBD;AAHqB,mBAAvB;AAKD,iBAVa,C;AAWVkB,uB,GAAUC,WAAW,YAAM;AAC7BD,4BAAU,IAAV;AACA,yBAAK1B,SAAL,CAAeiB,GAAf,CAAmBR,SAAnB,EAA8BS,MAA9B,CAAqC,IAAIC,KAAJ,CAAU,OAAKP,OAAL,CAAac,OAAvB,CAArC;AACD,iBAHa,EAGX,KAAKE,QAHM,C;;AAIdN,0BAAUA,QAAQO,IAAR,CAAa,UAACnB,MAAD,EAAY;AACjC,sBAAIgB,OAAJ,EAAaI,aAAaJ,OAAb;AACb,yBAAK1B,SAAL,CAAe+B,MAAf,CAAsBtB,SAAtB;AACA,yBAAO,kBAAQW,OAAR,CAAgBV,MAAhB,CAAP;AACD,iBAJS,EAIPsB,KAJO,CAID,UAACrB,KAAD,EAAW;AAClB,sBAAIe,OAAJ,EAAaI,aAAaJ,OAAb;AACb,yBAAK1B,SAAL,CAAe+B,MAAf,CAAsBtB,SAAtB;AACA,yBAAO,kBAAQS,MAAR,CAAeP,KAAf,CAAP;AACD,iBARS,CAAV;iDASOW,O;;;;;;;;;;;;;;;;;;;;kBA7DUzB,e","file":"ClientTransport.js","sourcesContent":["import uuid from 'uuid';\r\nimport TransportBase from '../TransportBase';\r\n\r\n/* global chrome */\r\n\r\nexport default class ClientTransport extends TransportBase {\r\n  constructor(options) {\r\n    super({\r\n      ...options,\r\n      name: 'ChromeTransport',\r\n    });\r\n    this._requests = new Map();\r\n    this._port = chrome.runtime.connect({ name: 'transport' });\r\n    this._port.onMessage.addListener(({\r\n      type,\r\n      payload,\r\n      requestId,\r\n      result,\r\n      error,\r\n    }) => {\r\n      switch (type) {\r\n        case this._events.push:\r\n          if (payload) {\r\n            this.emit(this._events.push, payload);\r\n          }\r\n          break;\r\n        case this._events.response:\r\n          if (requestId && this._requests.has(requestId)) {\r\n            if (error) {\r\n              this._requests.get(requestId).reject(new Error(error));\r\n            } else {\r\n              this._requests.get(requestId).resolve(result);\r\n            }\r\n          }\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  }\r\n  async request({ payload }) {\r\n    const requestId = uuid.v4();\r\n    let promise = new Promise((resolve, reject) => {\r\n      this._requests.set(requestId, {\r\n        resolve,\r\n        reject,\r\n      });\r\n      this._port.postMessage({\r\n        type: this._events.request,\r\n        requestId,\r\n        payload,\r\n      });\r\n    });\r\n    let timeout = setTimeout(() => {\r\n      timeout = null;\r\n      this._requests.get(requestId).reject(new Error(this._events.timeout));\r\n    }, this._timeout);\r\n    promise = promise.then((result) => {\r\n      if (timeout) clearTimeout(timeout);\r\n      this._requests.delete(requestId);\r\n      return Promise.resolve(result);\r\n    }).catch((error) => {\r\n      if (timeout) clearTimeout(timeout);\r\n      this._requests.delete(requestId);\r\n      return Promise.reject(error);\r\n    });\r\n    return promise;\r\n  }\r\n}\r\n"]}