{"version":3,"sources":["lib/ChromeTransport/ServerTransport.js"],"names":["ServerTransport","options","name","_ports","_requests","_activeTabs","chrome","tabs","onActivated","addListener","query","active","runtime","onConnect","port","add","onMessage","type","requestId","payload","_events","request","set","emit","onDisconnect","delete","result","error","get","Error","message","postMessage","response","push","isOnActiveTabs","find","tab","id","sender","filter","forEach"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;AAEA;;IAEqBA,e;;;AACnB,2BAAYC,OAAZ,EAAqB;AAAA;;AAAA,mLAEdA,OAFc;AAGjBC,YAAM;AAHW;;AAKnB,UAAKC,MAAL,GAAc,mBAAd;AACA,UAAKC,SAAL,GAAiB,mBAAjB;;AAEA;AACA,UAAKC,WAAL,GAAmB,EAAnB;AACAC,WAAOC,IAAP,CAAYC,WAAZ,CAAwBC,WAAxB,CAAoC,YAAM;AACxCH,aAAOC,IAAP,CAAYG,KAAZ,CAAkB,EAAEC,QAAQ,IAAV,EAAlB,EAAoC,UAACJ,IAAD,EAAU;AAC5C,cAAKF,WAAL,GAAmBE,IAAnB;AACD,OAFD;AAGD,KAJD;AAKAD,WAAOM,OAAP,CAAeC,SAAf,CAAyBJ,WAAzB,CAAqC,UAACK,IAAD,EAAU;AAC7C,UAAIA,KAAKZ,IAAL,KAAc,WAAlB,EAA+B;AAC7B,cAAKC,MAAL,CAAYY,GAAZ,CAAgBD,IAAhB;AACAA,aAAKE,SAAL,CAAeP,WAAf,CAA2B,gBAAkC;AAAA,cAA/BQ,IAA+B,QAA/BA,IAA+B;AAAA,cAAzBC,SAAyB,QAAzBA,SAAyB;AAAA,cAAdC,OAAc,QAAdA,OAAc;;AAC3D,cAAIF,SAAS,MAAKG,OAAL,CAAaC,OAAtB,IAAiCH,SAAjC,IAA8CC,OAAlD,EAA2D;AACzD,kBAAKf,SAAL,CAAekB,GAAf,CAAmBJ,SAAnB,EAA8BJ,IAA9B;AACA,kBAAKS,IAAL,CAAU,MAAKH,OAAL,CAAaC,OAAvB,EAAgC;AAC9BH,kCAD8B;AAE9BC;AAF8B,aAAhC;AAID;AACF,SARD;AASAL,aAAKU,YAAL,CAAkBf,WAAlB,CAA8B,YAAM;AAClC,gBAAKN,MAAL,CAAYsB,MAAZ,CAAmBX,IAAnB;AACD,SAFD;AAGD;AACF,KAhBD;AAfmB;AAgCpB;;;;oCACsC;AAAA,UAA5BI,SAA4B,SAA5BA,SAA4B;AAAA,UAAjBQ,MAAiB,SAAjBA,MAAiB;AAAA,UAATC,KAAS,SAATA,KAAS;;AACrC,UAAMb,OAAO,KAAKV,SAAL,CAAewB,GAAf,CAAmBV,SAAnB,CAAb;AACA,UAAIJ,IAAJ,EAAU;AACR,aAAKV,SAAL,CAAeqB,MAAf,CAAsBP,SAAtB;AACA,YAAIS,iBAAiBE,KAArB,EAA4B;AAC1BF,kBAAQA,MAAMG,OAAd;AACD;AACDhB,aAAKiB,WAAL,CAAiB;AACfd,gBAAM,KAAKG,OAAL,CAAaY,QADJ;AAEfd,8BAFe;AAGfQ,wBAHe;AAIfC;AAJe,SAAjB;AAMD;AACF;;;gCACiB;AAAA;;AAAA,UAAXR,OAAW,SAAXA,OAAW;;AAChB,UAAMW,UAAU,EAAEb,MAAM,KAAKG,OAAL,CAAaa,IAArB,EAA2Bd,gBAA3B,EAAhB;AACA,UAAMe,iBAAiB,SAAjBA,cAAiB;AAAA,eACrB,CAAC,CAAC,OAAK7B,WAAL,CAAiB8B,IAAjB,CAAsB;AAAA,iBAAOC,IAAIC,EAAJ,KAAWvB,KAAKwB,MAAL,CAAYF,GAAZ,CAAgBC,EAAlC;AAAA,SAAtB,CADmB;AAAA,OAAvB;AAEA;AACA;AACA,0BAAW,KAAKlC,MAAhB,EACGoC,MADH,CACU;AAAA,eAAQL,eAAepB,IAAf,CAAR;AAAA,OADV,EAEG0B,OAFH,CAEW;AAAA,eAAQ1B,KAAKiB,WAAL,CAAiBD,OAAjB,CAAR;AAAA,OAFX;AAGD;;;;;kBA1DkB9B,e","file":"ServerTransport.js","sourcesContent":["import TransportBase from '../TransportBase';\r\n\r\n/* global chrome */\r\n\r\nexport default class ServerTransport extends TransportBase {\r\n  constructor(options) {\r\n    super({\r\n      ...options,\r\n      name: 'ChromeTransport',\r\n    });\r\n    this._ports = new Set();\r\n    this._requests = new Map();\r\n\r\n    // Keep active tabs up to date\r\n    this._activeTabs = [];\r\n    chrome.tabs.onActivated.addListener(() => {\r\n      chrome.tabs.query({ active: true }, (tabs) => {\r\n        this._activeTabs = tabs;\r\n      });\r\n    });\r\n    chrome.runtime.onConnect.addListener((port) => {\r\n      if (port.name === 'transport') {\r\n        this._ports.add(port);\r\n        port.onMessage.addListener(({ type, requestId, payload }) => {\r\n          if (type === this._events.request && requestId && payload) {\r\n            this._requests.set(requestId, port);\r\n            this.emit(this._events.request, {\r\n              requestId,\r\n              payload,\r\n            });\r\n          }\r\n        });\r\n        port.onDisconnect.addListener(() => {\r\n          this._ports.delete(port);\r\n        });\r\n      }\r\n    });\r\n  }\r\n  response({ requestId, result, error }) {\r\n    const port = this._requests.get(requestId);\r\n    if (port) {\r\n      this._requests.delete(requestId);\r\n      if (error instanceof Error) {\r\n        error = error.message;\r\n      }\r\n      port.postMessage({\r\n        type: this._events.response,\r\n        requestId,\r\n        result,\r\n        error,\r\n      });\r\n    }\r\n  }\r\n  push({ payload }) {\r\n    const message = { type: this._events.push, payload };\r\n    const isOnActiveTabs = port =>\r\n      !!this._activeTabs.find(tab => tab.id === port.sender.tab.id);\r\n    // Since postMessage is really expensive,\r\n    // we only send messages to those ports on active tabs.\r\n    Array.from(this._ports)\r\n      .filter(port => isOnActiveTabs(port))\r\n      .forEach(port => port.postMessage(message));\r\n  }\r\n}\r\n"]}