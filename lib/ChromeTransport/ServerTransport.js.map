{"version":3,"sources":["lib/ChromeTransport/ServerTransport.js"],"names":["ServerTransport","options","name","_ports","_requests","chrome","runtime","onConnect","addListener","port","add","onMessage","type","requestId","payload","_events","request","set","emit","onDisconnect","delete","result","error","get","postMessage","response","forEach","push"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA;;IAEqBA,e;;;AACnB,2BAAYC,OAAZ,EAAqB;AAAA;;AAAA,mLAEdA,OAFc;AAGjBC,YAAM;AAHW;;AAKnB,UAAKC,MAAL,GAAc,mBAAd;AACA,UAAKC,SAAL,GAAiB,mBAAjB;AACAC,WAAOC,OAAP,CAAeC,SAAf,CAAyBC,WAAzB,CAAqC,UAACC,IAAD,EAAU;AAC7C,UAAIA,KAAKP,IAAL,KAAc,WAAlB,EAA+B;AAC7B,cAAKC,MAAL,CAAYO,GAAZ,CAAgBD,IAAhB;AACAA,aAAKE,SAAL,CAAeH,WAAf,CAA2B,gBAAkC;AAAA,cAA/BI,IAA+B,QAA/BA,IAA+B;AAAA,cAAzBC,SAAyB,QAAzBA,SAAyB;AAAA,cAAdC,OAAc,QAAdA,OAAc;;AAC3D,cAAIF,SAAS,MAAKG,OAAL,CAAaC,OAAtB,IAAiCH,SAAjC,IAA8CC,OAAlD,EAA2D;AACzD,kBAAKV,SAAL,CAAea,GAAf,CAAmBJ,SAAnB,EAA8BJ,IAA9B;AACA,kBAAKS,IAAL,CAAU,MAAKH,OAAL,CAAaC,OAAvB,EAAgC;AAC9BH,kCAD8B;AAE9BC;AAF8B,aAAhC;AAID;AACF,SARD;AASAL,aAAKU,YAAL,CAAkBX,WAAlB,CAA8B,YAAM;AAClC,gBAAKL,MAAL,CAAYiB,MAAZ,CAAmBX,IAAnB;AACD,SAFD;AAGD;AACF,KAhBD;AAPmB;AAwBpB;;;;oCACsC;AAAA,UAA5BI,SAA4B,SAA5BA,SAA4B;AAAA,UAAjBQ,MAAiB,SAAjBA,MAAiB;AAAA,UAATC,KAAS,SAATA,KAAS;;AACrC,UAAMb,OAAO,KAAKL,SAAL,CAAemB,GAAf,CAAmBV,SAAnB,CAAb;AACA,UAAIJ,IAAJ,EAAU;AACR,aAAKL,SAAL,CAAegB,MAAf,CAAsBP,SAAtB;AACAJ,aAAKe,WAAL,CAAiB;AACfZ,gBAAM,KAAKG,OAAL,CAAaU,QADJ;AAEfZ,8BAFe;AAGfQ,wBAHe;AAIfC;AAJe,SAAjB;AAMD;AACF;;;gCACiB;AAAA;;AAAA,UAAXR,OAAW,SAAXA,OAAW;;AAChB,WAAKX,MAAL,CAAYuB,OAAZ,CAAoB,UAACjB,IAAD,EAAU;AAC5BA,aAAKe,WAAL,CAAiB;AACfZ,gBAAM,OAAKG,OAAL,CAAaY,IADJ;AAEfb;AAFe,SAAjB;AAID,OALD;AAMD;;;;;kBA7CkBd,e","file":"ServerTransport.js","sourcesContent":["import uuid from 'uuid';\r\nimport TransportBase from '../TransportBase';\r\n\r\n/* global chrome */\r\n\r\nexport default class ServerTransport extends TransportBase {\r\n  constructor(options) {\r\n    super({\r\n      ...options,\r\n      name: 'ChromeTransport',\r\n    });\r\n    this._ports = new Set();\r\n    this._requests = new Map();\r\n    chrome.runtime.onConnect.addListener((port) => {\r\n      if (port.name === 'transport') {\r\n        this._ports.add(port);\r\n        port.onMessage.addListener(({ type, requestId, payload }) => {\r\n          if (type === this._events.request && requestId && payload) {\r\n            this._requests.set(requestId, port);\r\n            this.emit(this._events.request, {\r\n              requestId,\r\n              payload,\r\n            });\r\n          }\r\n        });\r\n        port.onDisconnect.addListener(() => {\r\n          this._ports.delete(port);\r\n        });\r\n      }\r\n    });\r\n  }\r\n  response({ requestId, result, error }) {\r\n    const port = this._requests.get(requestId);\r\n    if (port) {\r\n      this._requests.delete(requestId);\r\n      port.postMessage({\r\n        type: this._events.response,\r\n        requestId,\r\n        result,\r\n        error,\r\n      });\r\n    }\r\n  }\r\n  push({ payload }) {\r\n    this._ports.forEach((port) => {\r\n      port.postMessage({\r\n        type: this._events.push,\r\n        payload,\r\n      });\r\n    });\r\n  }\r\n}\r\n"]}