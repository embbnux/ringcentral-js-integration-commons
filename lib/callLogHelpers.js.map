{"version":3,"sources":["lib/callLogHelpers.js"],"names":["isInbound","isOutbound","isRinging","hasRingingCalls","isEnded","hasEndedCalls","isOnHold","isIntermediateCall","sortBySessionId","sortByStartTime","normalizeStartTime","normalizeFromTo","areTwoLegs","removeInboundRingOutLegs","removeDuplicateIntermediateCalls","call","direction","inbound","outbound","telephonyStatus","ringing","calls","find","noCall","terminationType","final","onHold","intermediate","a","b","sessionId","startTime","Date","getTime","from","phoneNumber","to","Math","abs","action","phoneCall","ringOutWeb","ringOutPC","ringOutMobile","extensionNumber","output","outbounds","filter","forEach","outboundIndex","findIndex","splice","outboundLeg","inboundLeg","result","push","concat","resultCalls","indexMap","isIntermediate","sessionid","index","length"],"mappings":"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","file":"callLogHelpers.js","sourcesContent":["import 'core-js/fn/array/find';\nimport {\n  isValidNumber,\n} from 'phoneformat.js';\nimport callActions from '../enums/callActions';\nimport callDirections from '../enums/callDirections';\nimport telephonyStatuses from '../enums/telephonyStatuses';\nimport terminationTypes from '../enums/terminationTypes';\nimport isSameLocalNumber from './isSameLocalNumber';\n\n/* call direction helpers */\nexport function isInbound(call = {}) {\n  return call.direction === callDirections.inbound;\n}\n\nexport function isOutbound(call = {}) {\n  return call.direction === callDirections.outbound;\n}\n\n/* status helpers */\nexport function isRinging(call = {}) {\n  return call.telephonyStatus === telephonyStatuses.ringing;\n}\n\nexport function hasRingingCalls(calls = []) {\n  return !!calls.find(isRinging);\n}\n\nexport function isEnded(call = {}) {\n  return call.telephonyStatus === telephonyStatuses.noCall &&\n    call.terminationType === terminationTypes.final;\n}\n\nexport function hasEndedCalls(calls) {\n  return !!calls.find(isEnded);\n}\n\nexport function isOnHold(call = {}) {\n  return call.telephonyStatus === telephonyStatuses.onHold;\n}\n\nexport function isIntermediateCall(call = {}) {\n  return call.terminationType === terminationTypes.intermediate;\n}\n\n/* sort functions */\n\nexport function sortBySessionId(a, b) {\n  if (a.sessionId === b.sessionId) return 0;\n  return a.sessionId > b.sessionId ?\n    1 :\n    -1;\n}\nexport function sortByStartTime(a, b) {\n  if (a.startTime === b.startTime) return 0;\n  return a.startTime > b.startTime ?\n    -1 :\n    1;\n}\n\nexport function normalizeStartTime(call) {\n  return {\n    ...call,\n    startTime: (new Date(call.startTime)).getTime(),\n  };\n}\n\nexport function normalizeFromTo(call) {\n  return {\n    ...call,\n    from: typeof call.from === 'object' ?\n      call.from :\n      { phoneNumber: call.from },\n    to: typeof call.to === 'object' ?\n      call.to :\n      { phoneNumber: call.to },\n  };\n}\n\n\n\n/* ringout leg helpers */\nexport function areTwoLegs(inbound, outbound) {\n  if (isInbound(inbound) && isOutbound(outbound)) {\n    switch (Math.abs(inbound.sessionId - outbound.sessionId)) {\n      case 1000:\n      case 2000:\n      case 3000:\n      case 4000: {\n        // presence\n        if (\n          inbound.from && inbound.to &&\n          outbound.from && outbound.to &&\n          isSameLocalNumber(inbound.from.phoneNumber, outbound.to.phoneNumber) &&\n          isSameLocalNumber(inbound.to.phoneNumber, outbound.from.phoneNumber)\n        ) {\n          return true;\n        }\n        // call-log\n        if (\n          inbound.from && inbound.to &&\n          outbound.from && outbound.to &&\n          inbound.action === callActions.phoneCall &&\n          (\n            outbound.action === callActions.ringOutWeb ||\n            outbound.action === callActions.ringOutPC ||\n            outbound.action === callActions.ringOutMobile\n          ) &&\n          (\n            inbound.from.phoneNumber === outbound.from.phoneNumber ||\n            inbound.from.extensionNumber === outbound.from.extensionNumber\n          ) &&\n          inbound.to.phoneNumber === outbound.to.phoneNumber\n        ) {\n          return true;\n        }\n        break;\n      }\n      default:\n        return false;\n    }\n  }\n  return false;\n\n  // return isInbound(inbound)\n  //   && isOutbound(outbound)\n  //   && [1000, 2000, 3000, 4000].indexOf(Math.abs(inbound.sessionId - outbound.sessionId)) > -1\n  //   && ((inbound.from === outbound.to && outbound.from === inbound.to) ||\n  //     (inbound.from === outbound.to && isSameLocalNumber(inbound.to, outbound.from)) ||\n  //     (inbound.to === outbound.from && isSameLocalNumber(inbound.from, outbound.to)) ||\n  //     (inbound.to.name && inbound.to.name === outbound.from.name));\n}\n\nexport function removeInboundRingOutLegs(calls) {\n  const output = [];\n  const outbounds = calls.filter(isOutbound);\n  calls.filter(isInbound).forEach((inbound) => {\n    const outboundIndex = outbounds.findIndex(call => areTwoLegs(inbound, call));\n    if (outboundIndex > -1) {\n      const outbound = outbounds.splice(outboundIndex, 1)[0];\n\n      if (inbound.action && outbound.action) {\n        // from call-log\n        const call = {\n          ...outbound,\n          outboundLeg: outbound,\n          inboundLeg: inbound,\n          from: {\n            ...inbound.to,\n          },\n          to: {\n            ...inbound.from,\n          },\n          result: inbound.result,\n        };\n        output.push(call);\n      } else {\n        const call = {\n          ...outbound,\n          outboundLeg: outbound,\n          inboundLeg: inbound,\n        };\n        // Handle inboundLeg.from is '+19072028624', but outboundLeg.to is '9072028624'\n        // https://jira.ringcentral.com/browse/RCINT-3127\n        if (\n          isValidNumber(inbound.from && inbound.from.phoneNumber) &&\n          isSameLocalNumber(inbound.from.phoneNumber, outbound.to && outbound.to.phoneNumber)\n        ) {\n          call.to = {\n            ...outbound.to,\n            phoneNumber: inbound.from.phoneNumber,\n          };\n          outbound.to.phoneNumber = inbound.from.phoneNumber;\n        }\n        if (isOnHold(inbound)) {\n          call.telephonyStatus = telephonyStatuses.onHold;\n        }\n        output.push(call);\n      }\n\n      // output.push(outbound);\n    } else {\n      output.push(inbound);\n    }\n  });\n  return output.concat(outbounds);\n}\n\n\nexport function removeDuplicateIntermediateCalls(calls) {\n  const resultCalls = [];\n  const indexMap = {};\n  calls.forEach((call) => {\n    const isIntermediate = isIntermediateCall(call);\n    if (!indexMap[call.sessionId]) {\n      indexMap[call.sessionid] = {\n        index: resultCalls.length,\n        isIntermediate,\n      };\n      resultCalls.push(call);\n    } else if (!isIntermediate) {\n      indexMap[call.sessionId].isIntermediate = false;\n      resultCalls[indexMap[call.sessionId].index] = call;\n    }\n  });\n  return resultCalls;\n}\n"]}