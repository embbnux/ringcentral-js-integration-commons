{"version":3,"sources":["lib/callLogHelpers.js"],"names":["isInbound","isOutbound","isRinging","hasRingingCalls","isEnded","hasEndedCalls","isOnHold","sortBySessionId","sortByStartTime","normalizeStartTime","normalizeFromTo","areTwoLegs","removeInboundRingOutLegs","call","direction","inbound","outbound","telephonyStatus","ringing","calls","find","noCall","terminationType","final","onHold","a","b","sessionId","startTime","Date","getTime","from","phoneNumber","to","indexOf","Math","abs","name","output","outbounds","filter","forEach","outboundIndex","findIndex","splice","inboundLeg","phonenumber","push","concat"],"mappings":"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","file":"callLogHelpers.js","sourcesContent":["import 'core-js/fn/array/find';\nimport {\n  isValidNumber,\n} from 'phoneformat.js';\nimport callDirections from '../enums/callDirections';\nimport telephonyStatuses from '../enums/telephonyStatuses';\nimport terminationTypes from '../enums/terminationTypes';\nimport isSameLocalNumber from './isSameLocalNumber';\n\n/* call direction helpers */\nexport function isInbound(call = {}) {\n  return call.direction === callDirections.inbound;\n}\n\nexport function isOutbound(call = {}) {\n  return call.direction === callDirections.outbound;\n}\n\n/* status helpers */\nexport function isRinging(call = {}) {\n  return call.telephonyStatus === telephonyStatuses.ringing;\n}\n\nexport function hasRingingCalls(calls = []) {\n  return !!calls.find(isRinging);\n}\n\nexport function isEnded(call = {}) {\n  return call.telephonyStatus === telephonyStatuses.noCall &&\n    call.terminationType === terminationTypes.final;\n}\n\nexport function hasEndedCalls(calls) {\n  return !!calls.find(isEnded);\n}\n\nexport function isOnHold(call = {}) {\n  return call.telephonyStatus === telephonyStatuses.onHold;\n}\n\n/* sort functions */\n\nexport function sortBySessionId(a, b) {\n  if (a.sessionId === b.sessionId) return 0;\n  return a.sessionId > b.sessionId ?\n    1 :\n    -1;\n}\nexport function sortByStartTime(a, b) {\n  if (a.startTime === b.startTime) return 0;\n  return a.startTime > b.startTime ?\n    -1 :\n    1;\n}\n\nexport function normalizeStartTime(call) {\n  return {\n    ...call,\n    startTime: (new Date(call.startTime)).getTime(),\n  };\n}\n\nexport function normalizeFromTo(call) {\n  return {\n    ...call,\n    from: typeof call.from === 'object' ?\n      call.from :\n      { phoneNumber: call.from },\n    to: typeof call.to === 'object' ?\n      call.to :\n      { phoneNumber: call.to },\n  };\n}\n\n/* ringout leg helpers */\nexport function areTwoLegs(inbound, outbound) {\n  return isInbound(inbound)\n    && isOutbound(outbound)\n    && [1000, 2000, 3000, 4000].indexOf(Math.abs(inbound.sessionId - outbound.sessionId)) > -1\n    && ((inbound.from === outbound.to && outbound.from === inbound.to) ||\n      (inbound.from === outbound.to && isSameLocalNumber(inbound.to, outbound.from)) ||\n      (inbound.to === outbound.from && isSameLocalNumber(inbound.from, outbound.to)) ||\n      (inbound.to.name && inbound.to.name === outbound.from.name));\n}\n\nexport function removeInboundRingOutLegs(calls) {\n  const output = [];\n  const outbounds = calls.filter(isOutbound);\n  calls.filter(isInbound).forEach((inbound) => {\n    const outboundIndex = outbounds.findIndex(call => areTwoLegs(inbound, call));\n    if (outboundIndex > -1) {\n      const outbound = {\n        ...outbounds.splice(outboundIndex, 1)[0],\n        inboundLeg: inbound,\n      };\n      // Handle inboundLeg.from is '+19072028624', but outboundLeg.to is '9072028624'\n      // https://jira.ringcentral.com/browse/RCINT-3127\n      if (\n        isValidNumber(inbound.from && inbound.from.phoneNumber) &&\n        isSameLocalNumber(inbound.from.phoneNumber, outbound.to && outbound.to.phonenumber)\n      ) {\n        outbound.to.phoneNumber = inbound.from.phoneNumber;\n      }\n      if (isOnHold(inbound)) {\n        outbound.telephonyStatus = telephonyStatuses.onHold;\n      }\n      output.push(outbound);\n    } else {\n      output.push(inbound);\n    }\n  });\n  return output.concat(outbounds);\n}\n"]}