{"version":3,"sources":["lib/LoggerBase/index.js"],"names":["defaultIdentityFunction","convertListToMap","item","id","loggingList","mapping","forEach","LoggerBase","name","actionTypes","base","prefix","getReducer","identityFunction","logFunction","readyCheckFunction","options","_name","_identityFunction","_logFunction","_readyCheckFunction","_reducer","_logPromises","addSelector","store","subscribe","_onStateChange","pending","ready","_shouldInit","dispatch","type","init","_onInit","initSuccess","_shouldReset","reset","_onReset","resetSuccess","Error","constructor","has","get","log","promise","set","delete","logSuccess","logError","error","_log","state","status","_selectors","loggingMap"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../RcModule';\nimport { prefixEnum } from '../Enum';\nimport ensureExist from '../ensureExist';\n\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport baseActionTypes from './baseActionTypes';\nimport getDefaultReducer from './getDefaultReducer';\nimport proxify from '../proxy/proxify';\n\n/**\n * @function defaultIdentityFunction\n * @description Identity function returns a deterministic id value for each item.\n * @param {Object} item\n * @return {String}\n */\nexport function defaultIdentityFunction(item) {\n  return item.id;\n}\n\n/**\n * @function\n * @description Convert array of { name, id } objects into a map.\n * @param {[{ name: String, id: String }]} loggingList\n * @return {{ [ids]: { [names]: true } }}\n */\nexport function convertListToMap(loggingList) {\n  const mapping = {};\n  loggingList.forEach((id) => {\n    mapping[id] = true;\n  });\n  return mapping;\n}\n\n/**\n * @class\n * @description Base class implementation for loggers.\n */\nexport default class LoggerBase extends RcModule {\n  /**\n   * @constructor\n   * @param {String} params.name - name of the class\n   * @param {Object} params.actionTypes\n   * @param {Function} params.getReducer\n   * @param {Function} params.identityFunction - function that can derive an unique\n   *    id from items.\n   */\n  constructor({\n    name,\n    actionTypes = prefixEnum({ base: baseActionTypes, prefix: name }),\n    getReducer = getDefaultReducer,\n    identityFunction = defaultIdentityFunction,\n    logFunction,\n    readyCheckFunction,\n    ...options,\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._name = this::ensureExist(name, 'name');\n    this._identityFunction = this::ensureExist(identityFunction, 'identityFunction');\n    this._logFunction = this::ensureExist(logFunction, 'logFunction');\n    this._readyCheckFunction = this::ensureExist(readyCheckFunction, 'readyCheckFunction');\n\n    this._reducer = getReducer(this.actionTypes);\n\n    this._logPromises = new Map();\n\n    this.addSelector('loggingMap',\n      () => this.loggingList,\n      convertListToMap,\n    );\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _shouldInit() {\n    return this.pending &&\n      this._readyCheckFunction();\n  }\n  _shouldReset() {\n    return this.ready &&\n      !this._readyCheckFunction();\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      if (typeof this._onInit === 'function') {\n        await this._onInit();\n      }\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this.store.dispatch({\n        type: this.actionTypes.reset,\n      });\n      if (typeof this._onReset === 'function') {\n        await this._onReset();\n      }\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    }\n  }\n\n  @proxify\n  async _log({ item, ...options } = {}) {\n    if (!this.ready) {\n      throw new Error(`${this.constructor.name}._log: module is not ready.`);\n    }\n    if (!item) {\n      throw new Error(`${this.constructor.name}._log: options.item is undefined.`);\n    }\n\n    const id = this._identityFunction(item);\n    // wait for the previous log action to finish\n    if (this._logPromises.has(id)) {\n      await this._logPromises.get(id);\n    }\n    try {\n      this.store.dispatch({\n        type: this.actionTypes.log,\n        id,\n      });\n      const promise = this._logFunction({ item, ...options });\n      this._logPromises.set(id, promise);\n      await promise;\n      this._logPromises.delete(id);\n      this.store.dispatch({\n        type: this.actionTypes.logSuccess,\n        id,\n      });\n    } catch (error) {\n      this._logPromises.delete(id);\n      this.store.dispatch({\n        type: this.actionTypes.logError,\n        error,\n        id,\n      });\n      throw error;\n    }\n  }\n\n  @proxify\n  async log({ item, ...options }) {\n    if (!this.ready) {\n      throw new Error(`${this.constructor.name}.log: module is not ready.`);\n    }\n    if (!item) {\n      throw new Error(`${this.constructor.name}.log: options.item is undefined.`);\n    }\n    await this._log({ item, ...options });\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get loggingList() {\n    return this.state.loggingList;\n  }\n\n  get loggingMap() {\n    return this._selectors.loggingMap();\n  }\n\n}\n"]}