{"version":3,"sources":["lib/Enum/index.js"],"names":["prefixEnum","hasOwnProperty","Object","prototype","Enum","values","prefix","definition","forEach","value","prefixCache","enumMap","base","has","set","cache","get","type"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;QA4BgBA,U,GAAAA,U;;AA5BhB;;;;;;AAEA,IAAMC,iBAAiBC,OAAOC,SAAP,CAAiBF,cAAxC;AACA;;;;;IAIqBG,I;;;AACnB;;;;;AAKA,kBAAsC;AAAA,QAA1BC,MAA0B,uEAAjB,EAAiB;AAAA,QAAbC,MAAa,uEAAJ,EAAI;AAAA;;AACpC,QAAMC,aAAa,EAAnB;AACAF,WAAOG,OAAP,CAAe,UAACC,KAAD,EAAW;AACxBF,iBAAWE,KAAX,IAAoBH,WAAW,EAAX,GAAmBA,MAAnB,SAA6BG,KAA7B,GAAuCA,KAA3D;AACD,KAFD;AAFoC,6HAK9BF,UAL8B;AAMrC;;;;;kBAZkBH,I;;;AAerB,IAAMM,cAAc,mBAApB;;AAEA;;;;AAIO,SAASV,UAAT,OAAyD;AAAA,MAAnCW,OAAmC,QAAnCA,OAAmC;AAAA,MAA1BL,MAA0B,QAA1BA,MAA0B;AAAA,uBAAlBM,IAAkB;AAAA,MAAlBA,IAAkB,6BAAXD,OAAW;;AAC9D,MAAI,CAACL,MAAD,IAAWA,WAAW,EAA1B,EAA8B,OAAOM,IAAP;;AAE9B,MAAI,CAACF,YAAYG,GAAZ,CAAgBP,MAAhB,CAAL,EAA8B;AAC5BI,gBAAYI,GAAZ,CAAgBR,MAAhB,EAAwB,mBAAxB;AACD;;AAED,MAAMS,QAAQL,YAAYM,GAAZ,CAAgBV,MAAhB,CAAd;;AAEA,MAAI,CAACS,MAAMF,GAAN,CAAUD,IAAV,CAAL,EAAsB;AACpB,QAAML,aAAa,EAAnB;AACA,SAAK,IAAMU,IAAX,IAAmBL,IAAnB,EAAyB;AACvB;AACA,UAAUX,cAAN,YAAqBgB,IAArB,CAAJ,EAAgC;AAC9BV,mBAAWU,IAAX,IAAsBX,MAAtB,SAAgCM,KAAKK,IAAL,CAAhC;AACD;AACF;AACDF,UAAMD,GAAN,CAAUF,IAAV,EAAgB,0BAAgBL,UAAhB,CAAhB;AACD;AACD,SAAOQ,MAAMC,GAAN,CAAUJ,IAAV,CAAP;AACD","file":"index.js","sourcesContent":["import KeyValueMap from 'data-types/key-value-map';\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\n * @class\n * @description helper class for creating redux action definition maps\n */\nexport default class Enum extends KeyValueMap {\n  /**\n   * @constructor\n   * @param {String[]} actions - list of action strings\n   * @extends KeyValueMap\n   */\n  constructor(values = [], prefix = '') {\n    const definition = {};\n    values.forEach((value) => {\n      definition[value] = prefix !== '' ? `${prefix}-${value}` : value;\n    });\n    super(definition);\n  }\n}\n\nconst prefixCache = new Map();\n\n/**\n * @function\n * @description helper function to return a prefixed action definition maps\n */\nexport function prefixEnum({ enumMap, prefix, base = enumMap }) {\n  if (!prefix || prefix === '') return base;\n\n  if (!prefixCache.has(prefix)) {\n    prefixCache.set(prefix, new Map());\n  }\n\n  const cache = prefixCache.get(prefix);\n\n  if (!cache.has(base)) {\n    const definition = {};\n    for (const type in base) {\n      /* istanbul ignore else */\n      if (base::hasOwnProperty(type)) {\n        definition[type] = `${prefix}-${base[type]}`;\n      }\n    }\n    cache.set(base, new KeyValueMap(definition));\n  }\n  return cache.get(base);\n}\n"]}