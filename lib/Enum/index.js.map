{"version":3,"sources":["lib/Enum/index.js"],"names":["prefixEnum","hasOwnProperty","Object","prototype","Enum","values","prefix","definition","forEach","value","prefixCache","enumMap","has","set","cache","get","type"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;QA4BgBA,U,GAAAA,U;;AA5BhB;;;;;;AAEA,IAAMC,iBAAiBC,OAAOC,SAAP,CAAiBF,cAAxC;AACA;;;;;IAIqBG,I;;;AACnB;;;;;AAKA,kBAAsC;AAAA,QAA1BC,MAA0B,uEAAjB,EAAiB;AAAA,QAAbC,MAAa,uEAAJ,EAAI;AAAA;;AACpC,QAAMC,aAAa,EAAnB;AACAF,WAAOG,OAAP,CAAe,UAACC,KAAD,EAAW;AACxBF,iBAAWE,KAAX,IAAoBH,WAAW,EAAX,GAAmBA,MAAnB,SAA6BG,KAA7B,GAAuCA,KAA3D;AACD,KAFD;AAFoC,6HAK9BF,UAL8B;AAMrC;;;;;kBAZkBH,I;;;AAerB,IAAMM,cAAc,mBAApB;;AAEA;;;;AAIO,SAASV,UAAT,OAAyC;AAAA,MAAnBW,OAAmB,QAAnBA,OAAmB;AAAA,MAAVL,MAAU,QAAVA,MAAU;;AAC9C,MAAI,CAACA,MAAD,IAAWA,WAAW,EAA1B,EAA8B,OAAOK,OAAP;;AAE9B,MAAI,CAACD,YAAYE,GAAZ,CAAgBN,MAAhB,CAAL,EAA8B;AAC5BI,gBAAYG,GAAZ,CAAgBP,MAAhB,EAAwB,mBAAxB;AACD;;AAED,MAAMQ,QAAQJ,YAAYK,GAAZ,CAAgBT,MAAhB,CAAd;;AAEA,MAAI,CAACQ,MAAMF,GAAN,CAAUD,OAAV,CAAL,EAAyB;AACvB,QAAMJ,aAAa,EAAnB;AACA,SAAK,IAAMS,IAAX,IAAmBL,OAAnB,EAA4B;AAC1B;AACA,UAAaV,cAAT,eAAwBe,IAAxB,CAAJ,EAAmC;AACjCT,mBAAWS,IAAX,IAAsBV,MAAtB,SAAgCK,QAAQK,IAAR,CAAhC;AACD;AACF;AACDF,UAAMD,GAAN,CAAUF,OAAV,EAAmB,0BAAgBJ,UAAhB,CAAnB;AACD;AACD,SAAOO,MAAMC,GAAN,CAAUJ,OAAV,CAAP;AACD","file":"index.js","sourcesContent":["import KeyValueMap from 'data-types/key-value-map';\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\n * @class\n * @description helper class for creating redux action definition maps\n */\nexport default class Enum extends KeyValueMap {\n  /**\n   * @constructor\n   * @param {String[]} actions - list of action strings\n   * @extends KeyValueMap\n   */\n  constructor(values = [], prefix = '') {\n    const definition = {};\n    values.forEach((value) => {\n      definition[value] = prefix !== '' ? `${prefix}-${value}` : value;\n    });\n    super(definition);\n  }\n}\n\nconst prefixCache = new Map();\n\n/**\n * @function\n * @description helper function to return a prefixed action definition maps\n */\nexport function prefixEnum({ enumMap, prefix }) {\n  if (!prefix || prefix === '') return enumMap;\n\n  if (!prefixCache.has(prefix)) {\n    prefixCache.set(prefix, new Map());\n  }\n\n  const cache = prefixCache.get(prefix);\n\n  if (!cache.has(enumMap)) {\n    const definition = {};\n    for (const type in enumMap) {\n      /* istanbul ignore else */\n      if (enumMap::hasOwnProperty(type)) {\n        definition[type] = `${prefix}-${enumMap[type]}`;\n      }\n    }\n    cache.set(enumMap, new KeyValueMap(definition));\n  }\n  return cache.get(enumMap);\n}\n"]}