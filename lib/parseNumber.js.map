{"version":3,"sources":["lib/parseNumber.js"],"names":["parseNumber","phoneNumber","cleaned","hasPlus","withoutPlus","substring","isServiceNumber","split","number","extension"],"mappings":";;;;;;;;;;kBAEwBA,W;;AAFxB;;;;;;AAEe,SAASA,WAAT,CAAqBC,WAArB,EAAkC;AAC/C,MAAMC,UAAU,gCAAeD,WAAf,CAAhB;AACA,MAAME,UAAUD,QAAQ,CAAR,MAAe,GAA/B;AACA,MAAME,cAAcD,UAAUD,QAAQG,SAAR,CAAkB,CAAlB,CAAV,GAAiCH,OAArD;AACA,MAAMI,kBAAkBF,YAAY,CAAZ,MAAmB,GAA3C;;AAJ+C,2BAS3CA,YAAYG,KAAZ,CAAkB,GAAlB,CAT2C;AAAA;AAAA,MAO7CC,MAP6C;AAAA,MAQ7CC,SAR6C;;AAU/C,SAAO;AACLN,aAASA,WAAWK,WAAW,EAD1B;AAELA,YAASF,mBAAmBG,SAApB,IAAkCD,MAAlC,IAA4C,EAF/C;AAGLC,eAAY,CAACH,eAAD,IAAoBG,SAArB,IAAmC,EAHzC;AAILH;AAJK,GAAP;AAMD","file":"parseNumber.js","sourcesContent":["import cleanNumber from './cleanNumber';\n\nexport default function parseNumber(phoneNumber) {\n  const cleaned = cleanNumber(`${phoneNumber}`);\n  const hasPlus = cleaned[0] === '+';\n  const withoutPlus = hasPlus ? cleaned.substring(1) : cleaned;\n  const isServiceNumber = withoutPlus[0] === '*';\n\n  const [\n    number,\n    extension,\n  ] = withoutPlus.split('*');\n  return {\n    hasPlus: hasPlus && number !== '',\n    number: (isServiceNumber && extension) || number || '',\n    extension: (!isServiceNumber && extension) || '',\n    isServiceNumber,\n  };\n}\n"]}