{"version":3,"sources":["lib/DataMatcher/getCacheReducer.js"],"names":["getMatchRecordReducer","getDataMapReducer","getStorageReducer","actionTypes","state","type","data","sourceName","expiredKeys","matchSuccess","now","Date","entries","forEach","query","result","length","found","notFound","timestamp","cleanUp","initSuccess","newState","key","indexOf","filter","item","source","concat","map","deleteMap","newSet","dataMap","matchRecord"],"mappings":"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","file":"getCacheReducer.js","sourcesContent":["import { combineReducers } from 'redux';\nimport { getCacheKey, parseCacheKey, matchResult } from './helpers';\n\nexport function getMatchRecordReducer(actionTypes) {\n  return (state = {}, { type, data, sourceName, expiredKeys }) => {\n    switch (type) {\n      case actionTypes.matchSuccess: {\n        const now = Date.now();\n        const entries = {};\n        Object.keys(data).forEach((query) => {\n          const result = data[query].length ? matchResult.found : matchResult.notFound;\n          entries[getCacheKey(sourceName, query)] = {\n            result,\n            timestamp: now,\n          };\n        });\n        return {\n          ...state,\n          ...entries,\n        };\n      }\n      case actionTypes.cleanUp:\n      case actionTypes.initSuccess:\n        if (expiredKeys.length) {\n          const newState = {};\n          Object.keys(state).forEach((key) => {\n            if (expiredKeys.indexOf(key) === -1) {\n              newState[key] = state[key];\n            }\n          });\n          return newState;\n        }\n        return state;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getDataMapReducer(actionTypes) {\n  return (state = {}, { type, data, sourceName, expiredKeys }) => {\n    switch (type) {\n      case actionTypes.matchSuccess: {\n        const newState = { ...state };\n        Object.keys(data).forEach((query) => {\n          if (newState[query] && newState[query].length > 0) {\n            newState[query] = newState[query].filter(item => (item.source !== sourceName));\n          } else {\n            newState[query] = [];\n          }\n          if (data[query] && data[query].length > 0) {\n            newState[query] = newState[query].concat(data[query].map(item => ({\n              ...item,\n              source: sourceName,\n            })));\n          }\n        });\n        return newState;\n      }\n      case actionTypes.cleanUp:\n      case actionTypes.initSuccess:\n        if (expiredKeys.length) {\n          const deleteMap = {};\n          expiredKeys.forEach((key) => {\n            const [source, query] = parseCacheKey(key);\n            if (!deleteMap[query]) deleteMap[query] = {};\n            deleteMap[query][source] = true;\n          });\n          const newState = {};\n          Object.keys(state).forEach((query) => {\n            const newSet = state[query].filter(item => (\n              !(deleteMap[query] && deleteMap[query][item.source])\n            ));\n            if (newSet.length > 0) {\n              newState[query] = newSet;\n            }\n          });\n          return newState;\n        }\n        return state;\n      default:\n        return state;\n    }\n  };\n}\n\nexport default function getStorageReducer(actionTypes) {\n  return combineReducers({\n    dataMap: getDataMapReducer(actionTypes),\n    matchRecord: getMatchRecordReducer(actionTypes),\n  });\n}\n"]}