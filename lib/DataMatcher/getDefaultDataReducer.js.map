{"version":3,"sources":["lib/DataMatcher/getDefaultDataReducer.js"],"names":["getDefaultDataReducer","actionTypes","state","type","data","name","ttl","timestamp","queries","matchSuccess","newState","forEach","query","length","_t","cleanUp","hasChanges","queriesMap","resetSuccess"],"mappings":";;;;;;;;;;;;;;;;;;kBACwBA,qB;;;;AAAT,SAASA,qBAAT,CAA+BC,WAA/B,EAA4C;AACzD,SAAO,YAOA;AAAA,QAPCC,KAOD,uEAPS,EAOT;AAAA;AAAA,QANLC,IAMK,QANLA,IAMK;AAAA,QALLC,IAKK,QALLA,IAKK;AAAA,QAJLC,IAIK,QAJLA,IAIK;AAAA,QAHLC,GAGK,QAHLA,GAGK;AAAA,QAFLC,SAEK,QAFLA,SAEK;AAAA,QADLC,OACK,QADLA,OACK;;AACL,YAAQL,IAAR;AACE,WAAKF,YAAYQ,YAAjB;AAA+B;AAC7B,cAAMC,sCAAgBR,KAAhB,CAAN;AACAM,kBAAQG,OAAR,CAAgB,UAACC,KAAD,EAAW;AACzB,gBAAIR,KAAKQ,KAAL,KAAeR,KAAKQ,KAAL,EAAYC,MAA/B,EAAuC;AACrCH,uBAASE,KAAT,+BACKF,SAASE,KAAT,CADL,oCAEGP,IAFH,EAEU;AACND,sBAAMA,KAAKQ,KAAL;AADA,eAFV;AAMD,aAPD,MAOO;AACL;AACAF,uBAASE,KAAT,+BACKF,SAASE,KAAT,CADL,oCAEGP,IAFH,EAEU;AACNS,oBAAIP,SADE,EACS;AACfH,sBAAM;AAFA,eAFV;AAOD;AACF,WAlBD;AAmBA,iBAAOM,QAAP;AACD;AACD,WAAKT,YAAYc,OAAjB;AAA0B;AACxB,cAAML,YAAW,EAAjB;AACA,cAAIM,aAAa,KAAjB;;AAEA;AACA,cAAMC,aAAa,EAAnB;AACAT,kBAAQG,OAAR,CAAgB,UAACC,KAAD,EAAW;AACzBK,uBAAWL,KAAX,IAAoB,IAApB;AACD,WAFD;AAGA,8BAAYV,KAAZ,EAAmBS,OAAnB,CAA2B,UAACC,KAAD,EAAW;AACpC,gBAAI,CAACK,WAAWL,KAAX,CAAL,EAAwB;AACtB,kBAAI,CAACV,MAAMU,KAAN,EAAaE,EAAlB,EAAsB;AACpB;AACAJ,0BAASE,KAAT,+BACKV,MAAMU,KAAN,CADL;AAEEE,sBAAIP;AAFN;AAIAS,6BAAa,IAAb;AACD,eAPD,MAOO,IAAIT,YAAYL,MAAMU,KAAN,EAAaE,EAAzB,GAA8BR,GAAlC,EAAuC;AAC5C;AACAI,0BAASE,KAAT,IAAkBV,MAAMU,KAAN,CAAlB;AACD,eAHM,MAGA;AACL;AACAI,6BAAa,IAAb;AACD;AACF,aAfD,MAeO,IAAId,MAAMU,KAAN,EAAaE,EAAjB,EAAqB;AAC1B;AACA;AACAJ,wBAASE,KAAT,+BACKV,MAAMU,KAAN,CADL;AAGA,qBAAOF,UAASE,KAAT,EAAgBE,EAAvB;AACAE,2BAAa,IAAb;AACD,aARM,MAQA;AACLN,wBAASE,KAAT,IAAkBV,MAAMU,KAAN,CAAlB;AACD;AACF,WA3BD;AA4BA,iBAAOI,aACLN,SADK,GAELR,KAFF;AAGD;AACD,WAAKD,YAAYiB,YAAjB;AACE,eAAO,EAAP;AACF;AACE,eAAOhB,KAAP;AApEJ;AAsED,GA9ED;AA+ED","file":"getDefaultDataReducer.js","sourcesContent":["\nexport default function getDefaultDataReducer(actionTypes) {\n  return (state = {}, {\n    type,\n    data,\n    name,\n    ttl,\n    timestamp,\n    queries,\n   }) => {\n    switch (type) {\n      case actionTypes.matchSuccess: {\n        const newState = { ...state };\n        queries.forEach((query) => {\n          if (data[query] && data[query].length) {\n            newState[query] = {\n              ...newState[query],\n              [name]: {\n                data: data[query],\n              },\n            };\n          } else {\n            // assume match not found if not in data\n            newState[query] = {\n              ...newState[query],\n              [name]: {\n                _t: timestamp, // for noMatchTtl check\n                data: [],\n              },\n            };\n          }\n        });\n        return newState;\n      }\n      case actionTypes.cleanUp: {\n        const newState = {};\n        let hasChanges = false;\n\n        // optimize for large queries list\n        const queriesMap = {};\n        queries.forEach((query) => {\n          queriesMap[query] = true;\n        });\n        Object.keys(state).forEach((query) => {\n          if (!queriesMap[query]) {\n            if (!state[query]._t) {\n              // mark for deletion\n              newState[query] = {\n                ...state[query],\n                _t: timestamp,\n              };\n              hasChanges = true;\n            } else if (timestamp - state[query]._t < ttl) {\n              // not expired yet\n              newState[query] = state[query];\n            } else {\n              // entry is removed\n              hasChanges = true;\n            }\n          } else if (state[query]._t) {\n            // if entry shows up in queries again\n            // remove the timestamp\n            newState[query] = {\n              ...state[query],\n            };\n            delete newState[query]._t;\n            hasChanges = true;\n          } else {\n            newState[query] = state[query];\n          }\n        });\n        return hasChanges ?\n          newState :\n          state;\n      }\n      case actionTypes.resetSuccess:\n        return {};\n      default:\n        return state;\n    }\n  };\n}\n"]}