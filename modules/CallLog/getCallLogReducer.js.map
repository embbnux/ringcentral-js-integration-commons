{"version":3,"sources":["modules/CallLog/getCallLogReducer.js"],"names":["getDataReducer","getTokenReducer","getTimestampReducer","getCallLogReducer","processRecords","records","supplementRecords","ids","output","processCall","call","id","action","findMe","push","forEach","types","state","type","daySpan","init","cutOffTime","getTime","filter","startTime","fSyncSuccess","iSyncSuccess","indexMap","newState","length","sort","resetSuccess","syncToken","clearToken","timestamp","status"],"mappings":"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","file":"getCallLogReducer.js","sourcesContent":["import { combineReducers } from 'redux';\nimport getModuleStatusReducer from '../../lib/getModuleStatusReducer';\nimport getDateFrom from '../../lib/getDateFrom';\nimport {\n  normalizeStartTime,\n  removeInboundRingOutLegs,\n  sortByStartTime,\n} from '../../lib/callLogHelpers';\nimport removeUri from '../../lib/removeUri';\nimport callActions from '../../enums/callActions';\n\n\nfunction processRecords(records = [], supplementRecords = []) {\n  const ids = {};\n  const output = [];\n  function processCall(call) {\n    if (\n      !ids[call.id] &&\n      call.action !== callActions.findMe\n    ) {\n      output.push(normalizeStartTime(removeUri(call)));\n      ids[call.id] = true;\n    }\n  }\n  records.forEach(processCall);\n  supplementRecords.forEach(processCall);\n  return output;\n}\n\nexport function getDataReducer(types) {\n  return (state = [], { type, records = [], supplementRecords = [], daySpan }) => {\n    switch (type) {\n      case types.init: {\n        const cutOffTime = getDateFrom(daySpan).getTime();\n        return state.filter(call => call.startTime > cutOffTime);\n      }\n      case types.fSyncSuccess:\n      case types.iSyncSuccess: {\n        const indexMap = {};\n        const newState = [];\n        const cutOffTime = getDateFrom(daySpan).getTime();\n        // filter old calls\n        state.forEach((call) => {\n          if (call.startTime > cutOffTime) {\n            indexMap[call.id] = newState.length;\n            newState.push(call);\n          }\n        });\n        removeInboundRingOutLegs(processRecords(records, supplementRecords)).forEach((call) => {\n          if (call.startTime > cutOffTime) {\n            if (indexMap[call.id] > -1) {\n              // replace the current data with new data\n              newState[indexMap[call.id]] = call;\n            } else {\n              indexMap[call.id] = newState.length;\n              newState.push(call);\n            }\n          }\n        });\n        newState.sort(sortByStartTime);\n        return newState;\n      }\n      case types.resetSuccess:\n        return [];\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getTokenReducer(types) {\n  return (state = null, { type, syncToken }) => {\n    switch (type) {\n      case types.iSyncSuccess:\n      case types.fSyncSuccess:\n        return syncToken;\n      case types.resetSuccess:\n      case types.clearToken:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getTimestampReducer(types) {\n  return (state = null, { type, timestamp }) => {\n    switch (type) {\n      case types.fSyncSuccess:\n      case types.iSyncSuccess:\n        return timestamp;\n      case types.resetSuccess:\n      case types.clearToken:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\n/* istanbul ignore next: unnecessary to test getModuleStatusReducer */\nexport default function getCallLogReducer(types) {\n  return combineReducers({\n    status: getModuleStatusReducer(types),\n  });\n}\n"]}