{"version":3,"sources":["modules/CallLog/getCallLogReducer.js"],"names":["getDataReducer","getTokenReducer","getTimestampReducer","getCallLogReducer","types","state","type","records","supplementRecords","daySpan","init","cutOffTime","getTime","filter","call","startTime","fSyncSuccess","iSyncSuccess","indexMap","newState","forEach","set","id","length","push","has","get","sort","resetSuccess","syncToken","clearToken","timestamp","status"],"mappings":"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","file":"getCallLogReducer.js","sourcesContent":["import { combineReducers } from 'redux';\nimport getModuleStatusReducer from '../../lib/getModuleStatusReducer';\nimport getDateFrom from '../../lib/getDateFrom';\nimport { sortCallsByStartTime } from '../../lib/callLogHelpers';\n\nexport function getDataReducer(types) {\n  return (state = [], { type, records = [], supplementRecords = [], daySpan }) => {\n    switch (type) {\n      case types.init: {\n        const cutOffTime = getDateFrom(daySpan).getTime();\n        return state.filter(call => call.startTime > cutOffTime);\n      }\n      case types.fSyncSuccess:\n      case types.iSyncSuccess: {\n        const indexMap = new Map();\n        const newState = [];\n        const cutOffTime = getDateFrom(daySpan).getTime();\n        // filter old calls\n        state.forEach((call) => {\n          if (call.startTime > cutOffTime) {\n            indexMap.set(call.id, newState.length);\n            newState.push(call);\n          }\n        });\n        // push new records\n        records.forEach((call) => {\n          if (call.startTime > cutOffTime) {\n            if (indexMap.has(call.id)) {\n              // replace the current data with new data\n              newState[indexMap.get(call.id)] = call;\n            } else {\n              indexMap.set(call.id, newState.length);\n              newState.push(call);\n            }\n          }\n        });\n        // push supplement records\n        supplementRecords.forEach((call) => {\n          if (call.startTime > cutOffTime) {\n            if (indexMap.has(call.id)) {\n              // replace the current data with new data\n              newState[indexMap.get(call.id)] = call;\n            } else {\n              indexMap.set(call.id, newState.length);\n              newState.push(call);\n            }\n          }\n        });\n        newState.sort(sortCallsByStartTime);\n        return newState;\n      }\n      case types.resetSuccess:\n        return [];\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getTokenReducer(types) {\n  return (state = null, { type, syncToken }) => {\n    switch (type) {\n      case types.iSyncSuccess:\n      case types.fSyncSuccess:\n        return syncToken;\n      case types.resetSuccess:\n      case types.clearToken:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getTimestampReducer(types) {\n  return (state = null, { type, timestamp }) => {\n    switch (type) {\n      case types.fSyncSuccess:\n      case types.iSyncSuccess:\n        return timestamp;\n      case types.resetSuccess:\n      case types.clearToken:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\n/* istanbul ignore next: unnecessary to test getModuleStatusReducer */\nexport default function getCallLogReducer(types) {\n  return combineReducers({\n    status: getModuleStatusReducer(types),\n  });\n}\n"]}