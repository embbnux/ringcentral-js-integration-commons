{"version":3,"sources":["modules/CallLog/index.js"],"names":["processData","getISODateFrom","getISODateTo","DEFAULT_TTL","DEFAULT_TOKEN_EXPIRES_IN","DEFAULT_DAY_SPAN","RECORD_COUNT","DEFAULT_TIME_TO_RETRY","SYNC_DELAY","data","records","timestamp","Date","syncInfo","syncTime","getTime","syncToken","daySpan","d","toISOString","dateTo","forEach","call","startTime","presenceRegExp","CallLog","auth","client","storage","subscription","rolesAndPermissions","ttl","tokenExpiresIn","timeToRetry","polling","options","actionTypes","_subscriptionHandler","message","test","event","body","activeCalls","ownerId","_auth","sync","_onStateChange","loggedIn","_storage","ready","_subscription","_rolesAndPermissions","status","pending","store","dispatch","type","init","_daySpan","token","now","_tokenExpiresIn","clearToken","subscribe","detailedPresence","initSuccess","reset","_clearTimeout","_promise","resetSuccess","_lastMessage","_client","_dataStorageKey","_tokenStorageKey","_timestampStorageKey","_ttl","_timeToRetry","_polling","registerReducer","key","reducer","_reducer","addSelector","filter","result","stopped","busy","dateFrom","account","extension","callLog","list","params","iSync","callLogSync","syncType","Error","iSyncSuccess","iSyncError","error","fSync","recordCount","supplementRecords","length","_fetch","fSyncSuccess","fSyncError","shouldFSync","_iSync","_fSync","_startPolling","_retry","_sync","_queueSync","state","getItem","_selectors","calls","permissions","ReadCallLog","ReadPresenceStatus"],"mappings":"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","file":"index.js","sourcesContent":["import Pollable from '../../lib/Pollable';\nimport fetchList from '../../lib/fetchList';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport getDateFrom from '../../lib/getDateFrom';\nimport actionTypes from './actionTypes';\nimport getCallLogReducer, {\n  getDataReducer,\n  getTimestampReducer,\n  getTokenReducer,\n} from './getCallLogReducer';\nimport sleep from '../../lib/sleep';\nimport subscriptionFilters from '../../enums/subscriptionFilters';\nimport syncTypes from '../../enums/syncTypes';\nimport {\n  hasEndedCalls,\n  removeDuplicateIntermediateCalls,\n  removeInboundRingOutLegs,\n} from '../../lib/callLogHelpers';\nimport callResults from '../../enums/callResults';\nimport proxify from '../../lib/proxy/proxify';\n\nconst DEFAULT_TTL = 5 * 60 * 1000;\nconst DEFAULT_TOKEN_EXPIRES_IN = 60 * 60 * 1000;\nconst DEFAULT_DAY_SPAN = 7;\nconst RECORD_COUNT = 250;\nconst DEFAULT_TIME_TO_RETRY = 62 * 1000;\nconst SYNC_DELAY = 30 * 1000;\n\nexport function processData(data) {\n  return {\n    records: data.records,\n    timestamp: (new Date(data.syncInfo.syncTime)).getTime(),\n    syncToken: data.syncInfo.syncToken,\n  };\n}\n\nexport function getISODateFrom(daySpan) {\n  const d = getDateFrom(daySpan);\n  return d.toISOString();\n}\n\nexport function getISODateTo(records) {\n  let dateTo;\n  records.forEach((call) => {\n    if (!dateTo || call.startTime < dateTo) dateTo = call.startTime;\n  });\n  return dateTo && (new Date(dateTo)).toISOString();\n}\n// to not use $ at the end, presence with sipData has extra query parameters\nconst presenceRegExp = /\\/presence\\?detailedTelephonyState=true/;\n\n/**\n * @class\n * @description Call log managing module\n */\nexport default class CallLog extends Pollable {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Auth} params.auth - auth module instance\n   * @param {Client} params.client - client module instance\n   * @param {Storage} params.storage - storage module instance\n   * @param {Subscription} params.subscription - subscription module instance\n   * @param {RolesAndPermissions} params.rolesAndPermissions - rolesAndPermissions module instance\n   * @param {Number} params.ttl - local cache timestamp\n   * @param {Number} params.tokenExpiresIn - time for token expire\n   * @param {Number} params.timeToRetry - waiting time to retry\n   * @param {Number} params.daySpan - day span of call log\n   * @param {Bool} params.polling - polling flag\n   */\n  constructor({\n    auth,\n    client,\n    storage,\n    subscription,\n    rolesAndPermissions,\n    ttl = DEFAULT_TTL,\n    tokenExpiresIn = DEFAULT_TOKEN_EXPIRES_IN,\n    timeToRetry = DEFAULT_TIME_TO_RETRY,\n    daySpan = DEFAULT_DAY_SPAN,\n    polling = true,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = auth;\n    this._client = client;\n    this._storage = storage;\n    this._subscription = subscription;\n    this._rolesAndPermissions = rolesAndPermissions;\n    this._dataStorageKey = 'callLogData';\n    this._tokenStorageKey = 'callLogToken';\n    this._timestampStorageKey = 'callLogTimestamp';\n    this._ttl = ttl;\n    this._tokenExpiresIn = tokenExpiresIn;\n    this._timeToRetry = timeToRetry;\n    this._daySpan = daySpan;\n    this._polling = polling;\n\n    this._storage.registerReducer({\n      key: this._dataStorageKey,\n      reducer: getDataReducer(this.actionTypes),\n    });\n    this._storage.registerReducer({\n      key: this._tokenStorageKey,\n      reducer: getTokenReducer(this.actionTypes),\n    });\n    this._storage.registerReducer({\n      key: this._timestampStorageKey,\n      reducer: getTimestampReducer(this.actionTypes),\n    });\n\n    this._reducer = getCallLogReducer(this.actionTypes);\n\n    this.addSelector('calls',\n      () => this.data,\n      data => (\n        // TODO make sure removeDuplicateIntermediateCalls is necessary here\n        removeInboundRingOutLegs(removeDuplicateIntermediateCalls(data.filter(call => (\n          // [RCINT-3472] calls with result === 'stopped' seems to be useless\n          call.result !== callResults.stopped &&\n          // [RCINT-51111] calls with result === 'busy'\n          call.result !== callResults.busy\n        ))))\n      ),\n    );\n\n    this._promise = null;\n    this._lastMessage = null;\n  }\n  _subscriptionHandler = async (message) => {\n    if (\n      presenceRegExp.test(message.event) &&\n      message.body &&\n      message.body.activeCalls &&\n      hasEndedCalls(message.body.activeCalls)\n    ) {\n      const ownerId = this._auth.ownerId;\n      await sleep(SYNC_DELAY);\n      if (ownerId === this._auth.ownerId) {\n        this.sync();\n      }\n    }\n  }\n  _onStateChange = async () => {\n    if (\n      this._auth.loggedIn &&\n      this._storage.ready &&\n      (!this._subscription || this._subscription.ready) &&\n      this._rolesAndPermissions.ready &&\n      this.status === moduleStatuses.pending\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n        daySpan: this._daySpan,\n      });\n      if (\n        this.token &&\n        (\n          !this.timestamp ||\n          Date.now() - this.timestamp > this._tokenExpiresIn\n        )\n      ) {\n        this.store.dispatch({\n          type: this.actionTypes.clearToken,\n        });\n      }\n      await this.sync();\n      if (this._subscription) {\n        this._subscription.subscribe(subscriptionFilters.detailedPresence);\n      }\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (\n      (\n        !this._auth.loggedIn ||\n        !this._storage.ready ||\n        (this._subscription && !this._subscription.ready) ||\n        !this._rolesAndPermissions.ready\n      ) &&\n      this.ready\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.reset,\n      });\n      this._clearTimeout();\n      this._promise = null;\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    } else if (\n      this.ready &&\n      this._subscription &&\n      this._subscription.ready &&\n      this._subscription.message &&\n      this._subscription.message !== this._lastMessage\n    ) {\n      this._lastMessage = this._subscription.message;\n      this._subscriptionHandler(this._lastMessage);\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(this._onStateChange);\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get data() {\n    return this._storage.getItem(this._dataStorageKey);\n  }\n\n  get calls() {\n    return this._selectors.calls();\n  }\n\n  get token() {\n    return this._storage.getItem(this._tokenStorageKey);\n  }\n\n  get timestamp() {\n    return this._storage.getItem(this._timestampStorageKey);\n  }\n\n  get ttl() {\n    return this._ttl;\n  }\n\n  get timeToRetry() {\n    return this._timeToRetry;\n  }\n\n  get canReadCallLog() {\n    return !!this._rolesAndPermissions.permissions.ReadCallLog;\n  }\n\n  get canReadPresence() {\n    return !!this._rolesAndPermissions.permissions.ReadPresenceStatus;\n  }\n  @proxify\n  async _fetch({ dateFrom, dateTo }) {\n    return fetchList(params => (\n      this._client.account().extension().callLog().list({\n        ...params,\n        dateFrom,\n        dateTo,\n      })\n    ));\n  }\n  @proxify\n  async _iSync() {\n    const ownerId = this._auth.ownerId;\n    try {\n      this.store.dispatch({\n        type: this.actionTypes.iSync,\n      });\n      const data = await this._client.account().extension().callLogSync().list({\n        syncType: syncTypes.iSync,\n        syncToken: this.token,\n      });\n      if (ownerId !== this._auth.ownerId) throw Error('request aborted');\n      this.store.dispatch({\n        type: this.actionTypes.iSyncSuccess,\n        ...processData(data),\n        daySpan: this._daySpan,\n      });\n    } catch (error) {\n      if (ownerId === this._auth.ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.iSyncError,\n          error,\n        });\n        throw error;\n      }\n    }\n  }\n  @proxify\n  async _fSync() {\n    const ownerId = this._auth.ownerId;\n    try {\n      this.store.dispatch({\n        type: this.actionTypes.fSync,\n      });\n\n      const dateFrom = getISODateFrom(this._daySpan);\n      const data = await this._client.account().extension().callLogSync().list({\n        recordCount: RECORD_COUNT,\n        syncType: syncTypes.fSync,\n        dateFrom,\n      });\n      if (ownerId !== this._auth.ownerId) throw Error('request aborted');\n      let supplementRecords;\n      const {\n        records,\n        timestamp,\n        syncToken,\n      } = processData(data);\n      if (records.length >= RECORD_COUNT) {\n        // reach the max record count\n        supplementRecords = (await this._fetch({\n          dateFrom,\n          dateTo: getISODateTo(records),\n        }));\n      }\n      if (ownerId !== this._auth.ownerId) throw Error('request aborted');\n      this.store.dispatch({\n        type: this.actionTypes.fSyncSuccess,\n        records,\n        supplementRecords,\n        timestamp,\n        syncToken,\n        daySpan: this._daySpan,\n      });\n    } catch (error) {\n      if (ownerId === this._auth.ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.fSyncError,\n          error,\n        });\n        throw error;\n      }\n    }\n  }\n  @proxify\n  async _sync(syncType) {\n    const ownerId = this._auth.ownerId;\n    try {\n      let shouldFSync = syncType === syncTypes.fSync;\n      if (!shouldFSync) {\n        try {\n          await this._iSync();\n        } catch (error) {\n          shouldFSync = true;\n        }\n      }\n      if (shouldFSync && ownerId === this._auth.ownerId) {\n        await this._fSync();\n      }\n      if (this._polling) {\n        this._startPolling();\n      }\n    } catch (error) {\n      if (ownerId === this._auth.ownerId) {\n        if (this._polling) {\n          this._startPolling(this.timeToRetry);\n        } else {\n          this._retry();\n        }\n      }\n    }\n    this._promise = null;\n  }\n  @proxify\n  async sync(syncType = this.token ? syncTypes.iSync : syncTypes.fSync) {\n    if (!this._promise) {\n      this._promise = this._sync(syncType);\n      return this._promise;\n    } else if (!this._queueSync) {\n      this._queueSync = (async () => {\n        await this._promise;\n        this._promise = (async () => {\n          await sleep(300);\n          return this._sync(syncType);\n        })();\n        this._queueSync = null;\n        return this._promise;\n      })();\n      return this._queueSync;\n    }\n    return this._queueSync;\n  }\n  @proxify\n  fetchData() {\n    return this.sync();\n  }\n}\n"]}