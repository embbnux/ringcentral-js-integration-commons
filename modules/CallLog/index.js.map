{"version":3,"sources":["modules/CallLog/index.js"],"names":["processData","getISODateFrom","getISODateTo","DEFAULT_TTL","DEFAULT_TOKEN_EXPIRES_IN","DEFAULT_DAY_SPAN","RECORD_COUNT","DEFAULT_TIME_TO_RETRY","SYNC_DELAY","data","records","map","timestamp","Date","syncInfo","syncTime","getTime","syncToken","daySpan","d","toISOString","dateTo","forEach","call","startTime","presenceRegExp","CallLog","auth","client","storage","subscription","ttl","tokenExpiresIn","timeToRetry","polling","options","actionTypes","_subscriptionHandler","message","test","event","body","activeCalls","ownerId","_auth","sync","_onStateChange","loggedIn","_storage","ready","_subscription","status","pending","store","dispatch","type","init","_daySpan","token","now","_tokenExpiresIn","clearToken","subscribe","detailedPresence","initSuccess","reset","_clearTimeout","_promise","resetSuccess","_lastMessage","_client","_dataStorageKey","_tokenStorageKey","_timestampStorageKey","_ttl","_timeToRetry","_polling","registerReducer","key","reducer","_reducer","dateFrom","account","extension","callLog","list","params","iSync","callLogSync","syncType","Error","iSyncSuccess","iSyncError","error","fSync","recordCount","supplementRecords","length","_fetch","fSyncSuccess","fSyncError","shouldFSync","_iSync","_fSync","_startPolling","_retry","_sync","state","getItem"],"mappings":"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","file":"index.js","sourcesContent":["import Pollable from '../../lib/Pollable';\nimport fetchList from '../../lib/fetchList';\nimport moduleStatus from '../../enums/moduleStatus';\nimport getDateFrom from '../../lib/getDateFrom';\nimport actionTypes from './actionTypes';\nimport getCallLogReducer, {\n  getDataReducer,\n  getTimestampReducer,\n  getTokenReducer,\n} from './getCallLogReducer';\n\nimport sleep from '../../lib/sleep';\nimport subscriptionFilters from '../Subscription/filters';\nimport syncTypes from '../../enums/syncTypes';\nimport processCall from '../../lib/processCall';\nimport {\n  hasEndedCalls,\n} from '../../lib/callLogHelpers';\n\nconst DEFAULT_TTL = 5 * 60 * 1000;\nconst DEFAULT_TOKEN_EXPIRES_IN = 60 * 60 * 1000;\nconst DEFAULT_DAY_SPAN = 7;\nconst RECORD_COUNT = 250;\nconst DEFAULT_TIME_TO_RETRY = 62 * 1000;\nconst SYNC_DELAY = 20 * 1000;\n\n\nexport function processData(data) {\n  return {\n    records: data.records.map(processCall),\n    timestamp: (new Date(data.syncInfo.syncTime)).getTime(),\n    syncToken: data.syncInfo.syncToken,\n  };\n}\n\nexport function getISODateFrom(daySpan) {\n  const d = getDateFrom(daySpan);\n  return d.toISOString();\n}\n\nexport function getISODateTo(records) {\n  let dateTo;\n  records.forEach((call) => {\n    if (!dateTo || call.startTime < dateTo) dateTo = call.startTime;\n  });\n  return dateTo && (new Date(dateTo)).toISOString();\n}\n\nconst presenceRegExp = /\\/presence\\?detailedTelephonyState=true$/;\n\nexport default class CallLog extends Pollable {\n  constructor({\n    auth,\n    client,\n    storage,\n    subscription,\n    ttl = DEFAULT_TTL,\n    tokenExpiresIn = DEFAULT_TOKEN_EXPIRES_IN,\n    timeToRetry = DEFAULT_TIME_TO_RETRY,\n    daySpan = DEFAULT_DAY_SPAN,\n    polling = true,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = auth;\n    this._client = client;\n    this._storage = storage;\n    this._subscription = subscription;\n    this._dataStorageKey = 'callLogData';\n    this._tokenStorageKey = 'callLogToken';\n    this._timestampStorageKey = 'callLogTimestamp';\n    this._ttl = ttl;\n    this._tokenExpiresIn = tokenExpiresIn;\n    this._timeToRetry = timeToRetry;\n    this._daySpan = daySpan;\n    this._polling = polling;\n\n    this._storage.registerReducer({\n      key: this._dataStorageKey,\n      reducer: getDataReducer(this.actionTypes),\n    });\n    this._storage.registerReducer({\n      key: this._tokenStorageKey,\n      reducer: getTokenReducer(this.actionTypes),\n    });\n    this._storage.registerReducer({\n      key: this._timestampStorageKey,\n      reducer: getTimestampReducer(this.actionTypes),\n    });\n\n    this._reducer = getCallLogReducer(this.actionTypes);\n    this._promise = null;\n    this._lastMessage = null;\n  }\n  _subscriptionHandler = async (message) => {\n    if (\n      presenceRegExp.test(message.event) &&\n      message.body &&\n      message.body.activeCalls &&\n      hasEndedCalls(message.body.activeCalls)\n    ) {\n      const ownerId = this._auth.ownerId;\n      await sleep(SYNC_DELAY);\n      if (ownerId === this._auth.ownerId) {\n        this.sync();\n      }\n    }\n  }\n  _onStateChange = async () => {\n    if (\n      this._auth.loggedIn &&\n      this._storage.ready &&\n      (!this._subscription || this._subscription.ready) &&\n      this.status === moduleStatus.pending\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n        daySpan: this._daySpan,\n      });\n      if (\n        this.token &&\n        (\n          !this.timestamp ||\n          Date.now() - this.timestamp > this._tokenExpiresIn\n        )\n      ) {\n        this.store.dispatch({\n          type: this.actionTypes.clearToken,\n        });\n      }\n      await this.sync();\n      if (this._subscription) {\n        this._subscription.subscribe(subscriptionFilters.detailedPresence);\n      }\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (\n      (\n        !this._auth.loggedIn ||\n        !this._storage.ready ||\n        (this._subscription && !this._subscription.ready)\n      ) &&\n      this.ready\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.reset,\n      });\n      this._clearTimeout();\n      this._promise = null;\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    } else if (\n      this.ready &&\n      this._subscription &&\n      this._subscription.ready &&\n      this._subscription.message &&\n      this._subscription.message !== this._lastMessage\n    ) {\n      this._lastMessage = this._subscription.message;\n      this._subscriptionHandler(this._lastMessage);\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(this._onStateChange);\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatus.ready;\n  }\n\n  get calls() {\n    return this._storage.getItem(this._dataStorageKey);\n  }\n\n  get token() {\n    return this._storage.getItem(this._tokenStorageKey);\n  }\n\n  get timestamp() {\n    return this._storage.getItem(this._timestampStorageKey);\n  }\n\n  get ttl() {\n    return this._ttl;\n  }\n\n  get timeToRetry() {\n    return this._timeToRetry;\n  }\n\n  async _fetch({ dateFrom, dateTo }) {\n    return fetchList(params => (\n      this._client.account().extension().callLog().list({\n        ...params,\n        dateFrom,\n        dateTo,\n      })\n    ));\n  }\n\n  async _iSync() {\n    const ownerId = this._auth.ownerId;\n    try {\n      this.store.dispatch({\n        type: this.actionTypes.iSync,\n      });\n      const data = await this._client.account().extension().callLogSync().list({\n        syncType: syncTypes.iSync,\n        syncToken: this.token,\n      });\n      if (ownerId !== this._auth.ownerId) throw Error('request aborted');\n      this.store.dispatch({\n        type: this.actionTypes.iSyncSuccess,\n        ...processData(data),\n        daySpan: this._daySpan,\n      });\n    } catch (error) {\n      if (ownerId === this._auth.ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.iSyncError,\n          error,\n        });\n        throw error;\n      }\n    }\n  }\n  async _fSync() {\n    const ownerId = this._auth.ownerId;\n    try {\n      this.store.dispatch({\n        type: this.actionTypes.fSync,\n      });\n\n      const dateFrom = getISODateFrom(this._daySpan);\n      const data = await this._client.account().extension().callLogSync().list({\n        recordCount: RECORD_COUNT,\n        syncType: syncTypes.fSync,\n        dateFrom,\n      });\n      if (ownerId !== this._auth.ownerId) throw Error('request aborted');\n      let supplementRecords;\n      const {\n        records,\n        timestamp,\n        syncToken,\n      } = processData(data);\n      if (records.length === RECORD_COUNT || records.length > 0) {\n        // reach the max record count\n        supplementRecords = (await this._fetch({\n          dateFrom,\n          dateTo: getISODateTo(records),\n        })).map(processCall);\n      }\n      if (ownerId !== this._auth.ownerId) throw Error('request aborted');\n      this.store.dispatch({\n        type: this.actionTypes.fSyncSuccess,\n        records,\n        supplementRecords,\n        timestamp,\n        syncToken,\n        daySpan: this._daySpan,\n      });\n    } catch (error) {\n      if (ownerId === this._auth.ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.fSyncError,\n          error,\n        });\n        throw error;\n      }\n    }\n  }\n  async _sync(syncType) {\n    const ownerId = this._auth.ownerId;\n    try {\n      let shouldFSync = syncType === syncTypes.fSync;\n      if (!shouldFSync) {\n        try {\n          await this._iSync();\n        } catch (error) {\n          shouldFSync = true;\n        }\n      }\n      if (shouldFSync && ownerId === this._auth.ownerId) {\n        await this._fSync();\n      }\n      if (this._polling) {\n        this._startPolling();\n      }\n    } catch (error) {\n      if (ownerId === this._auth.ownerId) {\n        if (this._polling) {\n          this._startPolling(this.timeToRetry);\n        } else {\n          this._retry();\n        }\n      }\n    }\n    this._promise = null;\n  }\n  sync(syncType = this.token ? syncTypes.iSync : syncTypes.fSync) {\n    if (!this._promise) {\n      this._promise = this._sync(syncType);\n    }\n    return this._promise;\n  }\n  fetchData() {\n    this.sync();\n  }\n}\n"]}