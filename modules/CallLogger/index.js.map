{"version":3,"sources":["modules/CallLogger/index.js"],"names":["callIdentityFunction","call","sessionId","CallLogger","storage","callMonitor","callHistory","contactMatcher","activityMatcher","options","name","actionTypes","getDataReducer","identityFunction","_storage","_callMonitor","_contactMatcher","_activityMatcher","_callHistory","_storageKey","_name","registerReducer","key","reducer","_lastProcessedCalls","_lastProcessedEndedCalls","pending","ready","_readyCheckFunction","item","autoLog","logOnRinging","contact","inbound","fromEntity","toEntity","log","duration","Object","prototype","hasOwnProperty","Math","round","Date","now","startTime","result","telephonyStatus","_shouldLogNewCall","triggerMatch","dataMapping","length","fromMatches","from","phoneNumber","toMatches","to","_autoLogCall","activityMatches","_shouldLogUpdatedCall","calls","oldCalls","slice","forEach","oldCallIndex","findIndex","_onNewCall","oldCall","splice","_onCallUpdated","recentlyEndedCalls","currentSessions","callInfo","find","_processCalls","store","dispatch","type","setAutoLog","setLogOnRinging","getItem"],"mappings":"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","file":"index.js","sourcesContent":["import LoggerBase from '../../lib/LoggerBase';\nimport ensureExist from '../../lib/ensureExist';\nimport { isRinging, isInbound } from '../../lib/callLogHelpers';\nimport actionTypes from './actionTypes';\nimport getDataReducer from './getDataReducer';\nimport proxify from '../../lib/proxy/proxify';\n\n/**\n * @function\n * @description Identity function for calls.\n * @param {Object} call - call object\n * @return {String} sessionId\n */\nexport function callIdentityFunction(call) {\n  return call.sessionId;\n}\n\nexport default class CallLogger extends LoggerBase {\n  constructor({\n    storage,\n    callMonitor,\n    callHistory,\n    contactMatcher,\n    activityMatcher,\n    ...options,\n  }) {\n    super({\n      ...options,\n      name: 'callLogger',\n      actionTypes,\n      getDataReducer,\n      identityFunction: callIdentityFunction,\n    });\n    this._storage = this::ensureExist(storage, 'storage');\n    this._callMonitor = this::ensureExist(callMonitor, 'callMonitor');\n    this._contactMatcher = this::ensureExist(contactMatcher, 'contactMatcher');\n    this._activityMatcher = this::ensureExist(activityMatcher, 'activityMatcher');\n    this._callHistory = callHistory;\n    this._storageKey = `${this._name}Data`;\n    this._storage.registerReducer({\n      key: this._storageKey,\n      reducer: getDataReducer(this.actionTypes),\n    });\n\n    this._lastProcessedCalls = null;\n    this._lastProcessedEndedCalls = null;\n  }\n\n  _onReset() {\n    this._lastProcessedCalls = null;\n    this._lastProcessedEndedCalls = null;\n  }\n\n  _shouldInit() {\n    return this.pending &&\n      this._callMonitor.ready &&\n      (!this._callHistory || this._callHistory.ready) &&\n      this._contactMatcher.ready &&\n      this._activityMatcher.ready &&\n      this._readyCheckFunction() &&\n      this._storage.ready;\n  }\n\n  _shouldReset() {\n    return this.ready &&\n      (\n        !this._callMonitor.ready ||\n        (this._callMonitor && !this._callMonitor.ready) ||\n        (this._callHistory && !this._callHistory.ready) ||\n        !this._contactMatcher.ready ||\n        !this._activityMatcher.ready ||\n        !this._readyCheckFunction() ||\n        !this._storage.ready\n      );\n  }\n\n  @proxify\n  async log({ call, ...options }) {\n    return super.log({ item: call, ...options });\n  }\n\n  _shouldLogNewCall(call) {\n    return this.autoLog &&\n      (this.logOnRinging || !isRinging(call));\n  }\n\n  @proxify\n  async logCall({\n    call,\n    contact,\n    ...options,\n  }) {\n    const inbound = isInbound(call);\n    const fromEntity = (inbound && contact) ||\n      null;\n    const toEntity = (!inbound && contact) ||\n      null;\n    await this.log({\n      ...options,\n      call: {\n        ...call,\n        duration: call::Object.prototype.hasOwnProperty('duration') ?\n          call.duration :\n          Math.round((Date.now() - call.startTime) / 1000),\n        result: call.result || call.telephonyStatus,\n      },\n      fromEntity,\n      toEntity,\n    });\n  }\n  async _autoLogCall({ call, fromEntity, toEntity }) {\n    await this.log({\n      call: {\n        ...call,\n        duration: call::Object.prototype.hasOwnProperty('duration') ?\n          call.duration :\n          Math.round((Date.now() - call.startTime) / 1000),\n        result: call.result || call.telephonyStatus,\n      },\n      fromEntity,\n      toEntity,\n    });\n  }\n  async _onNewCall(call) {\n    if (this._shouldLogNewCall(call)) {\n      // RCINT-3857 check activity in case instance was reloaded when call is still active\n      await this._activityMatcher.triggerMatch();\n      if (\n        !this._activityMatcher.dataMapping[call.sessionId] ||\n        !this._activityMatcher.dataMapping[call.sessionId].length\n      ) {\n        // is completely new, need entity information\n        await this._contactMatcher.triggerMatch();\n        const fromMatches = (call.from && call.from.phoneNumber &&\n          this._contactMatcher.dataMapping[call.from.phoneNumber]) || [];\n\n        const toMatches = (call.to && call.to.phoneNumber &&\n          this._contactMatcher.dataMapping[call.to.phoneNumber]) || [];\n\n        const fromEntity = (fromMatches &&\n          fromMatches.length === 1 &&\n          fromMatches[0]) ||\n          null;\n        const toEntity = (toMatches &&\n          toMatches.length === 1 &&\n          toMatches[0]) ||\n          null;\n        await this._autoLogCall({\n          call,\n          fromEntity,\n          toEntity,\n        });\n      } else {\n        // only update call information if call has been logged\n        await this._autoLogCall({ call });\n      }\n    }\n  }\n  async _shouldLogUpdatedCall(call) {\n    if (this.logOnRinging || !isRinging(call)) {\n      if (this.autoLog) return true;\n      await this._activityMatcher.triggerMatch();\n      const activityMatches = this._activityMatcher.dataMapping[call.sessionId] || [];\n      return activityMatches.length > 0;\n    }\n    return false;\n  }\n  async _onCallUpdated(call) {\n    if (await this._shouldLogUpdatedCall(call)) {\n      await this._autoLogCall({ call });\n    }\n  }\n  _processCalls() {\n    if (this.ready) {\n      if (this._lastProcessedCalls !== this._callMonitor.calls) {\n        const oldCalls = (\n          this._lastProcessedCalls &&\n          this._lastProcessedCalls.slice()\n        ) || [];\n        this._lastProcessedCalls = this._callMonitor.calls;\n\n        this._lastProcessedCalls.forEach((call) => {\n          const oldCallIndex = oldCalls.findIndex(item => item.sessionId === call.sessionId);\n\n          if (oldCallIndex === -1) {\n            this._onNewCall(call);\n          } else {\n            const oldCall = oldCalls[oldCallIndex];\n            oldCalls.splice(oldCallIndex, 1);\n            if (call.telephonyStatus !== oldCall.telephonyStatus) {\n              this._onCallUpdated(call);\n            }\n          }\n        });\n        oldCalls.forEach((call) => {\n          this._onCallUpdated(call);\n        });\n      }\n      if (\n        this._callHistory &&\n        this._lastProcessedEndedCalls !== this._callHistory.recentlyEndedCalls\n      ) {\n        const oldCalls = (\n          this._lastProcessedEndedCalls &&\n          this._lastProcessedEndedCalls.slice()\n        ) || [];\n        this._lastProcessedEndedCalls = this._callHistory.recentlyEndedCalls;\n        const currentSessions = {};\n        this._lastProcessedEndedCalls.forEach((call) => {\n          currentSessions[call.sessionId] = true;\n        });\n        oldCalls.forEach((call) => {\n          if (!currentSessions[call.sessionId]) {\n            // call log updated\n            const callInfo = this._callHistory.calls\n              .find(item => item.sessionId === call.sessionId);\n            if (callInfo) {\n              this._onCallUpdated(callInfo);\n            }\n          }\n        });\n      }\n    }\n  }\n  async _onStateChange() {\n    await super._onStateChange();\n    this._processCalls();\n  }\n\n  @proxify\n  async setAutoLog(autoLog) {\n    if (this.ready && autoLog !== this.autoLog) {\n      this.store.dispatch({\n        type: this.actionTypes.setAutoLog,\n        autoLog,\n      });\n    }\n  }\n\n  get autoLog() {\n    return this._storage.getItem(this._storageKey).autoLog;\n  }\n\n  @proxify\n  async setLogOnRinging(logOnRinging) {\n    if (this.ready && logOnRinging !== this.logOnRinging) {\n      this.store.dispatch({\n        type: this.actionTypes.setLogOnRinging,\n        logOnRinging,\n      });\n    }\n  }\n\n  get logOnRinging() {\n    return this._storage.getItem(this._storageKey).logOnRinging;\n  }\n}\n"]}