{"version":3,"sources":["modules/CallLogger/index.js"],"names":["callIdentityFunction","call","sessionId","CallLogger","storage","callMonitor","contactMatcher","activityMatcher","options","name","actionTypes","getDataReducer","identityFunction","_storage","_callMonitor","_contactMatcher","_activityMatcher","_storageKey","_name","registerReducer","key","reducer","_lastProcessedCalls","logFn","readyCheckFn","allowAutoLog","pending","ready","logProvidersReady","item","autoLog","logOnRinging","contact","triggerMatch","fromMatches","from","phoneNumber","dataMapping","toMatches","to","inbound","fromEntity","length","toEntity","log","duration","Object","prototype","hasOwnProperty","Math","round","Date","now","startTime","result","telephonyStatus","all","_logProviders","keys","filter","provider","get","map","_shouldLogNewCall","_autoLogCall","activityMatches","_shouldLogUpdatedCall","calls","oldCalls","slice","forEach","oldCallIndex","findIndex","_onNewCall","oldCall","splice","_onCallUpdated","_processCalls","store","dispatch","type","setAutoLog","setLogOnRinging","getItem"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAYgBA,oB,GAAAA,oB;;AAZhB;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;AAEA;;;;;;AAMO,SAASA,oBAAT,CAA8BC,IAA9B,EAAoC;AACzC,SAAOA,KAAKC,SAAZ;AACD;;IAEoBC,U;;;AACnB,4BAMG;AAAA,QALDC,OAKC,QALDA,OAKC;AAAA,QAJDC,WAIC,QAJDA,WAIC;AAAA,QAHDC,cAGC,QAHDA,cAGC;AAAA,QAFDC,eAEC,QAFDA,eAEC;AAAA,QADEC,OACF;AAAA;;AAAA,yKAEIA,OAFJ;AAGCC,YAAM,YAHP;AAICC,wCAJD;AAKCC,8CALD;AAMCC,wBAAkBZ;AANnB;;AAQD,UAAKa,QAAL,GAAgB,kCAAkBT,OAAlB,EAA2B,SAA3B,CAAhB;AACA,UAAKU,YAAL,GAAoB,kCAAkBT,WAAlB,EAA+B,aAA/B,CAApB;AACA,UAAKU,eAAL,GAAuB,kCAAkBT,cAAlB,EAAkC,gBAAlC,CAAvB;AACA,UAAKU,gBAAL,GAAwB,kCAAkBT,eAAlB,EAAmC,iBAAnC,CAAxB;AACA,UAAKU,WAAL,GAAsB,MAAKC,KAA3B;AACA,UAAKL,QAAL,CAAcM,eAAd,CAA8B;AAC5BC,WAAK,MAAKH,WADkB;AAE5BI,eAAS,8BAAe,MAAKX,WAApB;AAFmB,KAA9B;;AAKA,UAAKY,mBAAL,GAA2B,IAA3B;AAlBC;AAmBF;;;;0CAQE;AAAA,UALDb,IAKC,SALDA,IAKC;AAAA,UAJDc,KAIC,SAJDA,KAIC;AAAA,UAHDC,YAGC,SAHDA,YAGC;AAAA,qCAFDC,YAEC;AAAA,UAFDA,YAEC,sCAFc,IAEd;AAAA,UADEjB,OACF;;AACD;AACEC,kBADF;AAEEc,oBAFF;AAGEC,kCAHF;AAIEC,sBAAc,CAAC,CAACA;AAJlB,SAKKjB,OALL;AAOD;;;+BAEU;AACT,WAAKc,mBAAL,GAA2B,IAA3B;AACD;;;kCAEa;AACZ,aAAO,KAAKI,OAAL,IACL,KAAKZ,YAAL,CAAkBa,KADb,IAEL,KAAKZ,eAAL,CAAqBY,KAFhB,IAGL,KAAKX,gBAAL,CAAsBW,KAHjB,IAIL,KAAKC,iBAJA,IAKL,KAAKf,QAAL,CAAcc,KALhB;AAMD;;;mCAEc;AACb,aAAO,KAAKA,KAAL,KAEH,CAAC,KAAKb,YAAL,CAAkBa,KAAnB,IACA,CAAC,KAAKZ,eAAL,CAAqBY,KADtB,IAEA,CAAC,KAAKX,gBAAL,CAAsBW,KAFvB,IAGA,CAAC,KAAKC,iBAHN,IAIA,CAAC,KAAKf,QAAL,CAAcc,KANZ,CAAP;AAQD;;;;;YAEW1B,I,SAAAA,I;YAAMQ,I,SAAAA,I;YAASD,O;;;;;4MACNqB,MAAM5B,I,EAAMQ,U,IAASD,O;;;;;;;;;;;;;;;;;;sCAGxBP,I,EAAM;AACtB,aAAO,KAAK6B,OAAL,KACJ,KAAKC,YAAL,IAAqB,CAAC,+BAAU9B,IAAV,CADlB,CAAP;AAED;;;;;YAGCA,I,SAAAA,I;YACAQ,I,SAAAA,I;YACAuB,O,SAAAA,O;YACGxB,O;;;;;;;uBAEG,KAAKO,eAAL,CAAqBkB,YAArB,E;;;AACAC,2B,GAAejC,KAAKkC,IAAL,IAAalC,KAAKkC,IAAL,CAAUC,WAAvB,IACnB,KAAKrB,eAAL,CAAqBsB,WAArB,CAAiCpC,KAAKkC,IAAL,CAAUC,WAA3C,CADkB,IAC0C,E;AAExDE,yB,GAAarC,KAAKsC,EAAL,IAAWtC,KAAKsC,EAAL,CAAQH,WAAnB,IACjB,KAAKrB,eAAL,CAAqBsB,WAArB,CAAiCpC,KAAKsC,EAAL,CAAQH,WAAzC,CADgB,IAC0C,E;AAEtDI,uB,GAAU,+BAAUvC,IAAV,C;AACVwC,0B,GAAcD,WAAWR,OAAZ,IAChBE,YAAYQ,MAAZ,KAAuB,CAAvB,IAA4BR,YAAY,CAAZ,CADZ,IAEjB,I;AACIS,wB,GAAY,CAACH,OAAD,IAAYR,OAAb,IACdM,UAAUI,MAAV,KAAqB,CAArB,IAA0BJ,UAAU,CAAV,CADZ,IAEf,I;;uBACI,KAAKM,GAAL,4BACDpC,OADC;AAEJP,mDACKA,IADL;AAEE4C,8BAAgBC,OAAOC,SAAP,CAAiBC,cAAvB,YAAsC,UAAtC,IACR/C,KAAK4C,QADG,GAERI,KAAKC,KAAL,CAAW,CAACC,KAAKC,GAAL,KAAanD,KAAKoD,SAAnB,IAAgC,IAA3C,CAJJ;AAKEC,4BAAQrD,KAAKqD,MAAL,IAAerD,KAAKsD;AAL9B,oBAFI;AASJ9C,4BATI;AAUJgC,wCAVI;AAWJE;AAXI,mB;;;;;;;;;;;;;;;;;;;+FAcW1C,I;;;;;;;;;uBACX,KAAKc,eAAL,CAAqBkB,YAArB,E;;;AACAC,2B,GAAejC,KAAKkC,IAAL,IAAalC,KAAKkC,IAAL,CAAUC,WAAvB,IACnB,KAAKrB,eAAL,CAAqBsB,WAArB,CAAiCpC,KAAKkC,IAAL,CAAUC,WAA3C,CADkB,IAC0C,E;AAExDE,yB,GAAarC,KAAKsC,EAAL,IAAWtC,KAAKsC,EAAL,CAAQH,WAAnB,IACjB,KAAKrB,eAAL,CAAqBsB,WAArB,CAAiCpC,KAAKsC,EAAL,CAAQH,WAAzC,CADgB,IAC0C,E;AAEtDK,0B,GAAcP,eAClBA,YAAYQ,MAAZ,KAAuB,CADL,IAElBR,YAAY,CAAZ,CAFiB,IAGjB,I;AACIS,wB,GAAYL,aAChBA,UAAUI,MAAV,KAAqB,CADL,IAEhBJ,UAAU,CAAV,CAFe,IAGf,I;;uBAEI,kBAAQkB,GAAR,CACJ,2CAAI,KAAKC,aAAL,CAAmBC,IAAnB,EAAJ,GAA+BC,MAA/B,CAAsC,UAAClD,IAAD,EAAU;AAC9C,sBAAMmD,WAAW,OAAKH,aAAL,CAAmBI,GAAnB,CAAuBpD,IAAvB,CAAjB;AACA,yBAAOmD,SAASnC,YAAT,IACLmC,SAASpC,YAAT,EADF;AAED,iBAJD,EAIGsC,GAJH,CAIO;AAAA,yBAAQ,OAAKlB,GAAL,CAAS;AACtB3C,qDACKA,IADL;AAEE4C,gCAAUI,KAAKC,KAAL,CAAW,CAACC,KAAKC,GAAL,KAAanD,KAAKoD,SAAnB,IAAgC,IAA3C,CAFZ;AAGEC,8BAAQrD,KAAKsD;AAHf,sBADsB;AAMtB9C,8BANsB;AAOtBgC,0CAPsB;AAQtBE;AARsB,mBAAT,CAAR;AAAA,iBAJP,CADI,C;;;;;;;;;;;;;;;;;;;+FAiBS1C,I;;;;;qBACX,KAAK8D,iBAAL,CAAuB9D,IAAvB,C;;;;;;uBACI,KAAK+D,YAAL,CAAkB/D,IAAlB,C;;;;;;;;;;;;;;;;;;;+FAGkBA,I;;;;;;sBACtB,KAAK8B,YAAL,IAAqB,CAAC,+BAAU9B,IAAV,C;;;;;qBACpB,KAAK6B,O;;;;;kDAAgB,I;;;;uBACnB,KAAKd,gBAAL,CAAsBiB,YAAtB,E;;;AACAgC,+B,GAAkB,KAAKjD,gBAAL,CAAsBqB,WAAtB,CAAkCpC,KAAKC,SAAvC,KAAqD,E;kDACtE+D,gBAAgBvB,MAAhB,GAAyB,C;;;kDAE3B,K;;;;;;;;;;;;;;;;;;;gGAEYzC,I;;;;;;uBACT,KAAKiE,qBAAL,CAA2BjE,IAA3B,C;;;;;;;;;uBACF,KAAK+D,YAAL,CAAkB/D,IAAlB,C;;;;;;;;;;;;;;;;;;oCAGM;AAAA;;AACd,UAAI,KAAK0B,KAAL,IAAc,KAAKL,mBAAL,KAA6B,KAAKR,YAAL,CAAkBqD,KAAjE,EAAwE;AACtE,YAAMC,WACJ,KAAK9C,mBAAL,IACA,KAAKA,mBAAL,CAAyB+C,KAAzB,EAFe,IAGZ,EAHL;AAIA,aAAK/C,mBAAL,GAA2B,KAAKR,YAAL,CAAkBqD,KAA7C;;AAEA,aAAK7C,mBAAL,CAAyBgD,OAAzB,CAAiC,UAACrE,IAAD,EAAU;AACzC,cAAMsE,eAAeH,SAASI,SAAT,CAAmB;AAAA,mBAAQ3C,KAAK3B,SAAL,KAAmBD,KAAKC,SAAhC;AAAA,WAAnB,CAArB;;AAEA,cAAIqE,iBAAiB,CAAC,CAAtB,EAAyB;AACvB,mBAAKE,UAAL,CAAgBxE,IAAhB;AACD,WAFD,MAEO;AACL,gBAAMyE,UAAUN,SAASG,YAAT,CAAhB;AACAH,qBAASO,MAAT,CAAgBJ,YAAhB,EAA8B,CAA9B;AACA,gBAAItE,KAAKsD,eAAL,KAAyBmB,QAAQnB,eAArC,EAAsD;AACpD,qBAAKqB,cAAL,CAAoB3E,IAApB;AACD;AACF;AACF,SAZD;AAaAmE,iBAASE,OAAT,CAAiB,UAACrE,IAAD,EAAU;AACzB,iBAAK2E,cAAL,CAAoB3E,IAApB;AACD,SAFD;AAGD;AACF;;;;;;;;;;;;;AAGC,qBAAK4E,aAAL;;;;;;;;;;;;;;;;;;+BAIS/C,O,EAAS;AAClB,UAAI,KAAKH,KAAL,IAAcG,YAAY,KAAKA,OAAnC,EAA4C;AAC1C,aAAKgD,KAAL,CAAWC,QAAX,CAAoB;AAClBC,gBAAM,KAAKtE,WAAL,CAAiBuE,UADL;AAElBnD;AAFkB,SAApB;AAID;AACF;;;oCAMeC,Y,EAAc;AAC5B,UAAI,KAAKJ,KAAL,IAAcI,iBAAiB,KAAKA,YAAxC,EAAsD;AACpD,aAAK+C,KAAL,CAAWC,QAAX,CAAoB;AAClBC,gBAAM,KAAKtE,WAAL,CAAiBwE,eADL;AAElBnD;AAFkB,SAApB;AAID;AACF;;;wBAXa;AACZ,aAAO,KAAKlB,QAAL,CAAcsE,OAAd,CAAsB,KAAKlE,WAA3B,EAAwCa,OAA/C;AACD;;;wBAWkB;AACjB,aAAO,KAAKjB,QAAL,CAAcsE,OAAd,CAAsB,KAAKlE,WAA3B,EAAwCc,YAA/C;AACD;;;;;kBA5NkB5B,U","file":"index.js","sourcesContent":["import LoggerBase from '../../lib/LoggerBase';\nimport ensureExist from '../../lib/ensureExist';\nimport { isRinging, isInbound } from '../../lib/callLogHelpers';\nimport actionTypes from './actionTypes';\nimport getDataReducer from './getDataReducer';\n\n/**\n * @function\n * @description Identity function for calls.\n * @param {Object} call - call object\n * @return {String} sessionId\n */\nexport function callIdentityFunction(call) {\n  return call.sessionId;\n}\n\nexport default class CallLogger extends LoggerBase {\n  constructor({\n    storage,\n    callMonitor,\n    contactMatcher,\n    activityMatcher,\n    ...options,\n  }) {\n    super({\n      ...options,\n      name: 'callLogger',\n      actionTypes,\n      getDataReducer,\n      identityFunction: callIdentityFunction,\n    });\n    this._storage = this::ensureExist(storage, 'storage');\n    this._callMonitor = this::ensureExist(callMonitor, 'callMonitor');\n    this._contactMatcher = this::ensureExist(contactMatcher, 'contactMatcher');\n    this._activityMatcher = this::ensureExist(activityMatcher, 'activityMatcher');\n    this._storageKey = `${this._name}Data`;\n    this._storage.registerReducer({\n      key: this._storageKey,\n      reducer: getDataReducer(this.actionTypes),\n    });\n\n    this._lastProcessedCalls = null;\n  }\n\n  addLogProvider({\n    name,\n    logFn,\n    readyCheckFn,\n    allowAutoLog = true,\n    ...options,\n  }) {\n    super.addLogProvider({\n      name,\n      logFn,\n      readyCheckFn,\n      allowAutoLog: !!allowAutoLog,\n      ...options,\n    });\n  }\n\n  _onReset() {\n    this._lastProcessedCalls = null;\n  }\n\n  _shouldInit() {\n    return this.pending &&\n      this._callMonitor.ready &&\n      this._contactMatcher.ready &&\n      this._activityMatcher.ready &&\n      this.logProvidersReady &&\n      this._storage.ready;\n  }\n\n  _shouldReset() {\n    return this.ready &&\n      (\n        !this._callMonitor.ready ||\n        !this._contactMatcher.ready ||\n        !this._activityMatcher.ready ||\n        !this.logProvidersReady ||\n        !this._storage.ready\n      );\n  }\n\n  async log({ call, name, ...options }) {\n    return super.log({ item: call, name, ...options });\n  }\n\n  _shouldLogNewCall(call) {\n    return this.autoLog &&\n      (this.logOnRinging || !isRinging(call));\n  }\n\n  async logCall({\n    call,\n    name,\n    contact,\n    ...options,\n  }) {\n    await this._contactMatcher.triggerMatch();\n    const fromMatches = (call.from && call.from.phoneNumber &&\n      this._contactMatcher.dataMapping[call.from.phoneNumber]) || [];\n\n    const toMatches = (call.to && call.to.phoneNumber &&\n      this._contactMatcher.dataMapping[call.to.phoneNumber]) || [];\n\n    const inbound = isInbound(call);\n    const fromEntity = (inbound && contact) ||\n      (fromMatches.length === 1 && fromMatches[0]) ||\n      null;\n    const toEntity = (!inbound && contact) ||\n      (toMatches.length === 1 && toMatches[0]) ||\n      null;\n    await this.log({\n      ...options,\n      call: {\n        ...call,\n        duration: call::Object.prototype.hasOwnProperty('duration') ?\n          call.duration :\n          Math.round((Date.now() - call.startTime) / 1000),\n        result: call.result || call.telephonyStatus,\n      },\n      name,\n      fromEntity,\n      toEntity,\n    });\n  }\n  async _autoLogCall(call) {\n    await this._contactMatcher.triggerMatch();\n    const fromMatches = (call.from && call.from.phoneNumber &&\n      this._contactMatcher.dataMapping[call.from.phoneNumber]) || [];\n\n    const toMatches = (call.to && call.to.phoneNumber &&\n      this._contactMatcher.dataMapping[call.to.phoneNumber]) || [];\n\n    const fromEntity = (fromMatches &&\n      fromMatches.length === 1 &&\n      fromMatches[0]) ||\n      null;\n    const toEntity = (toMatches &&\n      toMatches.length === 1 &&\n      toMatches[0]) ||\n      null;\n\n    await Promise.all(\n      [...this._logProviders.keys()].filter((name) => {\n        const provider = this._logProviders.get(name);\n        return provider.allowAutoLog &&\n          provider.readyCheckFn();\n      }).map(name => this.log({\n        call: {\n          ...call,\n          duration: Math.round((Date.now() - call.startTime) / 1000),\n          result: call.telephonyStatus,\n        },\n        name,\n        fromEntity,\n        toEntity,\n      })),\n    );\n  }\n  async _onNewCall(call) {\n    if (this._shouldLogNewCall(call)) {\n      await this._autoLogCall(call);\n    }\n  }\n  async _shouldLogUpdatedCall(call) {\n    if (this.logOnRinging || !isRinging(call)) {\n      if (this.autoLog) return true;\n      await this._activityMatcher.triggerMatch();\n      const activityMatches = this._activityMatcher.dataMapping[call.sessionId] || [];\n      return activityMatches.length > 0;\n    }\n    return false;\n  }\n  async _onCallUpdated(call) {\n    if (await this._shouldLogUpdatedCall(call)) {\n      await this._autoLogCall(call);\n    }\n  }\n  _processCalls() {\n    if (this.ready && this._lastProcessedCalls !== this._callMonitor.calls) {\n      const oldCalls = (\n        this._lastProcessedCalls &&\n        this._lastProcessedCalls.slice()\n      ) || [];\n      this._lastProcessedCalls = this._callMonitor.calls;\n\n      this._lastProcessedCalls.forEach((call) => {\n        const oldCallIndex = oldCalls.findIndex(item => item.sessionId === call.sessionId);\n\n        if (oldCallIndex === -1) {\n          this._onNewCall(call);\n        } else {\n          const oldCall = oldCalls[oldCallIndex];\n          oldCalls.splice(oldCallIndex, 1);\n          if (call.telephonyStatus !== oldCall.telephonyStatus) {\n            this._onCallUpdated(call);\n          }\n        }\n      });\n      oldCalls.forEach((call) => {\n        this._onCallUpdated(call);\n      });\n    }\n  }\n  async _onStateChange() {\n    await super._onStateChange();\n    this._processCalls();\n  }\n\n\n  setAutoLog(autoLog) {\n    if (this.ready && autoLog !== this.autoLog) {\n      this.store.dispatch({\n        type: this.actionTypes.setAutoLog,\n        autoLog,\n      });\n    }\n  }\n\n  get autoLog() {\n    return this._storage.getItem(this._storageKey).autoLog;\n  }\n\n  setLogOnRinging(logOnRinging) {\n    if (this.ready && logOnRinging !== this.logOnRinging) {\n      this.store.dispatch({\n        type: this.actionTypes.setLogOnRinging,\n        logOnRinging,\n      });\n    }\n  }\n\n  get logOnRinging() {\n    return this._storage.getItem(this._storageKey).logOnRinging;\n  }\n}\n"]}