{"version":3,"sources":["modules/CallLogger/index.js"],"names":["callIdentityFunction","call","sessionId","CallLogger","storage","callMonitor","callHistory","contactMatcher","activityMatcher","options","name","actionTypes","getDataReducer","identityFunction","_storage","_callMonitor","_contactMatcher","_activityMatcher","_callHistory","_storageKey","_name","registerReducer","key","reducer","_lastProcessedCalls","_lastProcessedEndedCalls","logFn","readyCheckFn","allowAutoLog","pending","ready","logProvidersReady","item","autoLog","logOnRinging","contact","triggerMatch","fromMatches","from","phoneNumber","dataMapping","toMatches","to","inbound","fromEntity","length","toEntity","log","duration","Object","prototype","hasOwnProperty","Math","round","Date","now","startTime","result","telephonyStatus","all","_logProviders","keys","filter","provider","get","map","_shouldLogNewCall","_autoLogCall","activityMatches","_shouldLogUpdatedCall","calls","oldCalls","slice","forEach","oldCallIndex","findIndex","_onNewCall","oldCall","splice","_onCallUpdated","recentlyEndedCalls","currentSessions","callInfo","find","_processCalls","store","dispatch","type","setAutoLog","setLogOnRinging","getItem"],"mappings":"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","file":"index.js","sourcesContent":["import LoggerBase from '../../lib/LoggerBase';\nimport ensureExist from '../../lib/ensureExist';\nimport { isRinging, isInbound } from '../../lib/callLogHelpers';\nimport actionTypes from './actionTypes';\nimport getDataReducer from './getDataReducer';\n\n/**\n * @function\n * @description Identity function for calls.\n * @param {Object} call - call object\n * @return {String} sessionId\n */\nexport function callIdentityFunction(call) {\n  return call.sessionId;\n}\n\nexport default class CallLogger extends LoggerBase {\n  constructor({\n    storage,\n    callMonitor,\n    callHistory,\n    contactMatcher,\n    activityMatcher,\n    ...options,\n  }) {\n    super({\n      ...options,\n      name: 'callLogger',\n      actionTypes,\n      getDataReducer,\n      identityFunction: callIdentityFunction,\n    });\n    this._storage = this::ensureExist(storage, 'storage');\n    this._callMonitor = this::ensureExist(callMonitor, 'callMonitor');\n    this._contactMatcher = this::ensureExist(contactMatcher, 'contactMatcher');\n    this._activityMatcher = this::ensureExist(activityMatcher, 'activityMatcher');\n    this._callHistory = callHistory;\n    this._storageKey = `${this._name}Data`;\n    this._storage.registerReducer({\n      key: this._storageKey,\n      reducer: getDataReducer(this.actionTypes),\n    });\n\n    this._lastProcessedCalls = null;\n    this._lastProcessedEndedCalls = null;\n  }\n\n  addLogProvider({\n    name,\n    logFn,\n    readyCheckFn,\n    allowAutoLog = true,\n    ...options,\n  }) {\n    super.addLogProvider({\n      name,\n      logFn,\n      readyCheckFn,\n      allowAutoLog: !!allowAutoLog,\n      ...options,\n    });\n  }\n\n  _onReset() {\n    this._lastProcessedCalls = null;\n    this._lastProcessedEndedCalls = null;\n  }\n\n  _shouldInit() {\n    return this.pending &&\n      this._callMonitor.ready &&\n      (!this._callHistory || this._callHistory.ready) &&\n      this._contactMatcher.ready &&\n      this._activityMatcher.ready &&\n      this.logProvidersReady &&\n      this._storage.ready;\n  }\n\n  _shouldReset() {\n    return this.ready &&\n      (\n        !this._callMonitor.ready ||\n        (this._callMonitor && !this._callMonitor.ready) ||\n        (this._callHistory && !this._callHistory.ready) ||\n        !this._contactMatcher.ready ||\n        !this._activityMatcher.ready ||\n        !this.logProvidersReady ||\n        !this._storage.ready\n      );\n  }\n\n  async log({ call, name, ...options }) {\n    return super.log({ item: call, name, ...options });\n  }\n\n  _shouldLogNewCall(call) {\n    return this.autoLog &&\n      (this.logOnRinging || !isRinging(call));\n  }\n\n  async logCall({\n    call,\n    name,\n    contact,\n    ...options,\n  }) {\n    await this._contactMatcher.triggerMatch();\n    const fromMatches = (call.from && call.from.phoneNumber &&\n      this._contactMatcher.dataMapping[call.from.phoneNumber]) || [];\n\n    const toMatches = (call.to && call.to.phoneNumber &&\n      this._contactMatcher.dataMapping[call.to.phoneNumber]) || [];\n\n    const inbound = isInbound(call);\n    const fromEntity = (inbound && contact) ||\n      (fromMatches.length === 1 && fromMatches[0]) ||\n      null;\n    const toEntity = (!inbound && contact) ||\n      (toMatches.length === 1 && toMatches[0]) ||\n      null;\n    await this.log({\n      ...options,\n      call: {\n        ...call,\n        duration: call::Object.prototype.hasOwnProperty('duration') ?\n          call.duration :\n          Math.round((Date.now() - call.startTime) / 1000),\n        result: call.result || call.telephonyStatus,\n      },\n      name,\n      fromEntity,\n      toEntity,\n    });\n  }\n  async _autoLogCall(call) {\n    await this._contactMatcher.triggerMatch();\n    const fromMatches = (call.from && call.from.phoneNumber &&\n      this._contactMatcher.dataMapping[call.from.phoneNumber]) || [];\n\n    const toMatches = (call.to && call.to.phoneNumber &&\n      this._contactMatcher.dataMapping[call.to.phoneNumber]) || [];\n\n    const fromEntity = (fromMatches &&\n      fromMatches.length === 1 &&\n      fromMatches[0]) ||\n      null;\n    const toEntity = (toMatches &&\n      toMatches.length === 1 &&\n      toMatches[0]) ||\n      null;\n\n    await Promise.all(\n      [...this._logProviders.keys()].filter((name) => {\n        const provider = this._logProviders.get(name);\n        return provider.allowAutoLog &&\n          provider.readyCheckFn();\n      }).map(name => this.log({\n        call: {\n          ...call,\n          duration: call::Object.prototype.hasOwnProperty('duration') ?\n            call.duration :\n            Math.round((Date.now() - call.startTime) / 1000),\n          result: call.result || call.telephonyStatus,\n        },\n        name,\n        fromEntity,\n        toEntity,\n      })),\n    );\n  }\n  async _onNewCall(call) {\n    if (this._shouldLogNewCall(call)) {\n      await this._autoLogCall(call);\n    }\n  }\n  async _shouldLogUpdatedCall(call) {\n    if (this.logOnRinging || !isRinging(call)) {\n      if (this.autoLog) return true;\n      await this._activityMatcher.triggerMatch();\n      const activityMatches = this._activityMatcher.dataMapping[call.sessionId] || [];\n      return activityMatches.length > 0;\n    }\n    return false;\n  }\n  async _onCallUpdated(call) {\n    if (await this._shouldLogUpdatedCall(call)) {\n      await this._autoLogCall(call);\n    }\n  }\n  _processCalls() {\n    if (this.ready) {\n      if (this._lastProcessedCalls !== this._callMonitor.calls) {\n        const oldCalls = (\n          this._lastProcessedCalls &&\n          this._lastProcessedCalls.slice()\n        ) || [];\n        this._lastProcessedCalls = this._callMonitor.calls;\n\n        this._lastProcessedCalls.forEach((call) => {\n          const oldCallIndex = oldCalls.findIndex(item => item.sessionId === call.sessionId);\n\n          if (oldCallIndex === -1) {\n            this._onNewCall(call);\n          } else {\n            const oldCall = oldCalls[oldCallIndex];\n            oldCalls.splice(oldCallIndex, 1);\n            if (call.telephonyStatus !== oldCall.telephonyStatus) {\n              this._onCallUpdated(call);\n            }\n          }\n        });\n        oldCalls.forEach((call) => {\n          this._onCallUpdated(call);\n        });\n      }\n      if (\n        this._callHistory &&\n        this._lastProcessedEndedCalls !== this._callHistory.recentlyEndedCalls\n      ) {\n        const oldCalls = (\n          this._lastProcessedEndedCalls &&\n          this._lastProcessedEndedCalls.slice()\n        ) || [];\n        this._lastProcessedEndedCalls = this._callHistory.recentlyEndedCalls;\n        const currentSessions = {};\n        this._lastProcessedEndedCalls.forEach((call) => {\n          currentSessions[call.sessionId] = true;\n        });\n        oldCalls.forEach((call) => {\n          if (!currentSessions[call.sessionId]) {\n            // call log updated\n            const callInfo = this._callHistory.calls\n              .find(item => item.sessionId === call.sessionId);\n            if (callInfo) {\n              this._onCallUpdated(callInfo);\n            }\n          }\n        });\n      }\n    }\n  }\n  async _onStateChange() {\n    await super._onStateChange();\n    this._processCalls();\n  }\n\n\n  setAutoLog(autoLog) {\n    if (this.ready && autoLog !== this.autoLog) {\n      this.store.dispatch({\n        type: this.actionTypes.setAutoLog,\n        autoLog,\n      });\n    }\n  }\n\n  get autoLog() {\n    return this._storage.getItem(this._storageKey).autoLog;\n  }\n\n  setLogOnRinging(logOnRinging) {\n    if (this.ready && logOnRinging !== this.logOnRinging) {\n      this.store.dispatch({\n        type: this.actionTypes.setLogOnRinging,\n        logOnRinging,\n      });\n    }\n  }\n\n  get logOnRinging() {\n    return this._storage.getItem(this._storageKey).logOnRinging;\n  }\n}\n"]}