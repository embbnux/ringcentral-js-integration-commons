{"version":3,"sources":["modules/ContactSearch/index.js"],"names":["uniqueContactItems","sortContactItemsByName","groupByFirstLetterOfName","AllContactSourceName","DefaultMinimalSearchLength","DefaultContactListPageSize","result","items","filter","value","index","arr","indexOf","hash","unique","forEach","item","id","push","sort","a","b","name1","name","toLowerCase","replace","name2","isNumber1","test","isNumber2","localeCompare","contactItems","groups","length","group","contact","letter","caption","contacts","ContactSearch","auth","storage","storageKey","minimalSearchLength","contactListPageSize","ttl","options","actionTypes","_auth","_storage","_storageKey","_minimalSearchLength","_contactListPageSize","_ttl","_searchSources","_searchSourcesFormat","_searchSourcesCheck","_reducer","registerReducer","key","reducer","cache","addSelector","size","names","keys","sourceName","searching","pageSize","pageNumber","searchCriteria","count","slice","store","subscribe","_onStateChange","_shouldInit","_initModuleStatus","_shouldReset","_resetModuleStatus","loginStatus","loggedIn","ready","_readyCheck","dispatch","type","initSuccess","resetSuccess","searchFn","readyCheckFn","formatFn","Error","has","set","searchString","prepareSearch","searchOnSources","_searchSource","searchText","updateSearchCriteria","clearTimeout","_searchTimeoutId","setTimeout","source","search","entities","_searchFromCache","_loadSearching","get","_saveSearching","_onSearchError","contactSearch","now","Date","timestamp","searchError","searchSuccess","save","getItem","state","status","searchStatus","_selectors","contactSourceNames","contactGroups"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QAYgBA,kB,GAAAA,kB;QAkBAC,sB,GAAAA,sB;QAkBAC,wB,GAAAA,wB;;AAhDhB;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEO,IAAMC,sDAAuB,KAA7B;AACA,IAAMC,kEAA6B,CAAnC;AACA,IAAMC,kEAA6B,EAAnC;;AAEA,SAASL,kBAAT,CAA4BM,MAA5B,EAAoC;AACzC,MAAIC,QAAQD,UAAU,EAAtB;AACA;AACAC,UAAQA,MAAMC,MAAN,CAAa,UAACC,KAAD,EAAQC,KAAR,EAAeC,GAAf;AAAA,WACnBA,IAAIC,OAAJ,CAAYH,KAAZ,MAAuBC,KADJ;AAAA,GAAb,CAAR;AAGA;AACA,MAAMG,OAAO,EAAb;AACA,MAAMC,SAAS,EAAf;AACAP,QAAMQ,OAAN,CAAc,UAACC,IAAD,EAAU;AACtB,QAAI,CAACH,KAAKG,KAAKC,EAAV,CAAL,EAAoB;AAClBJ,WAAKG,KAAKC,EAAV,IAAgB,CAAhB;AACAH,aAAOI,IAAP,CAAYF,IAAZ;AACD;AACF,GALD;AAMA,SAAOF,MAAP;AACD;;AAEM,SAASb,sBAAT,CAAgCK,MAAhC,EAAwC;AAC7C,MAAMC,QAAQD,UAAU,EAAxB;AACAC,QAAMY,IAAN,CAAW,UAACC,CAAD,EAAIC,CAAJ,EAAU;AACnB,QAAMC,QAAQ,CAACF,EAAEG,IAAF,IAAU,EAAX,EAAeC,WAAf,GAA6BC,OAA7B,CAAqC,QAArC,EAA+C,EAA/C,CAAd,CADmB,CAC+C;AAClE,QAAMC,QAAQ,CAACL,EAAEE,IAAF,IAAU,EAAX,EAAeC,WAAf,GAA6BC,OAA7B,CAAqC,QAArC,EAA+C,EAA/C,CAAd,CAFmB,CAE+C;AAClE,QAAME,YAAY,SAASC,IAAT,CAAcN,KAAd,CAAlB;AACA,QAAMO,YAAY,SAASD,IAAT,CAAcF,KAAd,CAAlB;AACA,QAAIC,aAAaE,SAAjB,EAA4B;AAC1B,aAAOP,MAAMQ,aAAN,CAAoBJ,KAApB,CAAP;AACD,KAFD,MAEO,IAAIC,aAAaE,SAAjB,EAA4B;AACjC;AACA,aAAO,CAACP,MAAMQ,aAAN,CAAoBJ,KAApB,CAAR;AACD;AACD,WAAOJ,MAAMQ,aAAN,CAAoBJ,KAApB,CAAP;AACD,GAZD;AAaA,SAAOnB,KAAP;AACD;;AAEM,SAASL,wBAAT,CAAkC6B,YAAlC,EAAgD;AACrD,MAAMC,SAAS,EAAf;AACA,MAAID,gBAAgBA,aAAaE,MAAjC,EAAyC;AACvC,QAAIC,cAAJ;AACAH,iBAAahB,OAAb,CAAqB,UAACoB,OAAD,EAAa;AAChC,UAAMZ,OAAO,CAACY,QAAQZ,IAAR,IAAgB,EAAjB,EAAqBE,OAArB,CAA6B,QAA7B,EAAuC,EAAvC,CAAb,CADgC,CACyB;AACzD,UAAMW,SAAUb,KAAK,CAAL,KAAW,EAA3B;AACA,UAAI,CAACW,KAAD,IAAUA,MAAMG,OAAN,KAAkBD,MAAhC,EAAwC;AACtCF,gBAAQ;AACNI,oBAAU,EADJ;AAEND,mBAASD,MAFH;AAGNnB,cAAImB;AAHE,SAAR;AAKAJ,eAAOd,IAAP,CAAYgB,KAAZ;AACD;AACDA,YAAMI,QAAN,CAAepB,IAAf,CAAoBiB,OAApB;AACD,KAZD;AAaD;AACD,SAAOH,MAAP;AACD;;AAED;;;;IAIqBO,a;;;AACnB;;;;;;;;;AASA,+BAQG;AAAA,QAPDC,IAOC,QAPDA,IAOC;AAAA,QANDC,OAMC,QANDA,OAMC;AAAA,+BALDC,UAKC;AAAA,QALDA,UAKC,mCALY,oBAKZ;AAAA,qCAJDC,mBAIC;AAAA,QAJDA,mBAIC,yCAJqBvC,0BAIrB;AAAA,qCAHDwC,mBAGC;AAAA,QAHDA,mBAGC,yCAHqBvC,0BAGrB;AAAA,wBAFDwC,GAEC;AAAA,QAFDA,GAEC,4BAFK,IAAI,EAAJ,GAAS,IAEd;AAAA,QADEC,OACF;AAAA;;AAAA,+KAEIA,OAFJ;AAGCC;AAHD;;AAKD,UAAKC,KAAL,GAAaR,IAAb;AACA,UAAKS,QAAL,GAAgBR,OAAhB;AACA,UAAKS,WAAL,GAAmBR,UAAnB;AACA,UAAKS,oBAAL,GAA4BR,mBAA5B;AACA,UAAKS,oBAAL,GAA4BR,mBAA5B;AACA,UAAKS,IAAL,GAAYR,GAAZ;AACA,UAAKS,cAAL,GAAsB,mBAAtB;AACA,UAAKC,oBAAL,GAA4B,mBAA5B;AACA,UAAKC,mBAAL,GAA2B,mBAA3B;AACA,QAAI,MAAKP,QAAT,EAAmB;AACjB,YAAKQ,QAAL,GAAgB,uCAAwB,MAAKV,WAA7B,CAAhB;AACA,YAAKE,QAAL,CAAcS,eAAd,CAA8B;AAC5BC,aAAK,MAAKT,WADkB;AAE5BU,iBAAS,+BAAgB,MAAKb,WAArB;AAFmB,OAA9B;AAID,KAND,MAMO;AACL,YAAKU,QAAL,GAAgB,uCAAwB,MAAKV,WAA7B,EAA0C;AACxDc,eAAO,+BAAgB,MAAKd,WAArB;AADiD,OAA1C,CAAhB;AAGD;;AAED,UAAKe,WAAL,CACE,oBADF,EAEE;AAAA,aAAM,MAAKR,cAAL,CAAoBS,IAA1B;AAAA,KAFF,EAGE,YAAM;AACJ,UAAMC,QAAQ,CAAC7D,oBAAD,CAAd;AADI;AAAA;AAAA;;AAAA;AAEJ,wDAAyB,MAAKmD,cAAL,CAAoBW,IAApB,EAAzB,4GAAqD;AAAA,cAA1CC,UAA0C;;AACnDF,gBAAM9C,IAAN,CAAWgD,UAAX;AACD;AAJG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKJ,aAAOF,KAAP;AACD,KATH;;AAYA,UAAKF,WAAL,CACE,eADF,EAEE;AAAA,aAAM,MAAKK,SAAL,IAAkB,MAAKA,SAAL,CAAe7D,MAAvC;AAAA,KAFF,EAGE,UAACA,MAAD,EAAY;AACV,UAAM8D,WAAW,MAAKhB,oBAAtB;AACA,UAAMiB,aAAa,MAAKC,cAAL,CAAoBD,UAApB,IAAkC,CAArD;AACA,UAAME,QAAQF,aAAaD,QAA3B;AACA,UAAI7D,QAAQP,mBAAmBM,MAAnB,CAAZ;AACAC,cAAQN,uBAAuBM,KAAvB,CAAR;AACAA,cAAQA,MAAMiE,KAAN,CAAY,CAAZ,EAAeD,KAAf,CAAR;AACA,UAAMvC,SAAS9B,yBAAyBK,KAAzB,CAAf;AACA,aAAOyB,MAAP;AACD,KAZH;AAtCC;AAoDF;;;;iCACY;AAAA;;AACX,WAAKyC,KAAL,CAAWC,SAAX,CAAqB;AAAA,eAAM,OAAKC,cAAL,EAAN;AAAA,OAArB;AACD;;;qCAEgB;AACf,UAAI,KAAKC,WAAL,EAAJ,EAAwB;AACtB,aAAKC,iBAAL;AACD,OAFD,MAEO,IAAI,KAAKC,YAAL,EAAJ,EAAyB;AAC9B,aAAKC,kBAAL;AACD;AACF;;;kCAEa;AACZ,aACE,KAAK/B,KAAL,CAAWgC,WAAX,KAA2B,sBAAYC,QAAvC,KACC,CAAC,KAAKhC,QAAN,IAAkB,KAAKA,QAAL,CAAciC,KADjC,KAEA,KAAKC,WAAL,EAFA,IAGA,CAAC,KAAKD,KAJR;AAMD;;;mCAEc;AACb,aACE,CACE,KAAKlC,KAAL,CAAWgC,WAAX,KAA2B,sBAAYC,QAAvC,IACC,KAAKhC,QAAL,IAAiB,CAAC,KAAKA,QAAL,CAAciC,KAFnC,KAIA,KAAKA,KALP;AAOD;;;wCAEmB;AAClB,WAAKT,KAAL,CAAWW,QAAX,CAAoB;AAClBC,cAAM,KAAKtC,WAAL,CAAiBuC;AADL,OAApB;AAGD;;;yCAEoB;AACnB,WAAKb,KAAL,CAAWW,QAAX,CAAoB;AAClBC,cAAM,KAAKtC,WAAL,CAAiBwC;AADL,OAApB;AAGD;;;2CAEiE;AAAA,UAAhDrB,UAAgD,SAAhDA,UAAgD;AAAA,UAApCsB,QAAoC,SAApCA,QAAoC;AAAA,UAA1BC,YAA0B,SAA1BA,YAA0B;AAAA,UAAZC,QAAY,SAAZA,QAAY;;AAChE,UAAI,CAACxB,UAAL,EAAiB;AACf,cAAM,IAAIyB,KAAJ,CAAU,0CAAV,CAAN;AACD;AACD,UAAI,KAAKrC,cAAL,CAAoBsC,GAApB,CAAwB1B,UAAxB,CAAJ,EAAyC;AACvC,cAAM,IAAIyB,KAAJ,4CAAmDzB,UAAnD,sBAAN;AACD;AACD,UAAI,KAAKV,mBAAL,CAAyBoC,GAAzB,CAA6B1B,UAA7B,CAAJ,EAA8C;AAC5C,cAAM,IAAIyB,KAAJ,kDAAyDzB,UAAzD,sBAAN;AACD;AACD,UAAI,KAAKX,oBAAL,CAA0BqC,GAA1B,CAA8B1B,UAA9B,CAAJ,EAA+C;AAC7C,cAAM,IAAIyB,KAAJ,mDAA0DzB,UAA1D,sBAAN;AACD;AACD,UAAI,OAAOsB,QAAP,KAAoB,UAAxB,EAAoC;AAClC,cAAM,IAAIG,KAAJ,CAAU,4CAAV,CAAN;AACD;AACD,UAAI,OAAOF,YAAP,KAAwB,UAA5B,EAAwC;AACtC,cAAM,IAAIE,KAAJ,CAAU,gDAAV,CAAN;AACD;AACD,UAAI,OAAOD,QAAP,KAAoB,UAAxB,EAAoC;AAClC,cAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACD;AACD,WAAKrC,cAAL,CAAoBuC,GAApB,CAAwB3B,UAAxB,EAAoCsB,QAApC;AACA,WAAKjC,oBAAL,CAA0BsC,GAA1B,CAA8B3B,UAA9B,EAA0CwB,QAA1C;AACA,WAAKlC,mBAAL,CAAyBqC,GAAzB,CAA6B3B,UAA7B,EAAyCuB,YAAzC;AACD;;;;;YAGcK,Y,SAAAA,Y;;;;;;;;sBACT,CAAC,KAAKZ,KAAN,IAAgBY,aAAa7D,MAAb,GAAsB,KAAKkB,oB;;;;;AAC7C,qBAAKsB,KAAL,CAAWW,QAAX,CAAoB;AAClBC,wBAAM,KAAKtC,WAAL,CAAiBgD;AADL,iBAApB;;;;sBAME,KAAK5B,SAAL,CAAe2B,YAAf,KAAgCA,Y;;;;;;;;AAI9BE,+B,GAAkB,oBAAW,KAAK1C,cAAL,CAAoBW,IAApB,EAAX,C;;;;;wDACC+B,e;;;;;;;;AAAd9B,0B;;uBACH,KAAK+B,aAAL,CAAmB;AACvBD,kDADuB;AAEvB9B,wCAFuB;AAGvB4B;AAHuB,iBAAnB,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YASS5B,U,SAAAA,U;YAAYgC,U,SAAAA,U;YAAY7B,U,SAAAA,U;;;;;oBACpC,KAAKa,K;;;;;AACR,qBAAKT,KAAL,CAAWW,QAAX,CAAoB;AAClBC,wBAAM,KAAKtC,WAAL,CAAiBgD;AADL,iBAApB;;;;;AAMF,qBAAKtB,KAAL,CAAWW,QAAX,CAAoB;AAClBC,wBAAM,KAAKtC,WAAL,CAAiBoD,oBADL;AAElBjC,wCAFkB;AAGlBgC,wCAHkB;AAIlB7B;AAJkB,iBAApB;;AAOA+B,6BAAa,KAAKC,gBAAlB;AACA,qBAAKA,gBAAL,GAAwBC,sEAAW;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC3BN,yCAD2B,GACR,CAAC9B,UAAD,IAAeA,eAAe/D,oBAA/B,GACtB,oBAAW,OAAKmD,cAAL,CAAoBW,IAApB,EAAX,CADsB,GAEtB,CAACC,UAAD,CAH+B;AAAA;AAAA;AAAA;AAAA;AAAA,kEAIZ8B,eAJY;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAItBO,gCAJsB;AAAA;AAAA,iCAKzB,OAAKN,aAAL,CAAmB;AACvBD,4DADuB;AAEvB9B,wCAAYqC,MAFW;AAGvBT,0CAAcI;AAHS,2BAAnB,CALyB;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAX,IAWrB,GAXqB,CAAxB;;;;;;;;;;;;;;;;;;;;YAeoBF,e,SAAAA,e;YAAiB9B,U,SAAAA,U;YAAY4B,Y,SAAAA,Y;;;;;;AACjD,qBAAKrB,KAAL,CAAWW,QAAX,CAAoB;AAClBC,wBAAM,KAAKtC,WAAL,CAAiByD;AADL,iBAApB;;AAIMC,wB,GAAW,I;;AACfA,2BAAW,KAAKC,gBAAL,CAAsB,EAAExC,sBAAF,EAAc4B,0BAAd,EAAtB,CAAX;;qBACIW,Q;;;;;AACF,qBAAKE,cAAL,CAAoB,EAAEX,gCAAF,EAAmBF,0BAAnB,EAAiCW,kBAAjC,EAApB;;;;;uBAGe,KAAKnD,cAAL,CAAoBsD,GAApB,CAAwB1C,UAAxB,EAAoC;AACnD4B;AADmD,iBAApC,C;;;AAAjBW,wB;;AAGAA,2BAAW,KAAKlD,oBAAL,CAA0BqD,GAA1B,CAA8B1C,UAA9B,EAA0CuC,QAA1C,CAAX;AACA,qBAAKE,cAAL,CAAoB,EAAEX,gCAAF,EAAmBF,0BAAnB,EAAiCW,kBAAjC,EAApB;AACA,qBAAKI,cAAL,CAAoB,EAAE3C,sBAAF,EAAc4B,0BAAd,EAA4BW,kBAA5B,EAApB;;;;;;;;AAEA,qBAAKK,cAAL;;;;;;;;;;;;;;;;;;6CAI2C;AAAA,UAA5B5C,UAA4B,UAA5BA,UAA4B;AAAA,UAAhB4B,YAAgB,UAAhBA,YAAgB;;AAC7C,UAAMnC,MAASO,UAAT,SAAuB4B,YAA7B;AACA,UAAM3B,YAAY,KAAKN,KAAL,IAAc,KAAKA,KAAL,CAAWkD,aAAzB,IAA0C,KAAKlD,KAAL,CAAWkD,aAAX,CAAyBpD,GAAzB,CAA5D;AACA,UAAMqD,MAAMC,KAAKD,GAAL,EAAZ;AACA,UAAI7C,aAAc6C,MAAM7C,UAAU+C,SAAjB,GAA8B,KAAK7D,IAApD,EAA0D;AACxD,eAAOc,UAAUsC,QAAjB;AACD;AACD,aAAO,IAAP;AACD;;;kCAEa;AAAA;AAAA;AAAA;;AAAA;AACZ,yDAAyB,KAAKjD,mBAAL,CAAyBS,IAAzB,EAAzB,iHAA0D;AAAA,cAA/CC,UAA+C;;AACxD,cAAI,CAAC,KAAKV,mBAAL,CAAyBoD,GAAzB,CAA6B1C,UAA7B,GAAL,EAAiD;AAC/C,mBAAO,KAAP;AACD;AACF;AALW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMZ,aAAO,IAAP;AACD;;;qCAEgB;AACf,WAAKO,KAAL,CAAWW,QAAX,CAAoB;AAClBC,cAAM,KAAKtC,WAAL,CAAiBoE;AADL,OAApB;AAGD;;;2CAE2D;AAAA,UAA3CnB,eAA2C,UAA3CA,eAA2C;AAAA,UAA1BF,YAA0B,UAA1BA,YAA0B;AAAA,UAAZW,QAAY,UAAZA,QAAY;;AAC1D,WAAKhC,KAAL,CAAWW,QAAX,CAAoB;AAClBC,cAAM,KAAKtC,WAAL,CAAiBqE,aADL;AAElBpB,wCAFkB;AAGlBF,kCAHkB;AAIlBW;AAJkB,OAApB;AAMD;;;2CAEsD;AAAA,UAAtCvC,UAAsC,UAAtCA,UAAsC;AAAA,UAA1B4B,YAA0B,UAA1BA,YAA0B;AAAA,UAAZW,QAAY,UAAZA,QAAY;;AACrD,WAAKhC,KAAL,CAAWW,QAAX,CAAoB;AAClBC,cAAM,KAAKtC,WAAL,CAAiBsE,IADL;AAElBnD,8BAFkB;AAGlB4B,kCAHkB;AAIlBW,0BAJkB;AAKlB5D,aAAK,KAAKQ;AALQ,OAApB;AAOD;;;wBAEW;AACV,aAAO,KAAKJ,QAAL,GACL,KAAKA,QAAL,CAAcqE,OAAd,CAAsB,KAAKpE,WAA3B,CADK,GAEL,KAAKqE,KAAL,CAAW1D,KAFb;AAGD;;;wBAEY;AACX,aAAO,KAAK0D,KAAL,CAAWC,MAAlB;AACD;;;wBAEkB;AACjB,aAAO,KAAKD,KAAL,CAAWE,YAAlB;AACD;;;wBAEe;AACd,aAAO,KAAKF,KAAL,CAAWpD,SAAlB;AACD;;;wBAEkB;AACjB,aAAO,KAAKA,SAAL,GAAiB,KAAKA,SAAL,CAAe7D,MAAhC,GAAyC,EAAhD;AACD;;;wBAEoB;AACnB,aAAO,KAAKiH,KAAL,CAAWjD,cAAlB;AACD;;;wBAEwB;AACvB,aAAO,KAAKoD,UAAL,CAAgBC,kBAAhB,EAAP;AACD;;;wBAEmB;AAClB,aAAO,KAAKD,UAAL,CAAgBE,aAAhB,EAAP;AACD;;;;kBAtSkBrF,a","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport loginStatus from '../../modules/Auth/loginStatus';\nimport proxify from '../../lib/proxy/proxify';\n\nimport actionTypes from './actionTypes';\nimport getContactSearchReducer from './getContactSearchReducer';\nimport getCacheReducer from './getCacheReducer';\n\nexport const AllContactSourceName = 'all';\nexport const DefaultMinimalSearchLength = 3;\nexport const DefaultContactListPageSize = 20;\n\nexport function uniqueContactItems(result) {\n  let items = result || [];\n  // remove duplicated referencing\n  items = items.filter((value, index, arr) =>\n    arr.indexOf(value) === index\n  );\n  // remove duplicated items by id\n  const hash = {};\n  const unique = [];\n  items.forEach((item) => {\n    if (!hash[item.id]) {\n      hash[item.id] = 1;\n      unique.push(item);\n    }\n  });\n  return unique;\n}\n\nexport function sortContactItemsByName(result) {\n  const items = result || [];\n  items.sort((a, b) => {\n    const name1 = (a.name || '').toLowerCase().replace(/^\\s\\s*/, ''); // trim start\n    const name2 = (b.name || '').toLowerCase().replace(/^\\s\\s*/, ''); // trim start\n    const isNumber1 = /^[0-9]/.test(name1);\n    const isNumber2 = /^[0-9]/.test(name2);\n    if (isNumber1 && isNumber2) {\n      return name1.localeCompare(name2);\n    } else if (isNumber1 || isNumber2) {\n      // put number name at last\n      return -name1.localeCompare(name2);\n    }\n    return name1.localeCompare(name2);\n  });\n  return items;\n}\n\nexport function groupByFirstLetterOfName(contactItems) {\n  const groups = [];\n  if (contactItems && contactItems.length) {\n    let group;\n    contactItems.forEach((contact) => {\n      const name = (contact.name || '').replace(/^\\s\\s*/, ''); // trim start\n      const letter = (name[0] || '');\n      if (!group || group.caption !== letter) {\n        group = {\n          contacts: [],\n          caption: letter,\n          id: letter,\n        };\n        groups.push(group);\n      }\n      group.contacts.push(contact);\n    });\n  }\n  return groups;\n}\n\n/**\n * @class\n * @description Contact search module\n */\nexport default class ContactSearch extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Auth} params.auth - auth module instance\n   * @param {Storage} params.storage - storage module instance\n   * @param {String} params.storageKey - storage key for storage module default \"contactSearchCache\"\n   * @param {Number} params.minimalSearchLength - minimal search text length, default 3 characters\n   * @param {Number} params.ttl - timestamp of local cache, default 5 mins\n   */\n  constructor({\n    auth,\n    storage,\n    storageKey = 'contactSearchCache',\n    minimalSearchLength = DefaultMinimalSearchLength,\n    contactListPageSize = DefaultContactListPageSize,\n    ttl = 5 * 60 * 1000, // 5 minutes\n    ...options,\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = auth;\n    this._storage = storage;\n    this._storageKey = storageKey;\n    this._minimalSearchLength = minimalSearchLength;\n    this._contactListPageSize = contactListPageSize;\n    this._ttl = ttl;\n    this._searchSources = new Map();\n    this._searchSourcesFormat = new Map();\n    this._searchSourcesCheck = new Map();\n    if (this._storage) {\n      this._reducer = getContactSearchReducer(this.actionTypes);\n      this._storage.registerReducer({\n        key: this._storageKey,\n        reducer: getCacheReducer(this.actionTypes)\n      });\n    } else {\n      this._reducer = getContactSearchReducer(this.actionTypes, {\n        cache: getCacheReducer(this.actionTypes),\n      });\n    }\n\n    this.addSelector(\n      'contactSourceNames',\n      () => this._searchSources.size,\n      () => {\n        const names = [AllContactSourceName];\n        for (const sourceName of this._searchSources.keys()) {\n          names.push(sourceName);\n        }\n        return names;\n      }\n    );\n\n    this.addSelector(\n      'contactGroups',\n      () => this.searching && this.searching.result,\n      (result) => {\n        const pageSize = this._contactListPageSize;\n        const pageNumber = this.searchCriteria.pageNumber || 1;\n        const count = pageNumber * pageSize;\n        let items = uniqueContactItems(result);\n        items = sortContactItemsByName(items);\n        items = items.slice(0, count);\n        const groups = groupByFirstLetterOfName(items);\n        return groups;\n      }\n    );\n  }\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this._initModuleStatus();\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._auth.loginStatus === loginStatus.loggedIn &&\n      (!this._storage || this._storage.ready) &&\n      this._readyCheck() &&\n      !this.ready\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        this._auth.loginStatus !== loginStatus.loggedIn ||\n        (this._storage && !this._storage.ready)\n      ) &&\n      this.ready\n    );\n  }\n\n  _initModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n    });\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  addSearchSource({ sourceName, searchFn, readyCheckFn, formatFn }) {\n    if (!sourceName) {\n      throw new Error('ContactSearch: \"sourceName\" is required.');\n    }\n    if (this._searchSources.has(sourceName)) {\n      throw new Error(`ContactSearch: A search source named \"${sourceName}\" already exists`);\n    }\n    if (this._searchSourcesCheck.has(sourceName)) {\n      throw new Error(`ContactSearch: A search source check named \"${sourceName}\" already exists`);\n    }\n    if (this._searchSourcesFormat.has(sourceName)) {\n      throw new Error(`ContactSearch: A search source format named \"${sourceName}\" already exists`);\n    }\n    if (typeof searchFn !== 'function') {\n      throw new Error('ContactSearch: searchFn must be a function');\n    }\n    if (typeof readyCheckFn !== 'function') {\n      throw new Error('ContactSearch: readyCheckFn must be a function');\n    }\n    if (typeof formatFn !== 'function') {\n      throw new Error('ContactSearch: formatFn must be a function');\n    }\n    this._searchSources.set(sourceName, searchFn);\n    this._searchSourcesFormat.set(sourceName, formatFn);\n    this._searchSourcesCheck.set(sourceName, readyCheckFn);\n  }\n\n  @proxify\n  async search({ searchString }) {\n    if (!this.ready || (searchString.length < this._minimalSearchLength)) {\n      this.store.dispatch({\n        type: this.actionTypes.prepareSearch,\n      });\n      return;\n    }\n\n    if (this.searching.searchString === searchString) {\n      return;\n    }\n\n    const searchOnSources = Array.from(this._searchSources.keys());\n    for (const sourceName of searchOnSources) {\n      await this._searchSource({\n        searchOnSources,\n        sourceName,\n        searchString,\n      });\n    }\n  }\n\n  @proxify\n  async searchPlus({ sourceName, searchText, pageNumber }) {\n    if (!this.ready) {\n      this.store.dispatch({\n        type: this.actionTypes.prepareSearch,\n      });\n      return;\n    }\n\n    this.store.dispatch({\n      type: this.actionTypes.updateSearchCriteria,\n      sourceName,\n      searchText,\n      pageNumber,\n    });\n\n    clearTimeout(this._searchTimeoutId);\n    this._searchTimeoutId = setTimeout(async () => {\n      const searchOnSources = (!sourceName || sourceName === AllContactSourceName) ?\n        Array.from(this._searchSources.keys()) :\n        [sourceName];\n      for (const source of searchOnSources) {\n        await this._searchSource({\n          searchOnSources,\n          sourceName: source,\n          searchString: searchText,\n        });\n      }\n    }, 100);\n  }\n\n  @proxify\n  async _searchSource({ searchOnSources, sourceName, searchString }) {\n    this.store.dispatch({\n      type: this.actionTypes.search,\n    });\n    try {\n      let entities = null;\n      entities = this._searchFromCache({ sourceName, searchString });\n      if (entities) {\n        this._loadSearching({ searchOnSources, searchString, entities });\n        return;\n      }\n      entities = await this._searchSources.get(sourceName)({\n        searchString,\n      });\n      entities = this._searchSourcesFormat.get(sourceName)(entities);\n      this._loadSearching({ searchOnSources, searchString, entities });\n      this._saveSearching({ sourceName, searchString, entities });\n    } catch (error) {\n      this._onSearchError();\n    }\n  }\n\n  _searchFromCache({ sourceName, searchString }) {\n    const key = `${sourceName}-${searchString}`;\n    const searching = this.cache && this.cache.contactSearch && this.cache.contactSearch[key];\n    const now = Date.now();\n    if (searching && (now - searching.timestamp) < this._ttl) {\n      return searching.entities;\n    }\n    return null;\n  }\n\n  _readyCheck() {\n    for (const sourceName of this._searchSourcesCheck.keys()) {\n      if (!this._searchSourcesCheck.get(sourceName)()) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  _onSearchError() {\n    this.store.dispatch({\n      type: this.actionTypes.searchError,\n    });\n  }\n\n  _loadSearching({ searchOnSources, searchString, entities }) {\n    this.store.dispatch({\n      type: this.actionTypes.searchSuccess,\n      searchOnSources,\n      searchString,\n      entities,\n    });\n  }\n\n  _saveSearching({ sourceName, searchString, entities }) {\n    this.store.dispatch({\n      type: this.actionTypes.save,\n      sourceName,\n      searchString,\n      entities,\n      ttl: this._ttl,\n    });\n  }\n\n  get cache() {\n    return this._storage ?\n      this._storage.getItem(this._storageKey) :\n      this.state.cache;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get searchStatus() {\n    return this.state.searchStatus;\n  }\n\n  get searching() {\n    return this.state.searching;\n  }\n\n  get searchResult() {\n    return this.searching ? this.searching.result : [];\n  }\n\n  get searchCriteria() {\n    return this.state.searchCriteria;\n  }\n\n  get contactSourceNames() {\n    return this._selectors.contactSourceNames();\n  }\n\n  get contactGroups() {\n    return this._selectors.contactGroups();\n  }\n}\n"]}