{"version":3,"sources":["modules/ContactSearch/getContactSearchReducer.js"],"names":["getContactSearchStatusReducer","getSearchingReducer","getContactSearchReducer","types","state","idle","type","search","searching","prepareSearch","searchSuccess","searchError","initialState","searchString","result","entities","concat","reset","reducers","status","searchStatus"],"mappings":";;;;;;;;;;QAIgBA,6B,GAAAA,6B;QAiBAC,mB,GAAAA,mB;kBA0BQC,uB;;AA/CxB;;AACA;;;;AACA;;;;;;AAEO,SAASF,6BAAT,CAAuCG,KAAvC,EAA8C;AACnD,SAAO,YAAgD;AAAA,QAA/CC,KAA+C,uEAAvC,8BAAoBC,IAAmB;AAAA;AAAA,QAAXC,IAAW,QAAXA,IAAW;;AACrD,YAAQA,IAAR;AACE,WAAKH,MAAMI,MAAX;AACE,eAAO,8BAAoBC,SAA3B;;AAEF,WAAKL,MAAMM,aAAX;AACA,WAAKN,MAAMO,aAAX;AACA,WAAKP,MAAMQ,WAAX;AACE,eAAO,8BAAoBN,IAA3B;;AAEF;AACE,eAAOD,KAAP;AAVJ;AAYD,GAbD;AAcD;;AAEM,SAASH,mBAAT,CAA6BE,KAA7B,EAAoC;AACzC,MAAMS,eAAe,EAAEC,cAAc,EAAhB,EAAoBC,QAAQ,EAA5B,EAArB;AACA,SAAO,YAA4D;AAAA,QAA3DV,KAA2D,uEAAnDQ,YAAmD;AAAA;AAAA,QAAnCN,IAAmC,SAAnCA,IAAmC;AAAA,QAA7BO,YAA6B,SAA7BA,YAA6B;AAAA,QAAfE,QAAe,SAAfA,QAAe;;AACjE,YAAQT,IAAR;AACE,WAAKH,MAAMO,aAAX;AACE,YAAIN,MAAMS,YAAN,KAAuBA,YAA3B,EAAyC;AACvC,4CACKT,KADL;AAEEU,oBAAQV,MAAMU,MAAN,CAAaE,MAAb,CAAoBD,QAApB;AAFV;AAID;AACD,eAAO;AACLF,oCADK;AAELC,kBAAQC;AAFH,SAAP;AAIF,WAAKZ,MAAMM,aAAX;AACA,WAAKN,MAAMc,KAAX;AACA,WAAKd,MAAMQ,WAAX;AACE,eAAOC,YAAP;AACF,WAAKT,MAAMI,MAAX;AACA;AACE,eAAOH,KAAP;AAlBJ;AAoBD,GArBD;AAsBD;;AAEc,SAASF,uBAAT,CAAiCC,KAAjC,EAAuD;AAAA,MAAfe,QAAe,uEAAJ,EAAI;;AACpE,SAAO,uDACFA,QADE;AAELC,YAAQ,sCAAuBhB,KAAvB,CAFH;AAGLiB,kBAAcpB,8BAA8BG,KAA9B,CAHT;AAILK,eAAWP,oBAAoBE,KAApB;AAJN,KAAP;AAMD","file":"getContactSearchReducer.js","sourcesContent":["import { combineReducers } from 'redux';\nimport getModuleStatusReducer from '../../lib/getModuleStatusReducer';\nimport contactSearchStatus from './contactSearchStatus';\n\nexport function getContactSearchStatusReducer(types) {\n  return (state = contactSearchStatus.idle, { type }) => {\n    switch (type) {\n      case types.search:\n        return contactSearchStatus.searching;\n\n      case types.prepareSearch:\n      case types.searchSuccess:\n      case types.searchError:\n        return contactSearchStatus.idle;\n\n      default:\n        return state;\n    }\n  };\n}\n\nexport function getSearchingReducer(types) {\n  const initialState = { searchString: '', result: [] };\n  return (state = initialState, { type, searchString, entities }) => {\n    switch (type) {\n      case types.searchSuccess:\n        if (state.searchString === searchString) {\n          return {\n            ...state,\n            result: state.result.concat(entities)\n          };\n        }\n        return {\n          searchString,\n          result: entities\n        };\n      case types.prepareSearch:\n      case types.reset:\n      case types.searchError:\n        return initialState;\n      case types.search:\n      default:\n        return state;\n    }\n  };\n}\n\nexport default function getContactSearchReducer(types, reducers = {}) {\n  return combineReducers({\n    ...reducers,\n    status: getModuleStatusReducer(types),\n    searchStatus: getContactSearchStatusReducer(types),\n    searching: getSearchingReducer(types),\n  });\n}\n"]}