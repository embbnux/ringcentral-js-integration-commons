{"version":3,"sources":["modules/AccountExtension/index.js"],"names":["extensionRegExp","DEFAULT_TTL","isEssential","ext","extensionNumber","status","type","simplifyExtensionData","name","id","AccountExtension","client","ttl","options","actionTypes","getDataReducer","getTimestampReducer","subscriptionFilters","accountExtension","subscriptionHandler","message","test","event","body","extensions","item","eventType","store","dispatch","delete","timestamp","Date","now","_client","account","extension","get","extensionData","isAvailableExtension","add","data","fetchFunction","list","params","filter","map","addSelector","availableExtensions","find","_selectors"],"mappings":"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","file":"index.js","sourcesContent":["import 'core-js/fn/array/find';\nimport DataFetcher from '../../lib/DataFetcher';\nimport fetchList from '../../lib/fetchList';\n\nimport actionTypes from './actionTypes';\nimport {\n  getDataReducer,\n  getTimestampReducer,\n} from './getAccountExtensionReducer';\nimport subscriptionFilters from '../../enums/subscriptionFilters';\n\nconst extensionRegExp = /.*\\/extension$/;\nconst DEFAULT_TTL = 24 * 60 * 60 * 1000;\n\n/**\n * @function\n * @description Determines whether an extension data is worth caching\n * @param {Object} ext - extension data\n * @return {Boolean}\n */\nfunction isEssential(ext) {\n  return ext.extensionNumber &&\n    ext.extensionNumber !== '' &&\n    ext.status === 'Enabled' &&\n    (ext.type === 'DigitalUser' || ext.type === 'User');\n}\n/**\n * @function\n * @description Returns a simplified extension data for caching to reducer storage use\n * @param {Object} ext - extension data\n * @return {Object}\n */\nfunction simplifyExtensionData(ext) {\n  return {\n    ext: ext.extensionNumber,\n    name: ext.name,\n    id: ext.id,\n  };\n}\n\nexport default class AccountExtension extends DataFetcher {\n  constructor({\n    client,\n    ttl = DEFAULT_TTL,\n    ...options\n  }) {\n    super({\n      ...options,\n      name: 'accountExtension',\n      client,\n      ttl,\n      actionTypes,\n      getDataReducer,\n      getTimestampReducer,\n      subscriptionFilters: [subscriptionFilters.accountExtension],\n      subscriptionHandler: async (message) => {\n        if (\n          message &&\n          extensionRegExp.test(message.event) &&\n          message.body &&\n          message.body.extensions\n        ) {\n          for (const item of message.body.extensions) {\n            const { id, eventType } = item;\n            if (eventType === 'Delete') {\n              this.store.dispatch({\n                type: this.actionTypes.delete,\n                id,\n                timestamp: Date.now(),\n              });\n            } else if (eventType === 'Create' || eventType === 'Update') {\n              try {\n                const extensionData = await this._client.account().extension(id).get();\n                if (isEssential(extensionData)) {\n                  if (this.isAvailableExtension(extensionData.extensionNumber)) {\n                    this.store.dispatch({\n                      type: this.actionTypes.add,\n                      data: simplifyExtensionData(extensionData),\n                      timestamp: Date.now(),\n                    });\n                  }\n                } else {\n                  // if an extension was updated to be not essential anymore\n                  // eg. not assigned an extension number\n                  this.store.dispatch({\n                    type: this.actionTypes.delete,\n                    id,\n                    timestamp: Date.now(),\n                  });\n                }\n              } catch (error) {\n                /* falls through */\n              }\n            } else {\n              // console.warn('unexpect notification eventType:', eventType);\n            }\n          }\n        }\n      },\n      fetchFunction: async () => (await fetchList(params => (\n        this._client.account().extension().list(params)\n      ))).filter(isEssential).map(simplifyExtensionData),\n    });\n\n    this.addSelector(\n      'availableExtensions',\n      () => this.data,\n      data => data || [],\n    );\n  }\n\n  get availableExtensions() {\n    return this._selectors.availableExtensions();\n  }\n\n  isAvailableExtension(extensionNumber) {\n    return !!this.availableExtensions.find(item => item.ext === extensionNumber);\n  }\n}\n"]}