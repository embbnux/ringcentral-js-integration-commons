{"version":3,"sources":["modules/AccountExtension/index.js"],"names":["extensionRegExp","DEFAULT_TTL","AccountExtension","client","ttl","options","name","actionTypes","getDataReducer","getTimestampReducer","subscriptionFilters","accountExtension","subscriptionHandler","message","_subscriptionHandleFn","fetchFunction","_client","account","extension","list","params","filter","map","addSelector","data","test","event","body","extensions","item","_processExtension","extensionId","eventType","id","parseInt","_deleteExtension","_fetchExtensionData","extensionData","_addOrDeleteExtension","isAvailableExtension","extensionNumber","essential","_addExtension","store","dispatch","type","add","timestamp","Date","now","delete","get","availableExtensions","find","ext","_selectors"],"mappings":"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","file":"index.js","sourcesContent":["import 'core-js/fn/array/find';\nimport DataFetcher from '../../lib/DataFetcher';\nimport fetchList from '../../lib/fetchList';\n\nimport actionTypes from './actionTypes';\nimport {\n  getDataReducer,\n  getTimestampReducer,\n} from './getAccountExtensionReducer';\nimport {\n  isEssential,\n  simplifyExtensionData,\n} from './accountExtensionHelper';\nimport subscriptionFilters from '../../enums/subscriptionFilters';\nimport proxify from '../../lib/proxy/proxify';\n\nconst extensionRegExp = /.*\\/extension$/;\nconst DEFAULT_TTL = 24 * 60 * 60 * 1000;\n\nexport default class AccountExtension extends DataFetcher {\n  constructor({\n    client,\n    ttl = DEFAULT_TTL,\n    ...options\n  }) {\n    super({\n      ...options,\n      name: 'accountExtension',\n      client,\n      ttl,\n      actionTypes,\n      getDataReducer,\n      getTimestampReducer,\n      subscriptionFilters: [subscriptionFilters.accountExtension],\n      subscriptionHandler: async (message) => {\n        this._subscriptionHandleFn(message);\n      },\n      fetchFunction: async () => (await fetchList(params => (\n        this._client.account().extension().list(params)\n      ))).filter(isEssential).map(simplifyExtensionData),\n    });\n\n    this.addSelector(\n      'availableExtensions',\n      () => this.data,\n      data => data || [],\n    );\n  }\n\n  async _subscriptionHandleFn(message) {\n    if (\n      message &&\n      extensionRegExp.test(message.event) &&\n      message.body &&\n      message.body.extensions\n    ) {\n      for (const item of message.body.extensions) {\n        await this._processExtension(item);\n      }\n    }\n  }\n  async _processExtension(item) {\n    const { extensionId, eventType } = item;\n    const id = parseInt(extensionId, 10);\n    if (eventType === 'Delete') {\n      this._deleteExtension(id);\n    } else if (eventType === 'Create' || eventType === 'Update') {\n      try {\n        const extensionData = await this._fetchExtensionData(id);\n        this._addOrDeleteExtension(isEssential(extensionData),\n          this.isAvailableExtension(extensionData.extensionNumber), extensionData, id);\n      } catch (error) {\n        /* falls through */\n      }\n    } else {\n      // console.warn('unexpect notification eventType:', eventType);\n    }\n  }\n\n  _addOrDeleteExtension(essential, isAvailableExtension, extensionData, extensionId) {\n    if (essential && !isAvailableExtension) { // && !isAvailableExtension\n      this._addExtension(extensionData);\n    } else if (!essential && isAvailableExtension) {\n      // if an extension was updated to be not essential anymore\n      // eg. not assigned an extension number\n      this._deleteExtension(extensionId);\n    }\n  }\n\n  _addExtension(data) {\n    this.store.dispatch({\n      type: this.actionTypes.add,\n      data: simplifyExtensionData(data),\n      timestamp: Date.now(),\n    });\n  }\n\n  _deleteExtension(id) {\n    this.store.dispatch({\n      type: this.actionTypes.delete,\n      id,\n      timestamp: Date.now(),\n    });\n  }\n\n  @proxify\n  async _fetchExtensionData(id) {\n    return this._client.account().extension(id).get();\n  }\n\n  get availableExtensions() {\n    return this._selectors.availableExtensions();\n  }\n\n  isAvailableExtension(extensionNumber) {\n    return !!this.availableExtensions.find(item => item.ext === extensionNumber);\n  }\n}\n"]}