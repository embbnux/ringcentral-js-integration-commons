{"version":3,"sources":["modules/Presence/index.js"],"names":["presenceEndPoint","UPDATE_DELAY_TIME","Presence","auth","client","storage","subscription","actionTypes","updateDelayTime","options","_subscriptionHandler","message","test","event","body","store","dispatch","type","notification","_auth","_client","_subscription","_storage","_lastMessage","_updateDelayTime","_delayTimeoutId","_lastNotDisturbDndStatusStorageKey","_reducer","registerReducer","key","reducer","lastNotDisturbDndStatus","subscribe","loginStatus","loggedIn","ready","status","pending","init","fetch","initSuccess","resetSuccess","ownerId","account","extension","presence","get","data","fetchSuccess","lastDndStatus","dndStatus","_promise","fetchError","error","_fetch","params","platform","service","put","response","json","updateSuccess","updateError","userStatusParams","userStatus","takeAllCalls","doNotAcceptDepartmentCalls","presenceStatus","available","_getUpdateStatusParams","_update","busy","doNotAcceptAnyCalls","offline","state","getItem"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport getPresenceReducer, {\n  getLastNotDisturbDndStatusReducer\n} from './getPresenceReducer';\nimport presenceActionTypes from './actionTypes';\nimport loginStatus from '../Auth/loginStatus';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport dndStatus from './dndStatus';\nimport presenceStatus from './presenceStatus';\nimport proxify from '../../lib/proxy/proxify';\n\nconst presenceEndPoint = /.*\\/presence(\\?.*)?/;\n\nconst UPDATE_DELAY_TIME = 1000;\n\nexport default class Presence extends RcModule {\n  constructor({\n    auth,\n    client,\n    storage,\n    subscription,\n    actionTypes = presenceActionTypes,\n    updateDelayTime = UPDATE_DELAY_TIME,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = auth;\n    this._client = client;\n    this._subscription = subscription;\n    this._storage = storage;\n    this._lastMessage = null;\n\n    this._updateDelayTime = updateDelayTime;\n    this._delayTimeoutId = null;\n    this._lastNotDisturbDndStatusStorageKey = 'lastNotDisturbDndStatus';\n    if (this._storage) {\n      this._reducer = getPresenceReducer(this.actionTypes);\n      this._storage.registerReducer({\n        key: this._lastNotDisturbDndStatusStorageKey,\n        reducer: getLastNotDisturbDndStatusReducer(this.actionTypes)\n      });\n    } else {\n      this._reducer = getPresenceReducer(this.actionTypes, {\n        lastNotDisturbDndStatus: getLastNotDisturbDndStatusReducer(this.actionTypes),\n      });\n    }\n  }\n\n  _subscriptionHandler = (message) => {\n    if (message && presenceEndPoint.test(message.event) && message.body) {\n      this.store.dispatch({\n        type: this.actionTypes.notification,\n        ...message.body,\n      });\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(async () => {\n      if (\n        this._auth.loginStatus === loginStatus.loggedIn &&\n        this._subscription.ready &&\n        this.status === moduleStatuses.pending\n      ) {\n        this.store.dispatch({\n          type: this.actionTypes.init,\n        });\n        await this.fetch();\n        this._subscription.subscribe('/account/~/extension/~/presence');\n        this.store.dispatch({\n          type: this.actionTypes.initSuccess,\n        });\n      } else if (\n        (this._auth.loginStatus !== loginStatus.loggedIn ||\n          !this._subscription.ready) &&\n        this.ready\n      ) {\n        this.store.dispatch({\n          type: this.actionTypes.resetSuccess,\n        });\n      } else if (\n        this.ready &&\n        this._subscription.ready &&\n        this._subscription.message &&\n        this._subscription.message !== this._lastMessage\n      ) {\n        this._lastMessage = this._subscription.message;\n        this._subscriptionHandler(this._lastMessage);\n      }\n    });\n  }\n  @proxify\n  async _fetch() {\n    this.store.dispatch({\n      type: this.actionTypes.fetch,\n    });\n    try {\n      const ownerId = this._auth.ownerId;\n      const data = await this._client.account().extension().presence().get();\n      if (ownerId === this._auth.ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchSuccess,\n          ...data,\n          lastDndStatus: this.dndStatus,\n        });\n      }\n      this._promise = null;\n    } catch (error) {\n      this._promise = null;\n      this.store.dispatch({\n        type: this.actionTypes.fetchError,\n        error,\n      });\n      throw error;\n    }\n  }\n  @proxify\n  async fetch() {\n    if (!this._promise) {\n      this._promise = this._fetch();\n    }\n    return this._promise;\n  }\n  @proxify\n  async _update(params) {\n    try {\n      const ownerId = this._auth.ownerId;\n      const platform = this._client.service.platform();\n      const response = await platform.put(\n        '/account/~/extension/~/presence',\n        params\n      );\n      const data = response.json();\n      if (ownerId === this._auth.ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.updateSuccess,\n          ...data,\n          lastDndStatus: this.dndStatus,\n        });\n      }\n    } catch (error) {\n      this.store.dispatch({\n        type: this.actionTypes.updateError,\n        error,\n      });\n      throw error;\n    }\n  }\n\n  _getUpdateStatusParams(userStatusParams) {\n    const params = {\n      dndStatus: this.dndStatus,\n      userStatus: userStatusParams,\n    };\n    if (\n      params.dndStatus !== dndStatus.takeAllCalls &&\n      params.dndStatus !== dndStatus.doNotAcceptDepartmentCalls\n    ) {\n      params.dndStatus = this.lastNotDisturbDndStatus || dndStatus.takeAllCalls;\n    }\n    return params;\n  }\n  async setAvailable() {\n    if (this.presenceStatus === presenceStatus.available) {\n      return;\n    }\n    const params = this._getUpdateStatusParams(presenceStatus.available);\n    await this._update(params);\n  }\n  async setBusy() {\n    if (\n      this.presenceStatus === presenceStatus.busy &&\n      this.dndStatus !== dndStatus.doNotAcceptAnyCalls\n    ) {\n      return;\n    }\n    const params = this._getUpdateStatusParams(presenceStatus.busy);\n    await this._update(params);\n  }\n\n  async setDoNotDisturb() {\n    if (\n      this.presenceStatus === presenceStatus.busy &&\n      this.dndStatus === dndStatus.doNotAcceptAnyCalls\n    ) {\n      return;\n    }\n    const params = {\n      dndStatus: dndStatus.doNotAcceptAnyCalls,\n      userStatus: presenceStatus.busy,\n    };\n    await this._update(params);\n  }\n\n  async setInvisible() {\n    if (this.presenceStatus === presenceStatus.offline) {\n      return;\n    }\n    const params = this._getUpdateStatusParams(presenceStatus.offline);\n    await this._update(params);\n  }\n\n  async toggleAcceptCallQueueCalls() {\n    const params = {\n      userStatus: this.userStatus,\n    };\n    if (this.dndStatus === dndStatus.takeAllCalls) {\n      params.dndStatus = dndStatus.doNotAcceptDepartmentCalls;\n    } else if (this.dndStatus === dndStatus.doNotAcceptDepartmentCalls) {\n      params.dndStatus = dndStatus.takeAllCalls;\n    }\n    if (params.dndStatus) {\n      await this._update(params);\n    }\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get dndStatus() {\n    return this.state.dndStatus;\n  }\n\n  get lastNotDisturbDndStatus() {\n    if (this._storage) {\n      return this._storage.getItem(this._lastNotDisturbDndStatusStorageKey);\n    }\n    return this.state.lastNotDisturbDndStatus;\n  }\n\n  get userStatus() {\n    return this.state.userStatus;\n  }\n\n  get message() {\n    return this.state.message;\n  }\n\n  get presenceStatus() {\n    return this.state.presenceStatus;\n  }\n}\n"]}