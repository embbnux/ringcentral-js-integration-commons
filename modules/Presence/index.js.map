{"version":3,"sources":["modules/Presence/index.js"],"names":["presenceEndPoint","UPDATE_DELAY_TIME","Presence","auth","client","subscription","actionTypes","updateDelayTime","options","_subscriptionHandler","message","test","event","body","store","dispatch","type","notification","_auth","_client","_subscription","_reducer","_lastMessage","_updateDelayTime","_delayTimeoutId","subscribe","loginStatus","loggedIn","ready","status","pending","init","fetch","initSuccess","resetSuccess","ownerId","account","extension","presence","get","data","fetchSuccess","_promise","fetchError","error","_fetch","params","platform","service","put","response","json","updateSuccess","updateError","userStatusParams","dndStatus","userStatus","takeAllCalls","doNotAcceptDepartmentCalls","presenceStatus","available","_getUpdateStatusParams","_update","busy","doNotAcceptAnyCalls","offline","state"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport getPresenceReducer from './getPresenceReducer';\nimport presenceActionTypes from './actionTypes';\nimport loginStatus from '../Auth/loginStatus';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport dndStatus from './dndStatus';\nimport presenceStatus from './presenceStatus';\nimport proxify from '../../lib/proxy/proxify';\n\nconst presenceEndPoint = /.*\\/presence(\\?.*)?/;\n\nconst UPDATE_DELAY_TIME = 1000;\n\nexport default class Presence extends RcModule {\n  constructor({\n    auth,\n    client,\n    subscription,\n    actionTypes = presenceActionTypes,\n    updateDelayTime = UPDATE_DELAY_TIME,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = auth;\n    this._client = client;\n    this._subscription = subscription;\n\n    this._reducer = getPresenceReducer(this.actionTypes);\n    this._lastMessage = null;\n\n    this._updateDelayTime = updateDelayTime;\n    this._delayTimeoutId = null;\n  }\n\n  _subscriptionHandler = (message) => {\n    if (message && presenceEndPoint.test(message.event) && message.body) {\n      this.store.dispatch({\n        type: this.actionTypes.notification,\n        ...message.body,\n      });\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(async () => {\n      if (\n        this._auth.loginStatus === loginStatus.loggedIn &&\n        this._subscription.ready &&\n        this.status === moduleStatuses.pending\n      ) {\n        this.store.dispatch({\n          type: this.actionTypes.init,\n        });\n        await this.fetch();\n        this._subscription.subscribe('/account/~/extension/~/presence');\n        this.store.dispatch({\n          type: this.actionTypes.initSuccess,\n        });\n      } else if (\n        (this._auth.loginStatus !== loginStatus.loggedIn ||\n          !this._subscription.ready) &&\n        this.ready\n      ) {\n        this.store.dispatch({\n          type: this.actionTypes.resetSuccess,\n        });\n      } else if (\n        this.ready &&\n        this._subscription.ready &&\n        this._subscription.message &&\n        this._subscription.message !== this._lastMessage\n      ) {\n        this._lastMessage = this._subscription.message;\n        this._subscriptionHandler(this._lastMessage);\n      }\n    });\n  }\n  @proxify\n  async _fetch() {\n    this.store.dispatch({\n      type: this.actionTypes.fetch,\n    });\n    try {\n      const ownerId = this._auth.ownerId;\n      const data = await this._client.account().extension().presence().get();\n      if (ownerId === this._auth.ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchSuccess,\n          ...data,\n        });\n      }\n      this._promise = null;\n    } catch (error) {\n      this._promise = null;\n      this.store.dispatch({\n        type: this.actionTypes.fetchError,\n        error,\n      });\n      throw error;\n    }\n  }\n  @proxify\n  async fetch() {\n    if (!this._promise) {\n      this._promise = this._fetch();\n    }\n    return this._promise;\n  }\n  @proxify\n  async _update(params) {\n    try {\n      const ownerId = this._auth.ownerId;\n      const platform = this._client.service.platform();\n      const response = await platform.put(\n        '/account/~/extension/~/presence',\n        params\n      );\n      const data = response.json();\n      if (ownerId === this._auth.ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.updateSuccess,\n          ...data,\n        });\n      }\n    } catch (error) {\n      this.store.dispatch({\n        type: this.actionTypes.updateError,\n        error,\n      });\n      throw error;\n    }\n  }\n\n  _getUpdateStatusParams(userStatusParams) {\n    const params = {\n      dndStatus: this.dndStatus,\n      userStatus: userStatusParams,\n    };\n    if (\n      params.dndStatus !== dndStatus.takeAllCalls &&\n      params.dndStatus !== dndStatus.doNotAcceptDepartmentCalls\n    ) {\n      params.dndStatus = dndStatus.takeAllCalls;\n    }\n    return params;\n  }\n  async setAvailable() {\n    if (this.presenceStatus === presenceStatus.available) {\n      return;\n    }\n    const params = this._getUpdateStatusParams(presenceStatus.available);\n    await this._update(params);\n  }\n  async setBusy() {\n    if (\n      this.presenceStatus === presenceStatus.busy &&\n      this.dndStatus !== dndStatus.doNotAcceptAnyCalls\n    ) {\n      return;\n    }\n    const params = this._getUpdateStatusParams(presenceStatus.busy);\n    await this._update(params);\n  }\n\n  async setDoNotDisturb() {\n    if (\n      this.presenceStatus === presenceStatus.busy &&\n      this.dndStatus === dndStatus.doNotAcceptAnyCalls\n    ) {\n      return;\n    }\n    const params = {\n      dndStatus: dndStatus.doNotAcceptAnyCalls,\n      userStatus: presenceStatus.busy,\n    };\n    await this._update(params);\n  }\n\n  async setInvisible() {\n    if (this.presenceStatus === presenceStatus.offline) {\n      return;\n    }\n    const params = this._getUpdateStatusParams(presenceStatus.offline);\n    await this._update(params);\n  }\n\n  async toggleAcceptCallQueueCalls() {\n    const params = {\n      userStatus: this.userStatus,\n    };\n    if (this.dndStatus === dndStatus.takeAllCalls) {\n      params.dndStatus = dndStatus.doNotAcceptDepartmentCalls;\n    } else if (this.dndStatus === dndStatus.doNotAcceptDepartmentCalls) {\n      params.dndStatus = dndStatus.takeAllCalls;\n    }\n    if (params.dndStatus) {\n      await this._update(params);\n    }\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get dndStatus() {\n    return this.state.dndStatus;\n  }\n\n  get userStatus() {\n    return this.state.userStatus;\n  }\n\n  get message() {\n    return this.state.message;\n  }\n\n  get presenceStatus() {\n    return this.state.presenceStatus;\n  }\n}\n"]}