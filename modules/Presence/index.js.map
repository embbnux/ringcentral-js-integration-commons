{"version":3,"sources":["modules/Presence/index.js"],"names":["presenceEndPoint","UPDATE_DELAY_TIME","Presence","auth","client","subscription","actionTypes","updateDelayTime","options","_subscriptionHandler","message","test","event","body","store","dispatch","type","notification","_auth","_client","_subscription","_reducer","_lastMessage","setAvailable","bind","setBusy","setDoNotDisturb","setInvisible","_updateDelayTime","_delayTimeoutId","subscribe","loginStatus","loggedIn","ready","status","pending","init","fetch","initSuccess","resetSuccess","ownerId","account","extension","presence","get","data","fetchSuccess","_promise","fetchError","error","_fetch","params","oldStatus","dndStatus","userStatus","update","_delayUpdate","_clearDelayTimeout","setTimeout","platform","service","put","response","json","updateSuccess","updateError","console","clearTimeout","userStatusParams","takeAllCalls","doNotAcceptDepartmentCalls","presenceStatus","available","_getUpdateStatusParams","_update","busy","doNotAcceptAnyCalls","offline","state"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport getPresenceReducer from './getPresenceReducer';\nimport presenceActionTypes from './actionTypes';\nimport loginStatus from '../Auth/loginStatus';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport dndStatus from './dndStatus';\nimport presenceStatus from './presenceStatus';\n\nconst presenceEndPoint = /.*\\/presence(\\?.*)?/;\n\nconst UPDATE_DELAY_TIME = 1000;\n\nexport default class Presence extends RcModule {\n  constructor({\n    auth,\n    client,\n    subscription,\n    actionTypes = presenceActionTypes,\n    updateDelayTime = UPDATE_DELAY_TIME,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = auth;\n    this._client = client;\n    this._subscription = subscription;\n\n    this._reducer = getPresenceReducer(this.actionTypes);\n    this._lastMessage = null;\n\n    this.setAvailable = this.setAvailable.bind(this);\n    this.setBusy = this.setBusy.bind(this);\n    this.setDoNotDisturb = this.setDoNotDisturb.bind(this);\n    this.setInvisible = this.setInvisible.bind(this);\n    this._updateDelayTime = updateDelayTime;\n    this._delayTimeoutId = null;\n  }\n\n  _subscriptionHandler = (message) => {\n    if (message && presenceEndPoint.test(message.event) && message.body) {\n      this.store.dispatch({\n        type: this.actionTypes.notification,\n        ...message.body,\n      });\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(async () => {\n      if (\n        this._auth.loginStatus === loginStatus.loggedIn &&\n        this._subscription.ready &&\n        this.status === moduleStatuses.pending\n      ) {\n        this.store.dispatch({\n          type: this.actionTypes.init,\n        });\n        await this.fetch();\n        this._subscription.subscribe('/account/~/extension/~/presence');\n        this.store.dispatch({\n          type: this.actionTypes.initSuccess,\n        });\n      } else if (\n        (this._auth.loginStatus !== loginStatus.loggedIn ||\n          !this._subscription.ready) &&\n        this.ready\n      ) {\n        this.store.dispatch({\n          type: this.actionTypes.resetSuccess,\n        });\n      } else if (\n        this.ready &&\n        this._subscription.ready &&\n        this._subscription.message &&\n        this._subscription.message !== this._lastMessage\n      ) {\n        this._lastMessage = this._subscription.message;\n        this._subscriptionHandler(this._lastMessage);\n      }\n    });\n  }\n\n  async _fetch() {\n    this.store.dispatch({\n      type: this.actionTypes.fetch,\n    });\n    try {\n      const ownerId = this._auth.ownerId;\n      const data = await this._client.account().extension().presence().get();\n      if (ownerId === this._auth.ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchSuccess,\n          ...data,\n        });\n      }\n      this._promise = null;\n    } catch (error) {\n      this._promise = null;\n      this.store.dispatch({\n        type: this.actionTypes.fetchError,\n        error,\n      });\n      throw error;\n    }\n  }\n\n  fetch() {\n    if (!this._promise) {\n      this._promise = this._fetch();\n    }\n    return this._promise;\n  }\n\n  async _update(params) {\n    const oldStatus = {\n      dndStatus: this.dndStatus,\n      userStatus: this.userStatus,\n    };\n    this.store.dispatch({\n      type: this.actionTypes.update,\n      ...params,\n    });\n    await this._delayUpdate(params, oldStatus);\n  }\n\n  async _delayUpdate(params, oldStatus) {\n    this._clearDelayTimeout();\n    this._delayTimeoutId = setTimeout(async () => {\n      this._delayTimeoutId = null;\n      try {\n        const ownerId = this._auth.ownerId;\n        const platform = this._client.service.platform();\n        const response = await platform.put(\n          '/account/~/extension/~/presence',\n          params\n        );\n        const data = response.json();\n        if (ownerId === this._auth.ownerId) {\n          this.store.dispatch({\n            type: this.actionTypes.updateSuccess,\n            ...data,\n          });\n        }\n      } catch (error) {\n        this.store.dispatch({\n          type: this.actionTypes.updateError,\n          error,\n          ...oldStatus,\n        });\n        console.error(error);\n      }\n    }, this._updateDelayTime);\n  }\n\n  _clearDelayTimeout() {\n    if (this._delayTimeoutId) clearTimeout(this._delayTimeoutId);\n  }\n\n  _getUpdateStatusParams(userStatusParams) {\n    const params = {\n      dndStatus: this.dndStatus,\n      userStatus: userStatusParams,\n    };\n    if (\n      params.dndStatus !== dndStatus.takeAllCalls &&\n      params.dndStatus !== dndStatus.doNotAcceptDepartmentCalls\n    ) {\n      params.dndStatus = dndStatus.takeAllCalls;\n    }\n    return params;\n  }\n\n  setAvailable() {\n    if (this.presenceStatus === presenceStatus.available) {\n      return;\n    }\n    const params = this._getUpdateStatusParams(presenceStatus.available);\n    this._update(params);\n  }\n\n  setBusy() {\n    if (\n      this.presenceStatus === presenceStatus.busy &&\n      this.dndStatus !== dndStatus.doNotAcceptAnyCalls\n    ) {\n      return;\n    }\n    const params = this._getUpdateStatusParams(presenceStatus.busy);\n    this._update(params);\n  }\n\n  setDoNotDisturb() {\n    if (\n      this.presenceStatus === presenceStatus.busy &&\n      this.dndStatus === dndStatus.doNotAcceptAnyCalls\n    ) {\n      return;\n    }\n    const params = {\n      dndStatus: dndStatus.doNotAcceptAnyCalls,\n      userStatus: presenceStatus.busy,\n    };\n    this._update(params);\n  }\n\n  setInvisible() {\n    if (this.presenceStatus === presenceStatus.offline) {\n      return;\n    }\n    const params = this._getUpdateStatusParams(presenceStatus.offline);\n    this._update(params);\n  }\n\n  toggleAcceptCallQueueCalls() {\n    const params = {\n      userStatus: this.userStatus,\n    };\n    if (this.dndStatus === dndStatus.takeAllCalls) {\n      params.dndStatus = dndStatus.doNotAcceptDepartmentCalls;\n    } else if (this.dndStatus === dndStatus.doNotAcceptDepartmentCalls) {\n      params.dndStatus = dndStatus.takeAllCalls;\n    }\n    if (params.dndStatus) {\n      this._update(params);\n    }\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get dndStatus() {\n    return this.state.dndStatus;\n  }\n\n  get userStatus() {\n    return this.state.userStatus;\n  }\n\n  get message() {\n    return this.state.message;\n  }\n\n  get presenceStatus() {\n    return this.state.presenceStatus;\n  }\n}\n"]}