{"version":3,"sources":["modules/MessageStore/index.js"],"names":["messageStoreHelper","MessageStore","alert","client","auth","ttl","storage","subscription","options","actionTypes","_alert","_client","_storage","_storageKey","_subscription","_reducer","_cacheReducer","_ttl","_auth","_promise","syncConversation","bind","registerReducer","key","reducer","store","subscribe","_onStateChange","_shouldInit","dispatch","type","init","_shouleCleanCache","_cleanUpCache","_initMessageStore","_shouldReset","_resetModuleStatus","ready","_subscriptionHandler","pending","isFreshLogin","Date","now","conversationsTimestamp","messagesTimestamp","resetSuccess","cleanUp","_syncMessages","initSuccess","accountExtesionEndPoint","message","test","event","body","changes","id","conversations","toString","params","account","extension","messageSync","list","response","oldConversation","findConversationById","syncToken","getMessageSyncParams","conversationId","_messageSyncApi","newConversationRequest","_getConversationsAndMessagesFromSyncResponse","messages","_saveConversationsAndMessages","syncInfo","conversationResponse","records","reverse","getNewConversationsAndMessagesFromRecords","syncFunction","sync","syncOver","syncError","_sync","_updateMessagesFromSync","_updateConversationFromSync","messageId","status","readStatus","messageStore","put","updateRequest","messageIds","ids","decodeURIComponent","join","platform","service","url","responses","length","_updateMessageApi","result","UPDATE_MESSAGE_ONCE_COUNT","leftIds","slice","rightIds","map","_batchUpdateMessagesApi","results","forEach","res","push","json","_updateMessagesApi","rightResults","concat","conversation","unReadMessages","filterConversationUnreadMessages","unreadMessageIds","updatedMessages","_updateConversationsMessagesFromRecords","console","error","searchText","subject","toLowerCase","indexOf","subMessage","recipients","_saveConversation","messageIndex","findIndex","_saveMessages","newConversation","pushMessageToConversationMessages","pushMessageToMesages","_saveConversationAndMessages","unReadMessagesRusult","updateMessagesUnreadCounts","_saveUnreadCounts","unreadCounts","_saveConversations","_saveSyncToken","saveConversations","data","saveMessages","saveSyncToken","updateUnreadCounts","getItem","cache","timestamp","state","messageStoreStatus"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport moduleStatus from '../../enums/moduleStatus';\n\nimport { batchPutApi } from '../../lib/batchApiHelper';\n\nimport * as messageStoreHelper from './messageStoreHelper';\nimport messageStoreActionTypes from './messageStoreActionTypes';\nimport getMessageStoreReducer from './getMessageStoreReducer';\nimport getCacheReducer from './getCacheReducer';\n\nexport default class MessageStore extends RcModule {\n  constructor({\n    alert,\n    client,\n    auth,\n    ttl = 30 * 60 * 1000,\n    storage,\n    subscription,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes: messageStoreActionTypes,\n    });\n    this._alert = alert;\n    this._client = client;\n    this._storage = storage;\n    this._storageKey = 'messageStore';\n    this._subscription = subscription;\n    this._reducer = getMessageStoreReducer(this.actionTypes);\n    this._cacheReducer = getCacheReducer(this.actionTypes);\n    this._ttl = ttl;\n    this._auth = auth;\n    this._promise = null;\n    this.syncConversation = this.syncConversation.bind(this);\n    storage.registerReducer({ key: this._storageKey, reducer: this._cacheReducer });\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      if (this._shouleCleanCache()) {\n        this._cleanUpCache();\n      }\n      this._initMessageStore();\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    } else if (this.ready) {\n      this._subscriptionHandler();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._storage.ready &&\n      this._subscription.ready &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._storage.ready ||\n        !this._subscription.ready\n      ) &&\n      this.ready\n    );\n  }\n\n  _shouleCleanCache() {\n    return (\n      this._auth.isFreshLogin ||\n      (Date.now() - this.conversationsTimestamp) > this._ttl ||\n      (Date.now() - this.messagesTimestamp) > this._ttl\n    );\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  _cleanUpCache() {\n    this.store.dispatch({\n      type: this.actionTypes.cleanUp,\n    });\n  }\n\n  async _initMessageStore() {\n    await this._syncMessages();\n    this._subscription.subscribe('/account/~/extension/~/message-store');\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n    });\n  }\n\n  _subscriptionHandler() {\n    const accountExtesionEndPoint = /\\/message-store$/;\n    const message = this._subscription.message;\n    if (\n      message !== null &&\n      accountExtesionEndPoint.test(message.event) &&\n      message.body &&\n      message.body.changes\n    ) {\n      this._syncMessages();\n    }\n  }\n\n  findConversationById(id) {\n    return this.conversations[id.toString()];\n  }\n\n  async _messageSyncApi(params) {\n    const response = await this._client.account()\n                             .extension()\n                             .messageSync()\n                             .list(params);\n    return response;\n  }\n\n  async _updateConversationFromSync(id) {\n    const oldConversation = this.findConversationById(id);\n    const syncToken = oldConversation && oldConversation.syncToken;\n    const params = messageStoreHelper.getMessageSyncParams({\n      syncToken,\n      conversationId: id,\n    });\n    const newConversationRequest = await this._messageSyncApi(params);\n    const { conversations, messages }\n      = this._getConversationsAndMessagesFromSyncResponse(newConversationRequest);\n    this._saveConversationsAndMessages(conversations, messages, null);\n  }\n\n  async _updateMessagesFromSync() {\n    const syncToken = this.syncToken;\n    const params = messageStoreHelper.getMessageSyncParams({ syncToken });\n    const newConversationRequest = await this._messageSyncApi(params);\n    const { conversations, messages } =\n      this._getConversationsAndMessagesFromSyncResponse(newConversationRequest);\n    this._saveConversationsAndMessages(\n      conversations,\n      messages,\n      newConversationRequest.syncInfo.syncToken\n    );\n  }\n\n  _getConversationsAndMessagesFromSyncResponse(conversationResponse) {\n    const records = conversationResponse.records.reverse();\n    const syncToken = conversationResponse.syncInfo.syncToken;\n    return messageStoreHelper.getNewConversationsAndMessagesFromRecords({\n      records,\n      syncToken,\n      conversations: this.conversations,\n      messages: this.messages,\n    });\n  }\n\n  async _sync(syncFunction) {\n    if (!this._promise) {\n      this._promise = (async () => {\n        try {\n          this.store.dispatch({\n            type: this.actionTypes.sync,\n          });\n          await syncFunction();\n          this.store.dispatch({\n            type: this.actionTypes.syncOver,\n          });\n          this._promise = null;\n        } catch (error) {\n          this.store.dispatch({\n            type: this.actionTypes.syncError,\n          });\n          this._promise = null;\n          throw error;\n        }\n      })();\n    }\n    await this._promise;\n  }\n\n  async _syncMessages() {\n    await this._sync(async () => {\n      await this._updateMessagesFromSync();\n    });\n  }\n\n  async syncConversation(id) {\n    await this._sync(async () => {\n      await this._updateConversationFromSync(id);\n    });\n  }\n\n  async _updateMessageApi(messageId, status) {\n    const body = {\n      readStatus: status,\n    };\n    const updateRequest = await this._client.account()\n                                            .extension()\n                                            .messageStore(messageId)\n                                            .put(body);\n    return updateRequest;\n  }\n\n  async _batchUpdateMessagesApi(messageIds, body) {\n    const ids = decodeURIComponent(messageIds.join(','));\n    const platform = this._client.service.platform();\n    const responses = await batchPutApi({\n      platform,\n      url: `/account/~/extension/~/message-store/${ids}`,\n      body,\n    });\n    return responses;\n  }\n\n  async _updateMessagesApi(messageIds, status) {\n    if (messageIds.length === 1) {\n      const result = await this._updateMessageApi(messageIds[0], status);\n      return [result];\n    }\n    const UPDATE_MESSAGE_ONCE_COUNT = 20;\n    const leftIds = messageIds.slice(0, UPDATE_MESSAGE_ONCE_COUNT);\n    const rightIds = messageIds.slice(UPDATE_MESSAGE_ONCE_COUNT);\n    const body = leftIds.map(() => (\n      { body: { readStatus: status } }\n    ));\n    const responses = await this._batchUpdateMessagesApi(leftIds, body);\n    const results = [];\n    responses.forEach((res) => {\n      if (res.response().status === 200) {\n        results.push(res.json());\n      }\n    });\n    if (rightIds.length > 0) {\n      const rightResults = await this._updateMessagesApi(rightIds, status);\n      if (rightResults.length > 0) {\n        results.concat(rightResults);\n      }\n    }\n    return results;\n  }\n\n  async readMessages(conversation) {\n    const unReadMessages = messageStoreHelper.filterConversationUnreadMessages(conversation);\n    if (unReadMessages.length === 0) {\n      return null;\n    }\n    const unreadMessageIds = unReadMessages.map(message => message.id);\n    try {\n      const updatedMessages = await this._updateMessagesApi(unreadMessageIds, 'Read');\n      this._updateConversationsMessagesFromRecords(updatedMessages);\n    } catch (error) {\n      console.error(error);\n    }\n    return null;\n  }\n\n  matchMessageText(message, searchText) {\n    if (message.subject.toLowerCase().indexOf(searchText) >= 0) {\n      return message;\n    }\n    const conversation = this.conversations[message.conversation.id];\n    if (!conversation) {\n      return null;\n    }\n    for (const subMessage of conversation.messages) {\n      if (subMessage.subject.toLowerCase().indexOf(searchText) >= 0) {\n        return message;\n      }\n    }\n    return null;\n  }\n\n  updateConversationRecipientList(conversationId, recipients) {\n    const conversation = this.findConversationById(conversationId);\n    if (!conversation) {\n      return;\n    }\n    conversation.recipients = recipients;\n    this._saveConversation(conversation);\n    const messages = this.messages;\n    const messageIndex = messages.findIndex(message =>\n      message.conversation && message.conversation.id === conversationId\n    );\n    if (messageIndex > -1) {\n      const message = messages[messageIndex];\n      message.recipients = recipients;\n      this._saveMessages(messages);\n    }\n  }\n\n  pushMessage(conversationId, message) {\n    const oldConversation = this.findConversationById(conversationId);\n    let newConversation = { messages: [] };\n    if (oldConversation) {\n      newConversation = oldConversation;\n    }\n    newConversation.id = conversationId;\n    newConversation.messages = messageStoreHelper.pushMessageToConversationMessages({\n      messages: newConversation.messages,\n      message,\n    });\n    const messages = messageStoreHelper.pushMessageToMesages({\n      messages: this.messages,\n      message\n    });\n    this._saveConversationAndMessages(newConversation, messages);\n  }\n\n  _updateConversationsMessagesFromRecords(records) {\n    const { conversations, messages } =\n      messageStoreHelper.getNewConversationsAndMessagesFromRecords({\n        records,\n        conversations: this.conversations,\n        messages: this.messages,\n      });\n    this._saveConversationsAndMessages(conversations, messages, null);\n  }\n\n  _saveConversationAndMessages(conversation, messages) {\n    this._saveConversation(conversation);\n\n    const unReadMessagesRusult =\n      messageStoreHelper.updateMessagesUnreadCounts(messages, this.conversations);\n    this._saveUnreadCounts(unReadMessagesRusult.unreadCounts);\n    this._saveMessages(unReadMessagesRusult.messages);\n  }\n\n  _saveConversationsAndMessages(conversations, messages, syncToken) {\n    this._saveConversations(conversations);\n    const unReadMessagesRusult =\n      messageStoreHelper.updateMessagesUnreadCounts(messages, this.conversations);\n    this._saveMessages(unReadMessagesRusult.messages);\n    this._saveUnreadCounts(unReadMessagesRusult.unreadCounts);\n    if (syncToken) {\n      this._saveSyncToken(syncToken);\n    }\n  }\n\n  _saveConversation(conversation) {\n    const conversations = this.conversations;\n    const id = conversation.id;\n    conversations[id] = conversation;\n    this._saveConversations(conversations);\n  }\n\n  _saveConversations(conversations) {\n    this.store.dispatch({\n      type: this.actionTypes.saveConversations,\n      data: conversations,\n    });\n  }\n\n  _saveMessages(messages) {\n    this.store.dispatch({\n      type: this.actionTypes.saveMessages,\n      data: messages,\n    });\n  }\n\n  _saveSyncToken(syncToken) {\n    this.store.dispatch({\n      type: this.actionTypes.saveSyncToken,\n      syncToken,\n    });\n  }\n\n  _saveUnreadCounts(unreadCounts) {\n    this.store.dispatch({\n      type: this.actionTypes.updateUnreadCounts,\n      unreadCounts,\n    });\n  }\n\n  get cache() {\n    return this._storage.getItem(this._storageKey);\n  }\n\n  get conversations() {\n    const conversations = this.cache.conversations.data;\n    if (!conversations) {\n      return {};\n    }\n    return conversations;\n  }\n\n  get conversationsTimestamp() {\n    return this.cache.conversations.timestamp;\n  }\n\n  get messages() {\n    const messages = this.cache.messages.data;\n    if (!messages) {\n      return [];\n    }\n    return messages;\n  }\n\n  get messagesTimestamp() {\n    return this.cache.messages.timestamp;\n  }\n\n  get syncToken() {\n    return this.cache.syncToken;\n  }\n\n  get unreadCounts() {\n    return this.cache.unreadCounts;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get messageStoreStatus() {\n    return this.state.messageStoreStatus;\n  }\n\n  get ready() {\n    return this.status === moduleStatus.ready;\n  }\n\n  get pending() {\n    return this.status === moduleStatus.pending;\n  }\n}\n"]}