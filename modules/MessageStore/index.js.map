{"version":3,"sources":["modules/MessageStore/index.js"],"names":["processResponseData","messageHelper","messageStoreHelper","data","records","slice","reverse","syncTimestamp","Date","syncInfo","syncTime","getTime","syncToken","DEFAULT_TTL","DEFAULT_TIME_TO_RETRY","DEFAULT_DAY_SPAN","MessageStore","alert","client","auth","ttl","timeToRetry","daySpan","storage","subscription","connectivityMonitor","polling","options","actionTypes","_alert","_client","_storage","_subscription","_connectivityMonitor","_reducer","_ttl","_timeToRetry","_daySpan","_auth","_promise","_lastSubscriptionMessage","_storageKey","_polling","registerReducer","key","reducer","addSelector","allConversations","conversations","unreadCounts","forEach","conversation","messageIsTextMessage","filter","messageIsFax","messageIsVoicemail","store","subscribe","_onStateChange","_shouldInit","dispatch","type","init","_shouleCleanCache","_cleanUpCache","_connectivity","connectivity","_initMessageStore","_shouldReset","_resetModuleStatus","ready","_subscriptionHandler","_checkConnectivity","pending","isFreshLogin","now","updatedTimestamp","resetSuccess","cleanUp","id","conversationMap","toString","_syncMessages","console","error","initSuccess","accountExtesionEndPoint","message","test","event","body","changes","params","account","extension","messageSync","list","response","dateFrom","dateTo","recordsLength","MAX_MSG_LENGTH","getMessageSyncParams","_messageSyncApi","length","olderRecordsExist","_dateTo","creationTime","_recursiveFSync","lastResponse","concat","sync","oldSyncToken","syncSuccess","_startPolling","_retry","conversationId","syncConversationSuccess","syncConversationId","_sync","_updateMessagesFromSync","_updateConversationFromSync","syncFunction","_onSyncError","syncError","messageId","status","readStatus","messageStore","put","updateRequest","messageIds","ids","decodeURIComponent","join","platform","service","url","responses","_updateMessageApi","result","UPDATE_MESSAGE_ONCE_COUNT","leftIds","rightIds","map","_batchUpdateMessagesApi","results","res","push","json","_updateMessagesApi","rightResults","unreadMessageIds","unreadMessages","updatedMessages","updateMessages","searchText","messages","subject","toLowerCase","indexOf","recipients","updateConversationRecipients","record","pushMessages","getItem","cache","_selectors","voicemailMessages","faxMessages","textConversations","state","messageStoreStatus"],"mappings":"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","file":"index.js","sourcesContent":["import Pollable from '../../lib/Pollable';\nimport moduleStatuses from '../../enums/moduleStatuses';\n\nimport { batchPutApi } from '../../lib/batchApiHelper';\n\nimport * as messageHelper from '../../lib/messageHelper';\nimport * as messageStoreHelper from './messageStoreHelper';\n\nimport actionTypes from './actionTypes';\nimport getMessageStoreReducer from './getMessageStoreReducer';\nimport getDataReducer from './getDataReducer';\nimport sleep from '../../lib/sleep';\nimport proxify from '../../lib/proxy/proxify';\n\nexport function processResponseData(data) {\n  const records = data.records.slice();\n  return {\n    records: records.reverse(),\n    syncTimestamp: (new Date(data.syncInfo.syncTime)).getTime(),\n    syncToken: data.syncInfo.syncToken,\n  };\n}\nconst DEFAULT_TTL = 30 * 60 * 1000;\nconst DEFAULT_TIME_TO_RETRY = 62 * 1000;\nconst DEFAULT_DAY_SPAN = 7;\n\nexport default class MessageStore extends Pollable {\n  constructor({\n    alert,\n    client,\n    auth,\n    ttl = DEFAULT_TTL,\n    timeToRetry = DEFAULT_TIME_TO_RETRY,\n    daySpan = DEFAULT_DAY_SPAN,\n    storage,\n    subscription,\n    connectivityMonitor,\n    polling = false,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._alert = alert;\n    this._client = client;\n    this._storage = storage;\n    this._subscription = subscription;\n    this._connectivityMonitor = connectivityMonitor;\n    this._reducer = getMessageStoreReducer(this.actionTypes);\n    this._ttl = ttl;\n    this._timeToRetry = timeToRetry;\n    this._daySpan = daySpan;\n    this._auth = auth;\n    this._promise = null;\n    this._lastSubscriptionMessage = null;\n    this._storageKey = 'messageStore';\n    this._polling = polling;\n\n    this._storage.registerReducer({\n      key: this._storageKey,\n      reducer: getDataReducer(this.actionTypes),\n    });\n\n    this.addSelector(\n      'unreadCounts',\n      () => this.allConversations,\n      (conversations) => {\n        let unreadCounts = 0;\n        conversations.forEach((conversation) => {\n          if (messageHelper.messageIsTextMessage(conversation)) {\n            unreadCounts += conversation.unreadCounts;\n          }\n        });\n        return unreadCounts;\n      }\n    );\n\n    this.addSelector(\n      'textConversations',\n      () => this.allConversations,\n      conversations =>\n        conversations.filter(\n          conversation => messageHelper.messageIsTextMessage(conversation)\n        )\n    );\n\n    this.addSelector(\n      'faxMessages',\n      () => this.allConversations,\n      conversations =>\n        conversations.filter(\n          conversation => messageHelper.messageIsFax(conversation)\n        )\n    );\n\n    this.addSelector(\n      'voicemailMessages',\n      () => this.allConversations,\n      conversations =>\n        conversations.filter(\n          conversation => messageHelper.messageIsVoicemail(conversation)\n        )\n    );\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      if (this._shouleCleanCache()) {\n        this._cleanUpCache();\n      }\n      if (this._connectivityMonitor) {\n        this._connectivity = this._connectivityMonitor.connectivity;\n      }\n      this._initMessageStore();\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    } else if (\n      this.ready\n    ) {\n      this._subscriptionHandler();\n      this._checkConnectivity();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._storage.ready &&\n      this._subscription.ready &&\n      (!this._connectivityMonitor || this._connectivityMonitor.ready) &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._storage.ready ||\n        !this._subscription.ready ||\n        (!!this._connectivityMonitor && !this._connectivityMonitor.ready)\n      ) &&\n      this.ready\n    );\n  }\n\n  _shouleCleanCache() {\n    return (\n      this._auth.isFreshLogin ||\n      (Date.now() - this.updatedTimestamp) > this.ttl\n    );\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  _cleanUpCache() {\n    this.store.dispatch({\n      type: this.actionTypes.cleanUp,\n    });\n  }\n\n  findConversationById(id) {\n    return this.conversationMap[id.toString()];\n  }\n\n  async _initMessageStore() {\n    try {\n      await this._syncMessages();\n      this._subscription.subscribe('/account/~/extension/~/message-store');\n    } catch (e) {\n      console.error(e);\n    }\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n    });\n  }\n\n  _subscriptionHandler() {\n    const accountExtesionEndPoint = /\\/message-store$/;\n    const message = this._subscription.message;\n    if (\n      message &&\n      message !== this._lastSubscriptionMessage &&\n      accountExtesionEndPoint.test(message.event) &&\n      message.body &&\n      message.body.changes\n    ) {\n      this._lastSubscriptionMessage = this._subscription.message;\n      this._syncMessages();\n    }\n  }\n\n  _checkConnectivity() {\n    if (\n      this._connectivityMonitor &&\n      this._connectivityMonitor.ready &&\n      this._connectivity !== this._connectivityMonitor.connectivity\n    ) {\n      this._connectivity = this._connectivityMonitor.connectivity;\n      if (this._connectivity) {\n        this._syncMessages();\n      }\n    }\n  }\n\n  async _messageSyncApi(params) {\n    const response = await this._client\n      .account()\n      .extension()\n      .messageSync()\n      .list(params);\n    return response;\n  }\n  async _recursiveFSync({\n    dateFrom,\n    dateTo = null,\n    syncToken,\n    recordsLength = 0,\n  }) {\n    const MAX_MSG_LENGTH = 500;\n    const params = messageStoreHelper.getMessageSyncParams({\n      dateFrom,\n      dateTo,\n      syncToken,\n      daySpan: this._daySpan,\n    });\n    const response = await this._messageSyncApi(params);\n    const records = response.records;\n    recordsLength += records.length;\n    if (recordsLength > MAX_MSG_LENGTH || !response.syncInfo.olderRecordsExist) {\n      return {\n        records,\n        syncInfo: response.syncInfo\n      };\n    }\n    await sleep(1000);\n    const _dateTo = new Date(response.records[response.records.length - 1].creationTime);\n    const lastResponse = await this._recursiveFSync({\n      dateFrom,\n      dateTo: _dateTo,\n      syncToken,\n      recordsLength,\n    });\n    return {\n      records: records.concat(lastResponse.records),\n      syncInfo: response.syncInfo\n    };\n  }\n  async _updateMessagesFromSync() {\n    let response;\n    this.store.dispatch({\n      type: this.actionTypes.sync,\n    });\n    try {\n      const oldSyncToken = this.syncToken;\n      const params = messageStoreHelper.getMessageSyncParams({\n        syncToken: oldSyncToken,\n        daySpan: this._daySpan,\n      });\n      if (!oldSyncToken) {\n        response = await this._recursiveFSync({\n          ...params,\n        });\n      } else {\n        response = await this._messageSyncApi(params);\n      }\n      const {\n        records,\n        syncTimestamp,\n        syncToken,\n      } = processResponseData(response);\n      this.store.dispatch({\n        type: this.actionTypes.syncSuccess,\n        records,\n        syncTimestamp,\n        syncToken,\n      });\n      if (this._polling) {\n        this._startPolling();\n      }\n    } catch (error) {\n      if (this._polling) {\n        this._startPolling(this.timeToRetry);\n      } else {\n        this._retry();\n      }\n      throw error;\n    }\n  }\n\n  async _updateConversationFromSync(conversationId) {\n    let response;\n    const conversation = this.conversationMap[conversationId.toString()];\n    if (!conversation) {\n      return;\n    }\n    this.store.dispatch({\n      type: this.actionTypes.sync,\n    });\n    const oldSyncToken = conversation.syncToken;\n    const params = messageStoreHelper.getMessageSyncParams({\n      syncToken: oldSyncToken,\n      conversationId: conversation.id,\n      daySpan: this._daySpan,\n    });\n    if (!oldSyncToken) {\n      response = await this._recursiveFSync({\n        ...params,\n      });\n    } else {\n      response = await this._messageSyncApi(params);\n    }\n    const {\n      records,\n      syncTimestamp,\n      syncToken,\n    } = processResponseData(response);\n    this.store.dispatch({\n      type: this.actionTypes.syncConversationSuccess,\n      records,\n      syncTimestamp,\n      syncToken,\n      syncConversationId: conversation.id,\n    });\n  }\n\n  async _syncMessages() {\n    await this._sync(async () => {\n      await this._updateMessagesFromSync();\n    });\n  }\n\n  @proxify\n  async fetchData() {\n    await this._syncMessages();\n  }\n\n  @proxify\n  async syncConversation(id) {\n    await this._sync(async () => {\n      await this._updateConversationFromSync(id);\n    });\n  }\n\n  async _sync(syncFunction) {\n    if (!this._promise) {\n      this._promise = (async () => {\n        try {\n          await syncFunction();\n          this._promise = null;\n        } catch (error) {\n          this._onSyncError();\n          this._promise = null;\n          throw error;\n        }\n      })();\n    }\n    await this._promise;\n  }\n\n  _onSyncError() {\n    this.store.dispatch({\n      type: this.actionTypes.syncError,\n    });\n  }\n\n  async _updateMessageApi(messageId, status) {\n    const body = {\n      readStatus: status,\n    };\n    const updateRequest = await this._client.account()\n      .extension()\n      .messageStore(messageId)\n      .put(body);\n    return updateRequest;\n  }\n\n  async _batchUpdateMessagesApi(messageIds, body) {\n    const ids = decodeURIComponent(messageIds.join(','));\n    const platform = this._client.service.platform();\n    const responses = await batchPutApi({\n      platform,\n      url: `/account/~/extension/~/message-store/${ids}`,\n      body,\n    });\n    return responses;\n  }\n\n  async _updateMessagesApi(messageIds, status) {\n    if (messageIds.length === 1) {\n      const result = await this._updateMessageApi(messageIds[0], status);\n      return [result];\n    }\n    const UPDATE_MESSAGE_ONCE_COUNT = 20;\n    const leftIds = messageIds.slice(0, UPDATE_MESSAGE_ONCE_COUNT);\n    const rightIds = messageIds.slice(UPDATE_MESSAGE_ONCE_COUNT);\n    const body = leftIds.map(() => (\n      { body: { readStatus: status } }\n    ));\n    const responses = await this._batchUpdateMessagesApi(leftIds, body);\n    const results = [];\n    responses.forEach((res) => {\n      if (res.response().status === 200) {\n        results.push(res.json());\n      }\n    });\n    if (rightIds.length > 0) {\n      const rightResults = await this._updateMessagesApi(rightIds, status);\n      if (rightResults.length > 0) {\n        results.concat(rightResults);\n      }\n    }\n    return results;\n  }\n\n  @proxify\n  async readMessages(conversationId) {\n    const conversation = this.conversationMap[conversationId];\n    if (!conversation) {\n      return null;\n    }\n    const unreadMessageIds = Object.keys(conversation.unreadMessages);\n    if (unreadMessageIds.length === 0) {\n      return null;\n    }\n    try {\n      const updatedMessages = await this._updateMessagesApi(unreadMessageIds, 'Read');\n      this.store.dispatch({\n        type: this.actionTypes.updateMessages,\n        records: updatedMessages,\n      });\n    } catch (error) {\n      console.error(error);\n    }\n    return null;\n  }\n\n  searchMessagesText(searchText) {\n    return this.messages.filter((message) => {\n      if (\n        message.subject &&\n        message.subject.toLowerCase().indexOf(searchText) >= 0\n      ) {\n        return true;\n      }\n      return false;\n    });\n  }\n\n  @proxify\n  async updateConversationRecipientList(conversationId, recipients) {\n    this.store.dispatch({\n      type: this.actionTypes.updateConversationRecipients,\n      conversationId,\n      recipients,\n    });\n  }\n\n  @proxify\n  async pushMessages(records) {\n    this.store.dispatch({\n      type: this.actionTypes.updateMessages,\n      records,\n    });\n  }\n\n  pushMessage(record) {\n    this.pushMessages([record]);\n  }\n\n  get cache() {\n    return this._storage.getItem(this._storageKey);\n  }\n\n  get messages() {\n    return this.cache.data.messages;\n  }\n\n  get allConversations() {\n    return (this.cache && this.cache.data.conversations) || [];\n  }\n\n  get voicemailMessages() {\n    return this._selectors.voicemailMessages();\n  }\n\n  get faxMessages() {\n    return this._selectors.faxMessages();\n  }\n\n  get conversations() {\n    return this._selectors.textConversations();\n  }\n\n  get conversationMap() {\n    return this.cache.data.conversationMap;\n  }\n\n  get updatedTimestamp() {\n    return this.cache.updatedTimestamp;\n  }\n\n  get syncTimestamp() {\n    return this.cache.data.syncTimestamp;\n  }\n\n  get syncToken() {\n    return this.cache.syncToken;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get unreadCounts() {\n    return this._selectors.unreadCounts();\n  }\n\n  get messageStoreStatus() {\n    return this.state.messageStoreStatus;\n  }\n\n  get ready() {\n    return this.status === moduleStatuses.ready;\n  }\n\n  get pending() {\n    return this.status === moduleStatuses.pending;\n  }\n\n  get ttl() {\n    return this._ttl;\n  }\n\n  get timeToRetry() {\n    return this._timeToRetry;\n  }\n}\n"]}