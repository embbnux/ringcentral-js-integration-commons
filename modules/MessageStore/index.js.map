{"version":3,"sources":["modules/MessageStore/index.js"],"names":["processResponseData","messageStoreHelper","data","records","slice","reverse","syncTimestamp","Date","syncInfo","syncTime","getTime","syncToken","MessageStore","alert","client","auth","ttl","storage","subscription","options","actionTypes","_alert","_client","_storage","_subscription","_reducer","_ttl","_auth","_promise","_lastSubscriptionMessage","_storageKey","registerReducer","key","reducer","addSelector","conversations","reduce","pre","cur","unreadCounts","syncConversation","bind","store","subscribe","_onStateChange","_shouldInit","dispatch","type","init","_shouleCleanCache","_cleanUpCache","_initMessageStore","_shouldReset","_resetModuleStatus","ready","_subscriptionHandler","pending","isFreshLogin","now","updatedTimestamp","resetSuccess","cleanUp","id","conversationMap","toString","_syncMessages","initSuccess","accountExtesionEndPoint","message","test","event","body","changes","params","account","extension","messageSync","list","response","sync","oldSyncToken","getMessageSyncParams","_messageSyncApi","syncSuccess","conversationId","conversation","syncConversationSuccess","syncConversationId","_sync","_updateMessagesFromSync","_updateConversationFromSync","syncFunction","_onSyncError","syncError","messageId","status","readStatus","messageStore","put","updateRequest","messageIds","ids","decodeURIComponent","join","platform","service","url","responses","length","_updateMessageApi","result","UPDATE_MESSAGE_ONCE_COUNT","leftIds","rightIds","map","_batchUpdateMessagesApi","results","forEach","res","push","json","_updateMessagesApi","rightResults","concat","unreadMessageIds","unreadMessages","updatedMessages","updateMessages","console","error","searchText","messages","filter","subject","toLowerCase","indexOf","recipients","updateConversationRecipients","record","pushMessages","getItem","cache","state","_selectors","messageStoreStatus"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport moduleStatus from '../../enums/moduleStatus';\n\nimport { batchPutApi } from '../../lib/batchApiHelper';\n\nimport * as messageStoreHelper from './messageStoreHelper';\n\nimport actionTypes from './actionTypes';\nimport getMessageStoreReducer from './getMessageStoreReducer';\nimport getDataReducer from './getDataReducer';\n\nexport function processResponseData(data) {\n  const records = data.records.slice();\n  return {\n    records: records.reverse(),\n    syncTimestamp: (new Date(data.syncInfo.syncTime)).getTime(),\n    syncToken: data.syncInfo.syncToken,\n  };\n}\n\nexport default class MessageStore extends RcModule {\n  constructor({\n    alert,\n    client,\n    auth,\n    ttl = 30 * 60 * 1000,\n    storage,\n    subscription,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._alert = alert;\n    this._client = client;\n    this._storage = storage;\n    this._subscription = subscription;\n    this._reducer = getMessageStoreReducer(this.actionTypes);\n    this._ttl = ttl;\n    this._auth = auth;\n    this._promise = null;\n    this._lastSubscriptionMessage = null;\n    this._storageKey = 'messageStore';\n\n    this._storage.registerReducer({\n      key: this._storageKey,\n      reducer: getDataReducer(this.actionTypes),\n    });\n\n    this.addSelector(\n      'unreadCounts',\n      () => this.conversations,\n      conversations =>\n        conversations.reduce((pre, cur) => (pre + cur.unreadCounts), 0),\n    );\n\n    this.syncConversation = this.syncConversation.bind(this);\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      if (this._shouleCleanCache()) {\n        this._cleanUpCache();\n      }\n      this._initMessageStore();\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    } else if (\n      this.ready\n    ) {\n      this._subscriptionHandler();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._storage.ready &&\n      this._subscription.ready &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._storage.ready ||\n        !this._subscription.ready\n      ) &&\n      this.ready\n    );\n  }\n\n  _shouleCleanCache() {\n    return (\n      this._auth.isFreshLogin ||\n      (Date.now() - this.updatedTimestamp) > this._ttl\n    );\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  _cleanUpCache() {\n    this.store.dispatch({\n      type: this.actionTypes.cleanUp,\n    });\n  }\n\n  findConversationById(id) {\n    return this.conversationMap[id.toString()];\n  }\n\n  async _initMessageStore() {\n    await this._syncMessages();\n    this._subscription.subscribe('/account/~/extension/~/message-store');\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n    });\n  }\n\n  _subscriptionHandler() {\n    const accountExtesionEndPoint = /\\/message-store$/;\n    const message = this._subscription.message;\n    if (\n      message &&\n      message !== this._lastSubscriptionMessage &&\n      accountExtesionEndPoint.test(message.event) &&\n      message.body &&\n      message.body.changes\n    ) {\n      this._lastSubscriptionMessage = this._subscription.message;\n      this._syncMessages();\n    }\n  }\n\n  async _messageSyncApi(params) {\n    const response = await this._client.account()\n                             .extension()\n                             .messageSync()\n                             .list(params);\n    return response;\n  }\n\n  async _updateMessagesFromSync() {\n    this.store.dispatch({\n      type: this.actionTypes.sync,\n    });\n    const oldSyncToken = this.syncToken;\n    const params = messageStoreHelper.getMessageSyncParams({ syncToken: oldSyncToken });\n    const response = await this._messageSyncApi(params);\n    const {\n      records,\n      syncTimestamp,\n      syncToken,\n    } = processResponseData(response);\n    this.store.dispatch({\n      type: this.actionTypes.syncSuccess,\n      records,\n      syncTimestamp,\n      syncToken,\n    });\n  }\n\n  async _updateConversationFromSync(conversationId) {\n    const conversation = this.conversationMap[conversationId.toString()];\n    if (!conversation) {\n      return;\n    }\n    this.store.dispatch({\n      type: this.actionTypes.sync,\n    });\n    const oldSyncToken = conversation.syncToken;\n    const params = messageStoreHelper.getMessageSyncParams({\n      syncToken: oldSyncToken,\n      conversationId: conversation.id,\n    });\n    const response = await this._messageSyncApi(params);\n    const {\n      records,\n      syncTimestamp,\n      syncToken,\n    } = processResponseData(response);\n    this.store.dispatch({\n      type: this.actionTypes.syncConversationSuccess,\n      records,\n      syncTimestamp,\n      syncToken,\n      syncConversationId: conversation.id,\n    });\n  }\n\n  async _syncMessages() {\n    await this._sync(async () => {\n      await this._updateMessagesFromSync();\n    });\n  }\n\n  async syncConversation(id) {\n    await this._sync(async () => {\n      await this._updateConversationFromSync(id);\n    });\n  }\n\n  async _sync(syncFunction) {\n    if (!this._promise) {\n      this._promise = (async () => {\n        try {\n          await syncFunction();\n          this._promise = null;\n        } catch (error) {\n          this._onSyncError();\n          this._promise = null;\n          throw error;\n        }\n      })();\n    }\n    await this._promise;\n  }\n\n  _onSyncError() {\n    this.store.dispatch({\n      type: this.actionTypes.syncError,\n    });\n  }\n\n  async _updateMessageApi(messageId, status) {\n    const body = {\n      readStatus: status,\n    };\n    const updateRequest = await this._client.account()\n                                            .extension()\n                                            .messageStore(messageId)\n                                            .put(body);\n    return updateRequest;\n  }\n\n  async _batchUpdateMessagesApi(messageIds, body) {\n    const ids = decodeURIComponent(messageIds.join(','));\n    const platform = this._client.service.platform();\n    const responses = await batchPutApi({\n      platform,\n      url: `/account/~/extension/~/message-store/${ids}`,\n      body,\n    });\n    return responses;\n  }\n\n  async _updateMessagesApi(messageIds, status) {\n    if (messageIds.length === 1) {\n      const result = await this._updateMessageApi(messageIds[0], status);\n      return [result];\n    }\n    const UPDATE_MESSAGE_ONCE_COUNT = 20;\n    const leftIds = messageIds.slice(0, UPDATE_MESSAGE_ONCE_COUNT);\n    const rightIds = messageIds.slice(UPDATE_MESSAGE_ONCE_COUNT);\n    const body = leftIds.map(() => (\n      { body: { readStatus: status } }\n    ));\n    const responses = await this._batchUpdateMessagesApi(leftIds, body);\n    const results = [];\n    responses.forEach((res) => {\n      if (res.response().status === 200) {\n        results.push(res.json());\n      }\n    });\n    if (rightIds.length > 0) {\n      const rightResults = await this._updateMessagesApi(rightIds, status);\n      if (rightResults.length > 0) {\n        results.concat(rightResults);\n      }\n    }\n    return results;\n  }\n\n  async readMessages(conversationId) {\n    const conversation = this.conversationMap[conversationId];\n    if (!conversation) {\n      return null;\n    }\n    const unreadMessageIds = Object.keys(conversation.unreadMessages);\n    if (unreadMessageIds.length === 0) {\n      return null;\n    }\n    try {\n      const updatedMessages = await this._updateMessagesApi(unreadMessageIds, 'Read');\n      this.store.dispatch({\n        type: this.actionTypes.updateMessages,\n        records: updatedMessages,\n      });\n    } catch (error) {\n      console.error(error);\n    }\n    return null;\n  }\n\n  searchMessagesText(searchText) {\n    return this.messages.filter((message) => {\n      if (\n        message.subject &&\n        message.subject.toLowerCase().indexOf(searchText) >= 0\n      ) {\n        return true;\n      }\n      return false;\n    });\n  }\n\n  updateConversationRecipientList(conversationId, recipients) {\n    this.store.dispatch({\n      type: this.actionTypes.updateConversationRecipients,\n      conversationId,\n      recipients,\n    });\n  }\n\n  pushMessages(records) {\n    this.store.dispatch({\n      type: this.actionTypes.updateMessages,\n      records,\n    });\n  }\n\n  pushMessage(record) {\n    this.pushMessages([record]);\n  }\n\n  get cache() {\n    return this._storage.getItem(this._storageKey);\n  }\n\n  get messages() {\n    return this.cache.data.messages;\n  }\n\n  get conversations() {\n    return this.cache.data.conversations;\n  }\n\n  get conversationMap() {\n    return this.cache.data.conversationMap;\n  }\n\n  get updatedTimestamp() {\n    return this.cache.updatedTimestamp;\n  }\n\n  get syncTimestamp() {\n    return this.cache.data.syncTimestamp;\n  }\n\n  get syncToken() {\n    return this.cache.syncToken;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get unreadCounts() {\n    return this._selectors.unreadCounts();\n  }\n\n  get messageStoreStatus() {\n    return this.state.messageStoreStatus;\n  }\n\n  get ready() {\n    return this.status === moduleStatus.ready;\n  }\n\n  get pending() {\n    return this.status === moduleStatus.pending;\n  }\n}\n"]}