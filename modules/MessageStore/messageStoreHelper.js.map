{"version":3,"sources":["modules/MessageStore/messageStoreHelper.js"],"names":["normalizeRecord","messageIsUnread","getMessageSyncParams","prepareNewMessagesData","filterNullFromConversations","findIndexOfConversations","findIndexOfMessages","calcUnreadCount","pushRecordsToMessageData","updateConversationRecipients","messageHelper","record","conversationId","conversation","id","message","direction","readStatus","messageIsDeleted","syncToken","dateTo","Date","recordCount","syncType","iSync","lastSevenDate","setDate","getDate","params","fSync","dateFrom","toISOString","messages","conversations","conversationMap","syncConversationId","newConversations","newConversationMap","newMessages","messageMap","forEach","key","unreadMessages","push","length","index","existedIndex","undefined","records","addMessageToMessageMap","setSyncTokenToConversation","addMessageToConversationMap","pushMessageToConversations","unreadCounts","pushMessageToMessages","deleteMessageFromConversations","conversationMessages","filter","oldMessage","deleteMessageFromMessages","replaceMessageInConversations","oldConversation","newMessage","oldCreated","creationTime","newCreated","replaceMessageInMessages","existedIndexofMessages","existedIndexofConversations","isDeleted","isAcceptable","messageIsAcceptable","filteredConversation","item","recipients","conversationIndex","map","recipient"],"mappings":"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","file":"messageStoreHelper.js","sourcesContent":["import * as messageHelper from '../../lib/messageHelper';\nimport removeUri from '../../lib/removeUri';\nimport syncTypes from '../../enums/syncTypes';\n\nexport function normalizeRecord(record) {\n  return {\n    ...record,\n    conversationId: record.conversation.id,\n  };\n}\n\nexport function messageIsUnread(message) {\n  return (\n    message.direction === 'Inbound' &&\n    message.readStatus !== 'Read' &&\n    !(messageHelper.messageIsDeleted(message))\n  );\n}\n\nexport function getMessageSyncParams({\n  syncToken,\n  conversationId,\n  dateTo = new Date(),\n  recordCount = 250,\n}) {\n  if (syncToken) {\n    return {\n      syncToken,\n      syncType: syncTypes.iSync,\n    };\n  }\n  const lastSevenDate = new Date();\n  lastSevenDate.setDate(lastSevenDate.getDate() - 7);\n  const params = {\n    syncType: syncTypes.fSync,\n    dateFrom: lastSevenDate.toISOString(),\n    dateTo: new Date(dateTo).toISOString(),\n    recordCount\n  };\n  if (conversationId) {\n    params.conversationId = conversationId;\n  }\n  return params;\n}\n\nexport function prepareNewMessagesData({\n  messages,\n  conversations,\n  conversationMap,\n  syncToken,\n  syncConversationId,\n}) {\n  const newConversations = [];\n  const newConversationMap = {};\n  const newMessages = [];\n  const messageMap = {};\n  // copy old conversationMap to new conversationMap hash\n  Object.keys(conversationMap).forEach((key) => {\n    const conversation = {\n      ...conversationMap[key],\n      unreadMessages: {\n        ...conversationMap[key].unreadMessages,\n      },\n    };\n    // if converstation is not sync with conversation Id, update all conversation sync token\n    if (syncToken && (!syncConversationId || syncConversationId === key)) {\n      conversation.syncToken = syncToken;\n    }\n    newConversationMap[key] = conversation;\n  });\n  // copy old conversations to new conversations array\n  conversations.forEach((conversation) => {\n    newConversations.push({ ...conversation });\n  });\n  messages.forEach((message) => {\n    newMessages.push({ ...message });\n    messageMap[message.id] = newMessages.length - 1;\n  });\n  return {\n    newConversations,\n    newConversationMap,\n    newMessages,\n    messageMap,\n  };\n}\n\nexport function filterNullFromConversations({\n  conversations,\n  conversationMap,\n}) {\n  const newConversations = [];\n  // copy old conversationMap to new conversationMap hash\n  // copy old conversations to new conversations array\n  conversations.forEach((conversation) => {\n    if (!conversation) {\n      return;\n    }\n    const conversationId = conversation.conversationId;\n    newConversations.push({ ...conversation });\n    conversationMap[conversationId].index = newConversations.length - 1;\n  });\n  return {\n    conversations: newConversations,\n    conversationMap,\n  };\n}\n\nexport function findIndexOfConversations(newConversationMap, record) {\n  const conversationId = record.conversation && record.conversation.id;\n  const existedIndex =\n    newConversationMap[conversationId] &&\n    newConversationMap[conversationId].index;\n  if (existedIndex !== undefined && existedIndex !== null) {\n    return existedIndex;\n  }\n  return -1;\n}\n\nexport function findIndexOfMessages(messageMap, record) {\n  if (messageMap[record.id] !== undefined) {\n    return messageMap[record.id];\n  }\n  return -1;\n}\n\nexport function calcUnreadCount(conversation) {\n  return Object.keys(conversation.unreadMessages).length;\n}\n\nexport function pushRecordsToMessageData({\n  messages,\n  conversations,\n  conversationMap,\n  records,\n  syncToken,\n  syncConversationId,\n}) {\n  const {\n    newConversations,\n    newConversationMap,\n    newMessages,\n    messageMap,\n  } = prepareNewMessagesData({\n    messages,\n    conversations,\n    conversationMap,\n    syncToken,\n    syncConversationId,\n  });\n  const addMessageToMessageMap = (message, index) => {\n    messageMap[message.id] = index;\n  };\n  const setSyncTokenToConversation = (conversation) => {\n    if (\n      syncToken &&\n      (\n        !syncConversationId ||\n        (syncConversationId && syncConversationId === conversation.id)\n      )\n    ) {\n      conversation.syncToken = syncToken;\n    }\n  };\n  const addMessageToConversationMap = (message, index) => {\n    const conversationId = message.conversationId;\n    const conversation = newConversationMap[conversationId] || { unreadMessages: {} };\n    conversation.index = index;\n    conversation.id = conversationId;\n    setSyncTokenToConversation(conversation);\n    if (messageIsUnread(message)) {\n      conversation.unreadMessages[message.id] = 1;\n    } else if (conversation.unreadMessages[message.id]) {\n      delete conversation.unreadMessages[message.id];\n    }\n    newConversationMap[conversationId] = conversation;\n  };\n  const pushMessageToConversations = (record) => {\n    const message = normalizeRecord(removeUri(record));\n    const index = newConversations.length;\n    addMessageToConversationMap(message, index);\n    const conversation = newConversationMap[message.conversationId];\n    if (conversation) {\n      message.unreadCounts = calcUnreadCount(conversation);\n    } else {\n      message.unreadCounts = 0;\n    }\n    newConversations.push(message);\n  };\n  const pushMessageToMessages = (record) => {\n    const message = normalizeRecord(removeUri(record));\n    newMessages.push(message);\n    addMessageToMessageMap(message, newMessages.length - 1);\n  };\n  // TODO: delete message or conversation?\n  const deleteMessageFromConversations = (index, record) => {\n    const message = newConversations[index];\n    if (message.id === record.id) {\n      const conversationMessages = newMessages.filter(oldMessage => (\n        oldMessage && oldMessage.id !== message.id &&\n          oldMessage.conversationId === message.conversationId\n      ));\n      if (conversationMessages.length === 0) {\n        newConversations[index] = null;\n        delete newConversationMap[record.conversation.id];\n        return;\n      }\n      newConversations[index] = conversationMessages[conversationMessages.length - 1];\n    }\n    const conversation = newConversationMap[record.conversation.id];\n    setSyncTokenToConversation(conversation);\n    delete conversation.unreadMessages[record.id];\n    message.unreadCounts = calcUnreadCount(conversation);\n  };\n  const deleteMessageFromMessages = (index, record) => {\n    newMessages[index] = null;\n    delete messageMap[record.id];\n  };\n  const replaceMessageInConversations = (index, record) => {\n    const oldConversation = newConversations[index];\n    const newMessage = {\n      ...oldConversation,\n      ...normalizeRecord(removeUri(record)),\n    };\n    const oldCreated = new Date(oldConversation.creationTime);\n    const newCreated = new Date(record.creationTime);\n    if (newCreated >= oldCreated) {\n      // move the message to the top of new Messages\n      newConversations[index] = null;\n      newConversations.push(newMessage);\n      addMessageToConversationMap(newMessage, newConversations.length - 1);\n    } else {\n      addMessageToConversationMap(newMessage, index);\n    }\n    const conversation = newConversationMap[newMessage.conversationId];\n    newMessage.unreadCounts = calcUnreadCount(conversation);\n  };\n  const replaceMessageInMessages = (index, record) => {\n    newMessages[index] = normalizeRecord(removeUri(record));\n  };\n  records.forEach((record) => {\n    if (!record.conversation) {\n      return;\n    }\n    const existedIndexofMessages = findIndexOfMessages(messageMap, record);\n    const existedIndexofConversations = findIndexOfConversations(newConversationMap, record);\n    const isDeleted = messageHelper.messageIsDeleted(record);\n    const isAcceptable = messageHelper.messageIsAcceptable(record);\n    if (existedIndexofMessages > -1) {\n      if (isDeleted) {\n        deleteMessageFromMessages(existedIndexofMessages, record);\n      } else {\n        replaceMessageInMessages(existedIndexofMessages, record);\n      }\n    } else if (isAcceptable) {\n      pushMessageToMessages(record);\n    }\n    if (existedIndexofConversations > -1) {\n      if (isDeleted) {\n        deleteMessageFromConversations(existedIndexofConversations, record);\n      } else {\n        replaceMessageInConversations(existedIndexofConversations, record);\n      }\n    } else if (isAcceptable) {\n      pushMessageToConversations(record);\n    }\n  });\n  const filteredConversation = filterNullFromConversations({\n    conversations: newConversations,\n    conversationMap: newConversationMap,\n  });\n  return {\n    ...filteredConversation,\n    messages: newMessages.filter(item => (item !== null)),\n  };\n}\n\nexport function updateConversationRecipients({\n  messages,\n  conversations,\n  conversationMap,\n  conversationId,\n  recipients,\n}) {\n  const conversationIndex =\n    conversationMap[conversationId] && conversationMap[conversationId].index;\n  if (conversationIndex === undefined) {\n    return { messages, conversationMap, conversations };\n  }\n  const newConversations = [];\n  conversations.forEach((conversation) => {\n    newConversations.push({ ...conversation });\n  });\n  const conversation = newConversations[conversationIndex];\n  conversation.recipients = recipients.map(recipient => ({ ...recipient }));\n  return {\n    messages,\n    conversationMap,\n    conversations: newConversations,\n  };\n}\n"]}