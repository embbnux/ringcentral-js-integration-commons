{"version":3,"sources":["modules/MessageStore/messageStoreHelper.js"],"names":["pushMessageToConversationMessages","pushMessageToMesages","getNewConversationsAndMessagesFromRecords","filterConversationUnreadMessages","updateMessagesUnreadCounts","getMessageSyncParams","messageHelper","pushOrReplaceOrDeleteMessage","messages","message","isFind","replaceMessage","pushMessage","deleteMessage","messageLength","length","messageExistIndex","index","oldMessage","newMessage","messageIsAcceptable","messageIsDeleted","id","push","splice","conversation","oldCreated","Date","creationTime","newCreated","records","syncToken","conversations","forEach","record","messaageIsTextMessage","conversationId","oldMessages","unReadMessages","filter","direction","readStatus","totalUnreadCounts","isRead","unreadCounts","syncType","lastSevenDate","setDate","getDate","params","dateFrom","toISOString"],"mappings":"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","file":"messageStoreHelper.js","sourcesContent":["import * as messageHelper from '../../lib/messageHelper';\n\nfunction pushOrReplaceOrDeleteMessage({\n  messages,\n  message,\n  isFind,\n  replaceMessage,\n  pushMessage,\n  deleteMessage\n}) {\n  const messageLength = messages.length;\n  let messageExistIndex = null;\n  if (messageLength > 0) {\n    for (let index = (messageLength - 1); index >= 0; index -= 1) {\n      if (isFind({\n        oldMessage: messages[index],\n        newMessage: message,\n      })) {\n        messageExistIndex = index;\n        break;\n      }\n    }\n  }\n  if (messageExistIndex === null) {\n    if (messageHelper.messageIsAcceptable(message)) {\n      pushMessage(message);\n    }\n    return;\n  }\n  if (messageHelper.messageIsDeleted(message)) {\n    if (messages[messageExistIndex].id === message.id) {\n      deleteMessage(messageExistIndex);\n    }\n    return;\n  }\n  replaceMessage({ index: messageExistIndex, newMessage: message });\n}\n\nexport function pushMessageToConversationMessages({ messages, message }) {\n  const isFind = ({ oldMessage, newMessage }) => (\n    oldMessage.id === newMessage.id\n  );\n  const replaceMessage = ({ index, newMessage }) => {\n    messages[index] = newMessage;\n  };\n  const pushMessage = (newMessage) => {\n    messages.push(newMessage);\n  };\n  const deleteMessage = (index) => {\n    messages.splice(index, 1);\n  };\n  pushOrReplaceOrDeleteMessage({\n    messages,\n    message,\n    isFind,\n    replaceMessage,\n    pushMessage,\n    deleteMessage\n  });\n  return messages;\n}\n\nexport function pushMessageToMesages({ messages, message }) {\n  const isFind = ({ oldMessage, newMessage }) => (\n    oldMessage.id === newMessage.id ||\n      oldMessage.conversation.id === newMessage.conversation.id\n  );\n  const replaceMessage = ({ index, newMessage }) => {\n    const oldCreated = new Date(messages[index].creationTime);\n    const newCreated = new Date(message.creationTime);\n    if (newCreated >= oldCreated) {\n      messages.splice(index, 1);\n      messages.push(newMessage);\n    }\n  };\n  const pushMessage = (newMessage) => {\n    messages.push(newMessage);\n  };\n  const deleteMessage = (index) => {\n    messages.splice(index, 1);\n  };\n\n  pushOrReplaceOrDeleteMessage({\n    messages,\n    message,\n    isFind,\n    replaceMessage,\n    pushMessage,\n    deleteMessage\n  });\n  return messages;\n}\n\nexport function getNewConversationsAndMessagesFromRecords({\n  records,\n  syncToken,\n  conversations,\n  messages,\n}) {\n  records.forEach((record) => {\n    if (!messageHelper.messaageIsTextMessage(record)) {\n      return;\n    }\n    const conversationId = record.conversation.id;\n    let conversation = conversations[conversationId];\n    if (!conversation) {\n      conversation = { messages: [] };\n    }\n    const oldMessages = conversation.messages;\n    conversation.messages = pushMessageToConversationMessages({\n      messages: oldMessages,\n      message: record,\n    });\n    if (syncToken) {\n      conversation.syncToken = syncToken;\n    }\n    conversation.id = conversationId;\n    conversations[conversationId] = conversation;\n    messages = pushMessageToMesages({\n      messages,\n      message: record\n    });\n  });\n  return { conversations, messages };\n}\n\nexport function filterConversationUnreadMessages(conversation) {\n  const unReadMessages = conversation.messages.filter(record => (\n    record.direction === 'Inbound' &&\n    !(messageHelper.messageIsDeleted(record)) &&\n    record.readStatus !== 'Read'\n  ));\n  return unReadMessages;\n}\n\nexport function updateMessagesUnreadCounts(messages, conversations) {\n  let totalUnreadCounts = 0;\n  for (let index = 0; index < messages.length; index += 1) {\n    const message = messages[index];\n    const conversation = conversations[message.conversation.id];\n    const unReadMessages = filterConversationUnreadMessages(conversation);\n    totalUnreadCounts += unReadMessages.length;\n    message.isRead = (unReadMessages.length === 0);\n  }\n  return {\n    messages,\n    unreadCounts: totalUnreadCounts\n  };\n}\n\nexport function getMessageSyncParams({ syncToken, conversationId }) {\n  if (syncToken) {\n    return {\n      syncToken,\n      syncType: 'ISync',\n    };\n  }\n  const lastSevenDate = new Date();\n  lastSevenDate.setDate(lastSevenDate.getDate() - 7);\n  const params = {\n    syncType: 'FSync',\n    dateFrom: lastSevenDate.toISOString(),\n  };\n  if (conversationId) {\n    params.conversationId = conversationId;\n  }\n  return params;\n}\n"]}