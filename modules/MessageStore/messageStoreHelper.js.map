{"version":3,"sources":["modules/MessageStore/messageStoreHelper.js"],"names":["normalizeRecord","messageIsUnread","getMessageSyncParams","prepareNewMessagesData","filterNullFromConversations","findIndexOfConversations","findIndexOfMessages","calcUnreadCount","pushRecordsToMessageData","updateConversationRecipients","messageHelper","record","conversationId","conversation","id","message","direction","readStatus","messageIsDeleted","syncToken","dateTo","syncType","iSync","lastSevenDate","Date","setDate","getDate","params","fSync","dateFrom","toISOString","messages","conversations","conversationMap","syncConversationId","newConversations","newConversationMap","newMessages","messageMap","forEach","key","unreadMessages","push","length","index","existedIndex","undefined","records","addMessageToMessageMap","setSyncTokenToConversation","addMessageToConversationMap","pushMessageToConversations","unreadCounts","pushMessageToMessages","deleteMessageFromConversations","conversationMessages","filter","oldMessage","deleteMessageFromMessages","replaceMessageInConversations","oldConversation","newMessage","oldCreated","creationTime","newCreated","replaceMessageInMessages","existedIndexofMessages","existedIndexofConversations","isDeleted","isAcceptable","messageIsAcceptable","filteredConversation","item","recipients","conversationIndex","map","recipient"],"mappings":"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","file":"messageStoreHelper.js","sourcesContent":["import * as messageHelper from '../../lib/messageHelper';\nimport removeUri from '../../lib/removeUri';\nimport syncTypes from '../../enums/syncTypes';\n\nexport function normalizeRecord(record) {\n  return {\n    ...record,\n    conversationId: record.conversation.id,\n  };\n}\n\nexport function messageIsUnread(message) {\n  return (\n    message.direction === 'Inbound' &&\n    message.readStatus !== 'Read' &&\n    !(messageHelper.messageIsDeleted(message))\n  );\n}\n\nexport function getMessageSyncParams({\n  syncToken,\n  conversationId,\n  dateTo,\n}) {\n  if (syncToken) {\n    return {\n      syncToken,\n      syncType: syncTypes.iSync,\n    };\n  }\n  const lastSevenDate = new Date();\n  lastSevenDate.setDate(lastSevenDate.getDate() - 7);\n  const params = {\n    syncType: syncTypes.fSync,\n    dateFrom: lastSevenDate.toISOString(),\n  };\n  if (dateTo) {\n    params.dateTo = new Date(dateTo).toISOString();\n  }\n  if (conversationId) {\n    params.conversationId = conversationId;\n  }\n  return params;\n}\n\nexport function prepareNewMessagesData({\n  messages,\n  conversations,\n  conversationMap,\n  syncToken,\n  syncConversationId,\n}) {\n  const newConversations = [];\n  const newConversationMap = {};\n  const newMessages = [];\n  const messageMap = {};\n  // copy old conversationMap to new conversationMap hash\n  Object.keys(conversationMap).forEach((key) => {\n    const conversation = {\n      ...conversationMap[key],\n      unreadMessages: {\n        ...conversationMap[key].unreadMessages,\n      },\n    };\n    // if converstation is not sync with conversation Id, update all conversation sync token\n    if (syncToken && (!syncConversationId || syncConversationId === key)) {\n      conversation.syncToken = syncToken;\n    }\n    newConversationMap[key] = conversation;\n  });\n  // copy old conversations to new conversations array\n  conversations.forEach((conversation) => {\n    newConversations.push({ ...conversation });\n  });\n  messages.forEach((message) => {\n    newMessages.push({ ...message });\n    messageMap[message.id] = newMessages.length - 1;\n  });\n  return {\n    newConversations,\n    newConversationMap,\n    newMessages,\n    messageMap,\n  };\n}\n\nexport function filterNullFromConversations({\n  conversations,\n  conversationMap,\n}) {\n  const newConversations = [];\n  // copy old conversationMap to new conversationMap hash\n  // copy old conversations to new conversations array\n  conversations.forEach((conversation) => {\n    if (!conversation) {\n      return;\n    }\n    const conversationId = conversation.conversationId;\n    newConversations.push({ ...conversation });\n    conversationMap[conversationId].index = newConversations.length - 1;\n  });\n  return {\n    conversations: newConversations,\n    conversationMap,\n  };\n}\n\nexport function findIndexOfConversations(newConversationMap, record) {\n  const conversationId = record.conversation && record.conversation.id;\n  const existedIndex =\n    newConversationMap[conversationId] &&\n    newConversationMap[conversationId].index;\n  if (existedIndex !== undefined && existedIndex !== null) {\n    return existedIndex;\n  }\n  return -1;\n}\n\nexport function findIndexOfMessages(messageMap, record) {\n  if (messageMap[record.id] !== undefined) {\n    return messageMap[record.id];\n  }\n  return -1;\n}\n\nexport function calcUnreadCount(conversation) {\n  return Object.keys(conversation.unreadMessages).length;\n}\n\nexport function pushRecordsToMessageData({\n  messages,\n  conversations,\n  conversationMap,\n  records,\n  syncToken,\n  syncConversationId,\n}) {\n  const {\n    newConversations,\n    newConversationMap,\n    newMessages,\n    messageMap,\n  } = prepareNewMessagesData({\n    messages,\n    conversations,\n    conversationMap,\n    syncToken,\n    syncConversationId,\n  });\n  const addMessageToMessageMap = (message, index) => {\n    messageMap[message.id] = index;\n  };\n  const setSyncTokenToConversation = (conversation) => {\n    if (\n      syncToken &&\n      (\n        !syncConversationId ||\n        (syncConversationId && syncConversationId === conversation.id)\n      )\n    ) {\n      conversation.syncToken = syncToken;\n    }\n  };\n  const addMessageToConversationMap = (message, index) => {\n    const conversationId = message.conversationId;\n    const conversation = newConversationMap[conversationId] || { unreadMessages: {} };\n    conversation.index = index;\n    conversation.id = conversationId;\n    setSyncTokenToConversation(conversation);\n    if (messageIsUnread(message)) {\n      conversation.unreadMessages[message.id] = 1;\n    } else if (conversation.unreadMessages[message.id]) {\n      delete conversation.unreadMessages[message.id];\n    }\n    newConversationMap[conversationId] = conversation;\n  };\n  const pushMessageToConversations = (record) => {\n    const message = normalizeRecord(removeUri(record));\n    const index = newConversations.length;\n    addMessageToConversationMap(message, index);\n    const conversation = newConversationMap[message.conversationId];\n    if (conversation) {\n      message.unreadCounts = calcUnreadCount(conversation);\n    } else {\n      message.unreadCounts = 0;\n    }\n    newConversations.push(message);\n  };\n  const pushMessageToMessages = (record) => {\n    const message = normalizeRecord(removeUri(record));\n    newMessages.push(message);\n    addMessageToMessageMap(message, newMessages.length - 1);\n  };\n  // TODO: delete message or conversation?\n  const deleteMessageFromConversations = (index, record) => {\n    const message = newConversations[index];\n    if (message.id === record.id) {\n      const conversationMessages = newMessages.filter(oldMessage => (\n        oldMessage && oldMessage.id !== message.id &&\n          oldMessage.conversationId === message.conversationId\n      ));\n      if (conversationMessages.length === 0) {\n        newConversations[index] = null;\n        delete newConversationMap[record.conversation.id];\n        return;\n      }\n      newConversations[index] = conversationMessages[conversationMessages.length - 1];\n    }\n    const conversation = newConversationMap[record.conversation.id];\n    setSyncTokenToConversation(conversation);\n    delete conversation.unreadMessages[record.id];\n    message.unreadCounts = calcUnreadCount(conversation);\n  };\n  const deleteMessageFromMessages = (index, record) => {\n    newMessages[index] = null;\n    delete messageMap[record.id];\n  };\n  const replaceMessageInConversations = (index, record) => {\n    const oldConversation = newConversations[index];\n    const newMessage = {\n      ...oldConversation,\n      ...normalizeRecord(removeUri(record)),\n    };\n    const oldCreated = new Date(oldConversation.creationTime);\n    const newCreated = new Date(record.creationTime);\n    if (newCreated >= oldCreated) {\n      // move the message to the top of new Messages\n      newConversations[index] = null;\n      newConversations.push(newMessage);\n      addMessageToConversationMap(newMessage, newConversations.length - 1);\n    } else {\n      addMessageToConversationMap(newMessage, index);\n    }\n    const conversation = newConversationMap[newMessage.conversationId];\n    newMessage.unreadCounts = calcUnreadCount(conversation);\n  };\n  const replaceMessageInMessages = (index, record) => {\n    newMessages[index] = normalizeRecord(removeUri(record));\n  };\n  records.forEach((record) => {\n    if (!record || !record.conversation) {\n      return;\n    }\n    const existedIndexofMessages = findIndexOfMessages(messageMap, record);\n    const existedIndexofConversations = findIndexOfConversations(newConversationMap, record);\n    const isDeleted = messageHelper.messageIsDeleted(record);\n    const isAcceptable = messageHelper.messageIsAcceptable(record);\n    if (existedIndexofMessages > -1) {\n      if (isDeleted) {\n        deleteMessageFromMessages(existedIndexofMessages, record);\n      } else {\n        replaceMessageInMessages(existedIndexofMessages, record);\n      }\n    } else if (isAcceptable) {\n      pushMessageToMessages(record);\n    }\n    if (existedIndexofConversations > -1) {\n      if (isDeleted) {\n        deleteMessageFromConversations(existedIndexofConversations, record);\n      } else {\n        replaceMessageInConversations(existedIndexofConversations, record);\n      }\n    } else if (isAcceptable) {\n      pushMessageToConversations(record);\n    }\n  });\n  const filteredConversation = filterNullFromConversations({\n    conversations: newConversations,\n    conversationMap: newConversationMap,\n  });\n  return {\n    ...filteredConversation,\n    messages: newMessages.filter(item => (item !== null)),\n  };\n}\n\nexport function updateConversationRecipients({\n  messages,\n  conversations,\n  conversationMap,\n  conversationId,\n  recipients,\n}) {\n  const conversationIndex =\n    conversationMap[conversationId] && conversationMap[conversationId].index;\n  if (conversationIndex === undefined) {\n    return { messages, conversationMap, conversations };\n  }\n  const newConversations = [];\n  conversations.forEach((conversation) => {\n    newConversations.push({ ...conversation });\n  });\n  const conversation = newConversations[conversationIndex];\n  conversation.recipients = recipients.map(recipient => ({ ...recipient }));\n  return {\n    messages,\n    conversationMap,\n    conversations: newConversations,\n  };\n}\n"]}