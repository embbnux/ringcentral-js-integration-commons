{"version":3,"sources":["modules/MessageStore/messageStoreHelper.js"],"names":["normalizeRecord","messageIsUnread","getMessageSyncParams","prepareNewMessagesData","rebuildIndexOfConversationMap","findIndexOfConversations","findIndexOfMessages","calcUnreadCount","pushRecordsToMessageData","updateConversationRecipients","messageHelper","record","conversationId","conversation","id","message","direction","readStatus","messageIsDeleted","syncToken","syncType","iSync","lastSevenDate","Date","setDate","getDate","params","fSync","dateFrom","toISOString","messages","conversations","conversationMap","syncConversationId","newConversations","newConversationMap","newMessages","messageMap","forEach","key","unreadMessages","push","length","index","existedIndex","undefined","records","addMessageToMessageMap","setSyncTokenToConversation","addMessageToConversationMap","pushMessageToConversations","unreadCounts","pushMessageToMessages","deleteMessageFromConversations","conversationMessages","filter","oldMessage","deleteMessageFromMessages","splice","replaceMessageInConversations","oldConversation","newMessage","oldCreated","creationTime","newCreated","replaceMessageInMessages","existedIndexofMessages","existedIndexofConversations","isDeleted","isAcceptable","messageIsAcceptable","rebuildConversation","recipients","conversationIndex"],"mappings":";;;;;;;;;;;;;;QAIgBA,e,GAAAA,e;QAOAC,e,GAAAA,e;QAQAC,oB,GAAAA,oB;QAmBAC,sB,GAAAA,sB;QAyCAC,6B,GAAAA,6B;QAqBAC,wB,GAAAA,wB;QAWAC,mB,GAAAA,mB;QAOAC,e,GAAAA,e;QAIAC,wB,GAAAA,wB;QAkJAC,4B,GAAAA,4B;;AA5QhB;;IAAYC,a;;AACZ;;;;AACA;;;;;;;;AAEO,SAASV,eAAT,CAAyBW,MAAzB,EAAiC;AACtC,oCACKA,MADL;AAEEC,oBAAgBD,OAAOE,YAAP,CAAoBC;AAFtC;AAID;;AAEM,SAASb,eAAT,CAAyBc,OAAzB,EAAkC;AACvC,SACEA,QAAQC,SAAR,KAAsB,SAAtB,IACAD,QAAQE,UAAR,KAAuB,MADvB,IAEA,CAAEP,cAAcQ,gBAAd,CAA+BH,OAA/B,CAHJ;AAKD;;AAEM,SAASb,oBAAT,OAA6D;AAAA,MAA7BiB,SAA6B,QAA7BA,SAA6B;AAAA,MAAlBP,cAAkB,QAAlBA,cAAkB;;AAClE,MAAIO,SAAJ,EAAe;AACb,WAAO;AACLA,0BADK;AAELC,gBAAU,oBAAUC;AAFf,KAAP;AAID;AACD,MAAMC,gBAAgB,IAAIC,IAAJ,EAAtB;AACAD,gBAAcE,OAAd,CAAsBF,cAAcG,OAAd,KAA0B,CAAhD;AACA,MAAMC,SAAS;AACbN,cAAU,oBAAUO,KADP;AAEbC,cAAUN,cAAcO,WAAd;AAFG,GAAf;AAIA,MAAIjB,cAAJ,EAAoB;AAClBc,WAAOd,cAAP,GAAwBA,cAAxB;AACD;AACD,SAAOc,MAAP;AACD;;AAEM,SAASvB,sBAAT,QAMJ;AAAA,MALD2B,QAKC,SALDA,QAKC;AAAA,MAJDC,aAIC,SAJDA,aAIC;AAAA,MAHDC,eAGC,SAHDA,eAGC;AAAA,MAFDb,SAEC,SAFDA,SAEC;AAAA,MADDc,kBACC,SADDA,kBACC;;AACD,MAAMC,mBAAmB,EAAzB;AACA,MAAMC,qBAAqB,EAA3B;AACA,MAAMC,cAAc,EAApB;AACA,MAAMC,aAAa,EAAnB;AACA;AACA,sBAAYL,eAAZ,EAA6BM,OAA7B,CAAqC,UAACC,GAAD,EAAS;AAC5C,QAAM1B,0CACDmB,gBAAgBO,GAAhB,CADC;AAEJC,iDACKR,gBAAgBO,GAAhB,EAAqBC,cAD1B;AAFI,MAAN;AAMA;AACA,QAAIrB,aAAa,CAACc,kBAAlB,EAAsC;AACpCpB,mBAAaM,SAAb,GAAyBA,SAAzB;AACD;AACDgB,uBAAmBI,GAAnB,IAA0B1B,YAA1B;AACD,GAZD;AAaA;AACAkB,gBAAcO,OAAd,CAAsB,UAACzB,YAAD,EAAkB;AACtCqB,qBAAiBO,IAAjB,4BAA2B5B,YAA3B;AACD,GAFD;AAGAiB,WAASQ,OAAT,CAAiB,UAACvB,OAAD,EAAa;AAC5BqB,gBAAYK,IAAZ,4BAAsB1B,OAAtB;AACAsB,eAAWtB,QAAQD,EAAnB,IAAyBsB,YAAYM,MAAZ,GAAqB,CAA9C;AACD,GAHD;AAIA,SAAO;AACLR,sCADK;AAELC,0CAFK;AAGLC,4BAHK;AAILC;AAJK,GAAP;AAMD;;AAEM,SAASjC,6BAAT,QAGJ;AAAA,MAFD2B,aAEC,SAFDA,aAEC;AAAA,MADDC,eACC,SADDA,eACC;;AACD,MAAME,mBAAmB,EAAzB;AACA;AACA;AACAH,gBAAcO,OAAd,CAAsB,UAACzB,YAAD,EAAkB;AACtC,QAAI,CAACA,YAAL,EAAmB;AACjB;AACD;AACD,QAAMD,iBAAiBC,aAAaD,cAApC;AACAsB,qBAAiBO,IAAjB,4BAA2B5B,YAA3B;AACAmB,oBAAgBpB,cAAhB,EAAgC+B,KAAhC,GAAwCT,iBAAiBQ,MAAjB,GAA0B,CAAlE;AACD,GAPD;AAQA,SAAO;AACLX,mBAAeG,gBADV;AAELF;AAFK,GAAP;AAID;;AAEM,SAAS3B,wBAAT,CAAkC8B,kBAAlC,EAAsDxB,MAAtD,EAA8D;AACnE,MAAMC,iBAAiBD,OAAOE,YAAP,IAAuBF,OAAOE,YAAP,CAAoBC,EAAlE;AACA,MAAM8B,eACJT,mBAAmBvB,cAAnB,KACAuB,mBAAmBvB,cAAnB,EAAmC+B,KAFrC;AAGA,MAAIC,iBAAiBC,SAAjB,IAA8BD,iBAAiB,IAAnD,EAAyD;AACvD,WAAOA,YAAP;AACD;AACD,SAAO,CAAC,CAAR;AACD;;AAEM,SAAStC,mBAAT,CAA6B+B,UAA7B,EAAyC1B,MAAzC,EAAiD;AACtD,MAAI0B,WAAW1B,OAAOG,EAAlB,MAA0B+B,SAA9B,EAAyC;AACvC,WAAOR,WAAW1B,OAAOG,EAAlB,CAAP;AACD;AACD,SAAO,CAAC,CAAR;AACD;;AAEM,SAASP,eAAT,CAAyBM,YAAzB,EAAuC;AAC5C,SAAO,oBAAYA,aAAa2B,cAAzB,EAAyCE,MAAhD;AACD;;AAEM,SAASlC,wBAAT,QAOJ;AAAA,MANDsB,QAMC,SANDA,QAMC;AAAA,MALDC,aAKC,SALDA,aAKC;AAAA,MAJDC,eAIC,SAJDA,eAIC;AAAA,MAHDc,OAGC,SAHDA,OAGC;AAAA,MAFD3B,SAEC,SAFDA,SAEC;AAAA,MADDc,kBACC,SADDA,kBACC;;AAAA,8BAMG9B,uBAAuB;AACzB2B,sBADyB;AAEzBC,gCAFyB;AAGzBC,oCAHyB;AAIzBb,wBAJyB;AAKzBc;AALyB,GAAvB,CANH;AAAA,MAECC,gBAFD,yBAECA,gBAFD;AAAA,MAGCC,kBAHD,yBAGCA,kBAHD;AAAA,MAICC,WAJD,yBAICA,WAJD;AAAA,MAKCC,UALD,yBAKCA,UALD;;AAaD,MAAMU,yBAAyB,SAAzBA,sBAAyB,CAAChC,OAAD,EAAU4B,KAAV,EAAoB;AACjDN,eAAWtB,QAAQD,EAAnB,IAAyB6B,KAAzB;AACD,GAFD;AAGA,MAAMK,6BAA6B,SAA7BA,0BAA6B,CAACnC,YAAD,EAAkB;AACnD,QACEM,cAEE,CAACc,kBAAD,IACCA,sBAAsBA,uBAAuBpB,aAAaC,EAH7D,CADF,EAME;AACAD,mBAAaM,SAAb,GAAyBA,SAAzB;AACD;AACF,GAVD;AAWA,MAAM8B,8BAA8B,SAA9BA,2BAA8B,CAAClC,OAAD,EAAU4B,KAAV,EAAoB;AACtD,QAAM/B,iBAAiBG,QAAQH,cAA/B;AACA,QAAMC,eAAesB,mBAAmBvB,cAAnB,KAAsC,EAAE4B,gBAAgB,EAAlB,EAA3D;AACA3B,iBAAa8B,KAAb,GAAqBA,KAArB;AACA9B,iBAAaC,EAAb,GAAkBF,cAAlB;AACAoC,+BAA2BnC,YAA3B;AACA,QAAIZ,gBAAgBc,OAAhB,CAAJ,EAA8B;AAC5BF,mBAAa2B,cAAb,CAA4BzB,QAAQD,EAApC,IAA0C,CAA1C;AACD,KAFD,MAEO,IAAID,aAAa2B,cAAb,CAA4BzB,QAAQD,EAApC,CAAJ,EAA6C;AAClD,aAAOD,aAAa2B,cAAb,CAA4BzB,QAAQD,EAApC,CAAP;AACD;AACDqB,uBAAmBvB,cAAnB,IAAqCC,YAArC;AACD,GAZD;AAaA,MAAMqC,6BAA6B,SAA7BA,0BAA6B,CAACvC,MAAD,EAAY;AAC7C,QAAMI,UAAUf,gBAAgB,yBAAUW,MAAV,CAAhB,CAAhB;AACA,QAAMgC,QAAQT,iBAAiBQ,MAA/B;AACAO,gCAA4BlC,OAA5B,EAAqC4B,KAArC;AACA,QAAM9B,eAAesB,mBAAmBpB,QAAQH,cAA3B,CAArB;AACA,QAAIC,YAAJ,EAAkB;AAChBE,cAAQoC,YAAR,GAAuB5C,gBAAgBM,YAAhB,CAAvB;AACD,KAFD,MAEO;AACLE,cAAQoC,YAAR,GAAuB,CAAvB;AACD;AACDjB,qBAAiBO,IAAjB,CAAsB1B,OAAtB;AACD,GAXD;AAYA,MAAMqC,wBAAwB,SAAxBA,qBAAwB,CAACzC,MAAD,EAAY;AACxC,QAAMI,UAAUf,gBAAgB,yBAAUW,MAAV,CAAhB,CAAhB;AACAyB,gBAAYK,IAAZ,CAAiB1B,OAAjB;AACAgC,2BAAuBhC,OAAvB,EAAgCqB,YAAYM,MAAZ,GAAqB,CAArD;AACD,GAJD;AAKA;AACA,MAAMW,iCAAiC,SAAjCA,8BAAiC,CAACV,KAAD,EAAQhC,MAAR,EAAmB;AACxD,QAAMI,UAAUmB,iBAAiBS,KAAjB,CAAhB;AACA,QAAI5B,QAAQD,EAAR,KAAeH,OAAOG,EAA1B,EAA8B;AAC5B,UAAMwC,uBAAuBlB,YAAYmB,MAAZ,CAAmB;AAAA,eAC9CC,WAAW1C,EAAX,KAAkBC,QAAQD,EAA1B,IAAgC0C,WAAW5C,cAAX,KAA8BG,QAAQH,cADxB;AAAA,OAAnB,CAA7B;AAGA,UAAI0C,qBAAqBZ,MAArB,KAAgC,CAApC,EAAuC;AACrCR,yBAAiBS,KAAjB,IAA0B,IAA1B;AACA,eAAOR,mBAAmBxB,OAAOE,YAAP,CAAoBC,EAAvC,CAAP;AACA;AACD;AACDoB,uBAAiBS,KAAjB,IAA0BW,qBAAqBA,qBAAqBZ,MAArB,GAA8B,CAAnD,CAA1B;AACD;AACD,QAAM7B,eAAesB,mBAAmBxB,OAAOE,YAAP,CAAoBC,EAAvC,CAArB;AACAkC,+BAA2BnC,YAA3B;AACA,WAAOA,aAAa2B,cAAb,CAA4B7B,OAAOG,EAAnC,CAAP;AACAC,YAAQoC,YAAR,GAAuB5C,gBAAgBM,YAAhB,CAAvB;AACD,GAjBD;AAkBA,MAAM4C,4BAA4B,SAA5BA,yBAA4B,CAACd,KAAD,EAAQhC,MAAR,EAAmB;AACnDyB,gBAAYsB,MAAZ,CAAmBf,KAAnB,EAA0B,CAA1B;AACA,WAAON,WAAW1B,OAAOG,EAAlB,CAAP;AACD,GAHD;AAIA,MAAM6C,gCAAgC,SAAhCA,6BAAgC,CAAChB,KAAD,EAAQhC,MAAR,EAAmB;AACvD,QAAMiD,kBAAkB1B,iBAAiBS,KAAjB,CAAxB;AACA,QAAMkB,wCACDD,eADC,EAED5D,gBAAgB,yBAAUW,MAAV,CAAhB,CAFC,CAAN;AAIA,QAAMmD,aAAa,IAAIvC,IAAJ,CAASqC,gBAAgBG,YAAzB,CAAnB;AACA,QAAMC,aAAa,IAAIzC,IAAJ,CAASZ,OAAOoD,YAAhB,CAAnB;AACA,QAAIC,cAAcF,UAAlB,EAA8B;AAC5B;AACA5B,uBAAiBS,KAAjB,IAA0B,IAA1B;AACAT,uBAAiBO,IAAjB,CAAsBoB,UAAtB;AACAZ,kCAA4BY,UAA5B,EAAwC3B,iBAAiBQ,MAAjB,GAA0B,CAAlE;AACD,KALD,MAKO;AACLO,kCAA4BY,UAA5B,EAAwClB,KAAxC;AACD;AACD,QAAM9B,eAAesB,mBAAmB0B,WAAWjD,cAA9B,CAArB;AACAiD,eAAWV,YAAX,GAA0B5C,gBAAgBM,YAAhB,CAA1B;AACD,GAlBD;AAmBA,MAAMoD,2BAA2B,SAA3BA,wBAA2B,CAACtB,KAAD,EAAQhC,MAAR,EAAmB;AAClDyB,gBAAYO,KAAZ,IAAqB3C,gBAAgB,yBAAUW,MAAV,CAAhB,CAArB;AACD,GAFD;AAGAmC,UAAQR,OAAR,CAAgB,UAAC3B,MAAD,EAAY;AAC1B,QAAI,CAACA,OAAOE,YAAZ,EAA0B;AACxB;AACD;AACD,QAAMqD,yBAAyB5D,oBAAoB+B,UAApB,EAAgC1B,MAAhC,CAA/B;AACA,QAAMwD,8BAA8B9D,yBAAyB8B,kBAAzB,EAA6CxB,MAA7C,CAApC;AACA,QAAMyD,YAAY1D,cAAcQ,gBAAd,CAA+BP,MAA/B,CAAlB;AACA,QAAM0D,eAAe3D,cAAc4D,mBAAd,CAAkC3D,MAAlC,CAArB;AACA,QAAIuD,yBAAyB,CAAC,CAA9B,EAAiC;AAC/B,UAAIE,SAAJ,EAAe;AACbX,kCAA0BS,sBAA1B,EAAkDvD,MAAlD;AACD,OAFD,MAEO;AACLsD,iCAAyBC,sBAAzB,EAAiDvD,MAAjD;AACD;AACF,KAND,MAMO,IAAI0D,YAAJ,EAAkB;AACvBjB,4BAAsBzC,MAAtB;AACD;AACD,QAAIwD,8BAA8B,CAAC,CAAnC,EAAsC;AACpC,UAAIC,SAAJ,EAAe;AACbf,uCAA+Bc,2BAA/B,EAA4DxD,MAA5D;AACD,OAFD,MAEO;AACLgD,sCAA8BQ,2BAA9B,EAA2DxD,MAA3D;AACD;AACF,KAND,MAMO,IAAI0D,YAAJ,EAAkB;AACvBnB,iCAA2BvC,MAA3B;AACD;AACF,GA1BD;AA2BA,MAAM4D,sBAAsBnE,8BAA8B;AACxD2B,mBAAeG,gBADyC;AAExDF,qBAAiBG;AAFuC,GAA9B,CAA5B;AAIA,oCACKoC,mBADL;AAEEzC,cAAUM;AAFZ;AAID;;AAEM,SAAS3B,4BAAT,QAMJ;AAAA,MALDqB,QAKC,SALDA,QAKC;AAAA,MAJDC,aAIC,SAJDA,aAIC;AAAA,MAHDC,eAGC,SAHDA,eAGC;AAAA,MAFDpB,cAEC,SAFDA,cAEC;AAAA,MADD4D,UACC,SADDA,UACC;;AACD,MAAMtC,mBAAmB,EAAzB;AACAH,gBAAcO,OAAd,CAAsB,UAACzB,YAAD,EAAkB;AACtCqB,qBAAiBO,IAAjB,4BAA2B5B,YAA3B;AACD,GAFD;AAGA,MAAM4D,oBAAoBzC,gBAAgBpB,cAAhB,EAAgC+B,KAA1D;AACA,MAAM9B,eAAeqB,iBAAiBuC,iBAAjB,CAArB;AACA5D,eAAa2D,UAAb,GAA0BA,UAA1B;AACA,SAAO;AACL1C,sBADK;AAELE,oCAFK;AAGLD,mBAAeG;AAHV,GAAP;AAKD","file":"messageStoreHelper.js","sourcesContent":["import * as messageHelper from '../../lib/messageHelper';\nimport removeUri from '../../lib/removeUri';\nimport syncTypes from '../../enums/syncTypes';\n\nexport function normalizeRecord(record) {\n  return {\n    ...record,\n    conversationId: record.conversation.id,\n  };\n}\n\nexport function messageIsUnread(message) {\n  return (\n    message.direction === 'Inbound' &&\n    message.readStatus !== 'Read' &&\n    !(messageHelper.messageIsDeleted(message))\n  );\n}\n\nexport function getMessageSyncParams({ syncToken, conversationId }) {\n  if (syncToken) {\n    return {\n      syncToken,\n      syncType: syncTypes.iSync,\n    };\n  }\n  const lastSevenDate = new Date();\n  lastSevenDate.setDate(lastSevenDate.getDate() - 7);\n  const params = {\n    syncType: syncTypes.fSync,\n    dateFrom: lastSevenDate.toISOString(),\n  };\n  if (conversationId) {\n    params.conversationId = conversationId;\n  }\n  return params;\n}\n\nexport function prepareNewMessagesData({\n  messages,\n  conversations,\n  conversationMap,\n  syncToken,\n  syncConversationId,\n}) {\n  const newConversations = [];\n  const newConversationMap = {};\n  const newMessages = [];\n  const messageMap = {};\n  // copy old conversationMap to new conversationMap hash\n  Object.keys(conversationMap).forEach((key) => {\n    const conversation = {\n      ...conversationMap[key],\n      unreadMessages: {\n        ...conversationMap[key].unreadMessages,\n      },\n    };\n    // if converstation is not sync with conversation Id, update all conversation sync token\n    if (syncToken && !syncConversationId) {\n      conversation.syncToken = syncToken;\n    }\n    newConversationMap[key] = conversation;\n  });\n  // copy old conversations to new conversations array\n  conversations.forEach((conversation) => {\n    newConversations.push({ ...conversation });\n  });\n  messages.forEach((message) => {\n    newMessages.push({ ...message });\n    messageMap[message.id] = newMessages.length - 1;\n  });\n  return {\n    newConversations,\n    newConversationMap,\n    newMessages,\n    messageMap,\n  };\n}\n\nexport function rebuildIndexOfConversationMap({\n  conversations,\n  conversationMap,\n}) {\n  const newConversations = [];\n  // copy old conversationMap to new conversationMap hash\n  // copy old conversations to new conversations array\n  conversations.forEach((conversation) => {\n    if (!conversation) {\n      return;\n    }\n    const conversationId = conversation.conversationId;\n    newConversations.push({ ...conversation });\n    conversationMap[conversationId].index = newConversations.length - 1;\n  });\n  return {\n    conversations: newConversations,\n    conversationMap,\n  };\n}\n\nexport function findIndexOfConversations(newConversationMap, record) {\n  const conversationId = record.conversation && record.conversation.id;\n  const existedIndex =\n    newConversationMap[conversationId] &&\n    newConversationMap[conversationId].index;\n  if (existedIndex !== undefined && existedIndex !== null) {\n    return existedIndex;\n  }\n  return -1;\n}\n\nexport function findIndexOfMessages(messageMap, record) {\n  if (messageMap[record.id] !== undefined) {\n    return messageMap[record.id];\n  }\n  return -1;\n}\n\nexport function calcUnreadCount(conversation) {\n  return Object.keys(conversation.unreadMessages).length;\n}\n\nexport function pushRecordsToMessageData({\n  messages,\n  conversations,\n  conversationMap,\n  records,\n  syncToken,\n  syncConversationId,\n}) {\n  const {\n    newConversations,\n    newConversationMap,\n    newMessages,\n    messageMap,\n  } = prepareNewMessagesData({\n    messages,\n    conversations,\n    conversationMap,\n    syncToken,\n    syncConversationId,\n  });\n  const addMessageToMessageMap = (message, index) => {\n    messageMap[message.id] = index;\n  };\n  const setSyncTokenToConversation = (conversation) => {\n    if (\n      syncToken &&\n      (\n        !syncConversationId ||\n        (syncConversationId && syncConversationId === conversation.id)\n      )\n    ) {\n      conversation.syncToken = syncToken;\n    }\n  };\n  const addMessageToConversationMap = (message, index) => {\n    const conversationId = message.conversationId;\n    const conversation = newConversationMap[conversationId] || { unreadMessages: {} };\n    conversation.index = index;\n    conversation.id = conversationId;\n    setSyncTokenToConversation(conversation);\n    if (messageIsUnread(message)) {\n      conversation.unreadMessages[message.id] = 1;\n    } else if (conversation.unreadMessages[message.id]) {\n      delete conversation.unreadMessages[message.id];\n    }\n    newConversationMap[conversationId] = conversation;\n  };\n  const pushMessageToConversations = (record) => {\n    const message = normalizeRecord(removeUri(record));\n    const index = newConversations.length;\n    addMessageToConversationMap(message, index);\n    const conversation = newConversationMap[message.conversationId];\n    if (conversation) {\n      message.unreadCounts = calcUnreadCount(conversation);\n    } else {\n      message.unreadCounts = 0;\n    }\n    newConversations.push(message);\n  };\n  const pushMessageToMessages = (record) => {\n    const message = normalizeRecord(removeUri(record));\n    newMessages.push(message);\n    addMessageToMessageMap(message, newMessages.length - 1);\n  };\n  // TODO: delete message or conversation?\n  const deleteMessageFromConversations = (index, record) => {\n    const message = newConversations[index];\n    if (message.id === record.id) {\n      const conversationMessages = newMessages.filter(oldMessage => (\n        oldMessage.id !== message.id && oldMessage.conversationId === message.conversationId\n      ));\n      if (conversationMessages.length === 0) {\n        newConversations[index] = null;\n        delete newConversationMap[record.conversation.id];\n        return;\n      }\n      newConversations[index] = conversationMessages[conversationMessages.length - 1];\n    }\n    const conversation = newConversationMap[record.conversation.id];\n    setSyncTokenToConversation(conversation);\n    delete conversation.unreadMessages[record.id];\n    message.unreadCounts = calcUnreadCount(conversation);\n  };\n  const deleteMessageFromMessages = (index, record) => {\n    newMessages.splice(index, 1);\n    delete messageMap[record.id];\n  };\n  const replaceMessageInConversations = (index, record) => {\n    const oldConversation = newConversations[index];\n    const newMessage = {\n      ...oldConversation,\n      ...normalizeRecord(removeUri(record)),\n    };\n    const oldCreated = new Date(oldConversation.creationTime);\n    const newCreated = new Date(record.creationTime);\n    if (newCreated >= oldCreated) {\n      // move the message to the top of new Messages\n      newConversations[index] = null;\n      newConversations.push(newMessage);\n      addMessageToConversationMap(newMessage, newConversations.length - 1);\n    } else {\n      addMessageToConversationMap(newMessage, index);\n    }\n    const conversation = newConversationMap[newMessage.conversationId];\n    newMessage.unreadCounts = calcUnreadCount(conversation);\n  };\n  const replaceMessageInMessages = (index, record) => {\n    newMessages[index] = normalizeRecord(removeUri(record));\n  };\n  records.forEach((record) => {\n    if (!record.conversation) {\n      return;\n    }\n    const existedIndexofMessages = findIndexOfMessages(messageMap, record);\n    const existedIndexofConversations = findIndexOfConversations(newConversationMap, record);\n    const isDeleted = messageHelper.messageIsDeleted(record);\n    const isAcceptable = messageHelper.messageIsAcceptable(record);\n    if (existedIndexofMessages > -1) {\n      if (isDeleted) {\n        deleteMessageFromMessages(existedIndexofMessages, record);\n      } else {\n        replaceMessageInMessages(existedIndexofMessages, record);\n      }\n    } else if (isAcceptable) {\n      pushMessageToMessages(record);\n    }\n    if (existedIndexofConversations > -1) {\n      if (isDeleted) {\n        deleteMessageFromConversations(existedIndexofConversations, record);\n      } else {\n        replaceMessageInConversations(existedIndexofConversations, record);\n      }\n    } else if (isAcceptable) {\n      pushMessageToConversations(record);\n    }\n  });\n  const rebuildConversation = rebuildIndexOfConversationMap({\n    conversations: newConversations,\n    conversationMap: newConversationMap,\n  });\n  return {\n    ...rebuildConversation,\n    messages: newMessages,\n  };\n}\n\nexport function updateConversationRecipients({\n  messages,\n  conversations,\n  conversationMap,\n  conversationId,\n  recipients,\n}) {\n  const newConversations = [];\n  conversations.forEach((conversation) => {\n    newConversations.push({ ...conversation });\n  });\n  const conversationIndex = conversationMap[conversationId].index;\n  const conversation = newConversations[conversationIndex];\n  conversation.recipients = recipients;\n  return {\n    messages,\n    conversationMap,\n    conversations: newConversations,\n  };\n}\n"]}