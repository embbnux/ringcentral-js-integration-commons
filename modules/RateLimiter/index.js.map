{"version":3,"sources":["modules/RateLimiter/index.js"],"names":["DEFAULT_THROTTLE_DURATION","DEFAULT_ALERT_TTL","RateLimiter","alert","client","environment","globalStorage","throttleDuration","options","actionTypes","_beforeRequestHandler","throttling","Error","rateLimitReached","_checkTimestamp","store","dispatch","type","stopThrottle","_requestErrorHandler","apiResponse","message","wasThrottling","startThrottle","timestamp","Date","now","showAlert","setTimeout","_throttleDuration","_alert","_client","_environment","_storage","_storageKey","_reducer","registerReducer","key","reducer","_timeoutId","_lastEnvironmentCounter","subscribe","ready","_bindHandlers","initSuccess","changeCounter","danger","ttl","allowDuplicates","_unbindHandlers","service","platform","on","events","requestError","beforeRequest","removeListener","state","status","getItem"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport actionTypes from './actionTypes';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport getRateLimiterReducer, {\n  getTimestampReducer,\n} from './getRateLimiterReducer';\nimport errorMessages from './errorMessages';\nimport proxify from '../../lib/proxy/proxify';\n\nconst DEFAULT_THROTTLE_DURATION = 61 * 1000;\nconst DEFAULT_ALERT_TTL = 5 * 1000;\n\n/**\n * @class\n * @description Rate limiter managing module\n */\nexport default class RateLimiter extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Alert} params.alert - alert module instance\n   * @param {Client} params.client - client module instance\n   * @param {Environment} params.environment - environment module instance\n   * @param {GlobalStorage} params.globalStorage - globalStorage module instance\n   * @param {Number} params.throttleDuration - throttle duration, default 61 seconds\n   */\n  constructor({\n    alert,\n    client,\n    environment,\n    globalStorage,\n    throttleDuration = DEFAULT_THROTTLE_DURATION,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._alert = alert;\n    this._client = client;\n    this._environment = environment;\n    this._storage = globalStorage;\n    this._throttleDuration = throttleDuration;\n    this._storageKey = 'rateLimiterTimestamp';\n    this._reducer = getRateLimiterReducer(this.actionTypes);\n    this._storage.registerReducer({\n      key: this._storageKey,\n      reducer: getTimestampReducer(this.actionTypes),\n    });\n    this._timeoutId = null;\n    this._lastEnvironmentCounter = 0;\n  }\n  initialize() {\n    this.store.subscribe(async () => {\n      if (\n        !this.ready &&\n        this._storage.ready &&\n        (!this._environment || this._environment.ready)\n      ) {\n        this._bindHandlers();\n        this.store.dispatch({\n          type: this.actionTypes.initSuccess,\n        });\n      } else if (\n        this.ready &&\n        this._environment &&\n        this._environment.changeCounter !== this._lastEnvironmentCounter\n      ) {\n        this._lastEnvironmentCounter = this._environment.changeCounter;\n        this._bindHandlers();\n      }\n    });\n  }\n  _beforeRequestHandler = () => {\n    if (this.throttling) {\n      throw new Error(errorMessages.rateLimitReached);\n    }\n  }\n  _checkTimestamp = () => {\n    if (!this.throttling) {\n      this.store.dispatch({\n        type: this.actionTypes.stopThrottle,\n      });\n    }\n  }\n  @proxify\n  async showAlert() {\n    if (this.throttling && this._alert) {\n      this._alert.danger({\n        message: errorMessages.rateLimitReached,\n        ttl: DEFAULT_ALERT_TTL,\n        allowDuplicates: false,\n      });\n    }\n  }\n  _requestErrorHandler = (apiResponse) => {\n    if (\n      apiResponse instanceof Error &&\n      apiResponse.message === 'Request rate exceeded'\n    ) {\n      const wasThrottling = this.throttling;\n      this.store.dispatch({\n        type: this.actionTypes.startThrottle,\n        timestamp: Date.now(),\n      });\n      if (!wasThrottling) {\n        this.showAlert();\n      }\n      setTimeout(this._checkTimestamp, this._throttleDuration);\n    }\n  }\n  _bindHandlers() {\n    if (this._unbindHandlers) {\n      this._unbindHandlers();\n    }\n    const client = this._client.service.platform().client();\n    client.on(client.events.requestError, this._requestErrorHandler);\n    client.on(client.events.beforeRequest, this._beforeRequestHandler);\n    this._unbindHandlers = () => {\n      client.removeListener(client.events.requestError, this._requestErrorHandler);\n      client.removeListener(client.events.beforeRequest, this._beforeRequestHandler);\n      this._unbindHandlers = null;\n    };\n  }\n\n  get ttl() {\n    return this.throttling ? this._throttleDuration - (Date.now() - this.timestamp) : 0;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get timestamp() {\n    return this._storage.getItem(this._storageKey);\n  }\n\n  get throttleDuration() {\n    return this._throttleDuration;\n  }\n\n  get throttling() {\n    return Date.now() - this._storage.getItem(this._storageKey) <= this._throttleDuration;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n}\n"]}