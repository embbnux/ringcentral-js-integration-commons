{"version":3,"sources":["modules/ConversationLogger/index.js"],"names":["getLogId","conversationLogIdentityFunction","conversationId","date","conversation","conversationLogId","ConversationLogger","contactMatcher","conversationMatcher","isLoggedContact","extensionInfo","messageStore","dateTimeFormat","formatDateTime","storage","tabManager","options","name","actionTypes","identityFunction","_isLoggedContact","_contactMatcher","_conversationMatcher","_extensionInfo","_dateTimeFormat","_formatDateTime","_messageStore","_storage","_tabManager","_storageKey","_name","registerReducer","key","reducer","addSelector","messages","extensionNumber","mapping","slice","sort","forEach","message","type","utcTimestamp","creationTime","createTime","push","_selectors","conversationLogMap","logIds","output","numberMap","addIfNotExist","contact","number","phoneNumber","self","correspondents","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","conversationLogIds","_lastProcessedConversationLogMap","pending","_readyCheckFunction","_lastProcessedConversations","_lastAutoLog","triggerMatch","dataMapping","length","_autoLogConversation","autoLog","sms","selfNumber","selfMatches","correspondentMatches","reduce","result","concat","selfEntity","lastRecord","map","correspondentEntity","lastActivity","find","item","oldMap","active","id","_processConversationLog","_processConversationLogMap","log","redirect","all","idx","store","dispatch","setAutoLog","getItem"],"mappings":"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","file":"index.js","sourcesContent":["import LoggerBase from '../../lib/LoggerBase';\nimport ensureExist from '../../lib/ensureExist';\nimport actionTypes from './actionTypes';\nimport getDataReducer from './getDataReducer';\nimport messageTypes from '../../enums/messageTypes';\nimport { getNumbersFromMessage, sortByDate } from '../../lib/messageHelper';\n\nexport function getLogId({ conversationId, date }) {\n  return `${conversationId}/${date}`;\n}\n\nexport function conversationLogIdentityFunction(conversation) {\n  return conversation.conversationLogId;\n}\n\nexport default class ConversationLogger extends LoggerBase {\n  constructor({\n    contactMatcher,\n    conversationMatcher,\n    isLoggedContact = () => false,\n    extensionInfo,\n    messageStore,\n    dateTimeFormat,\n    formatDateTime = (...args) => dateTimeFormat.formatDateTime(...args),\n    storage,\n    tabManager,\n    ...options,\n  }) {\n    super({\n      ...options,\n      name: 'conversationLogger',\n      actionTypes,\n      identityFunction: conversationLogIdentityFunction,\n    });\n    this._isLoggedContact = isLoggedContact;\n    this._contactMatcher = this::ensureExist(contactMatcher, 'contactMatcher');\n    this._conversationMatcher = this::ensureExist(conversationMatcher, 'conversationMatcher');\n    this._extensionInfo = this::ensureExist(extensionInfo, 'extensionInfo');\n    this._dateTimeFormat = this::ensureExist(dateTimeFormat, 'dateTimeFormat');\n    this._formatDateTime = formatDateTime;\n    this._messageStore = this::ensureExist(messageStore, 'messageStore');\n    this._storage = this::ensureExist(storage, 'storage');\n    this._tabManager = this::ensureExist(tabManager, 'tabManager');\n    this._storageKey = `${this._name}Data`;\n    this._storage.registerReducer({\n      key: this._storageKey,\n      reducer: getDataReducer(this.actionTypes),\n    });\n\n    this.addSelector('conversationLogMap',\n      () => this._messageStore.messages,\n      () => this._extensionInfo.extensionNumber,\n      (messages, extensionNumber) => {\n        const mapping = {};\n        messages.slice().sort(sortByDate)\n          .forEach((message) => {\n            const conversationId = message.conversationId;\n            const date = this._formatDateTime({\n              type: 'date',\n              utcTimestamp: message.creationTime,\n            });\n            if (!mapping[conversationId]) {\n              mapping[conversationId] = {};\n            }\n            if (!mapping[conversationId][date]) {\n              mapping[conversationId][date] = {\n                conversationLogId: getLogId({ conversationId, date }),\n                conversationId,\n                creationTime: message.createTime, // for sorting\n                date,\n                type: message.type,\n                messages: [],\n                ...getNumbersFromMessage({ extensionNumber, message }),\n              };\n            }\n            mapping[conversationId][date].messages.push(message);\n          });\n        return mapping;\n      },\n    );\n\n    this.addSelector('conversationLogIds',\n      this._selectors.conversationLogMap,\n      (conversationLogMap) => {\n        const logIds = [];\n        Object.keys(conversationLogMap).forEach((conversationId) => {\n          Object.keys(conversationLogMap[conversationId]).forEach((date) => {\n            logIds.push(conversationLogMap[conversationId][date].conversationLogId);\n          });\n        });\n        return logIds;\n      },\n    );\n    this.addSelector('uniqueNumbers',\n      this._selectors.conversationLogMap,\n      (conversationLogMap) => {\n        const output = [];\n        const numberMap = {};\n        function addIfNotExist(contact) {\n          const number = contact.phoneNumber || contact.extensionNumber;\n          if (number && !numberMap[number]) {\n            output.push(number);\n            numberMap[number] = true;\n          }\n        }\n        Object.keys(conversationLogMap).forEach((conversationId) => {\n          Object.keys(conversationLogMap[conversationId]).forEach((date) => {\n            const conversation = conversationLogMap[conversationId][date];\n            addIfNotExist(conversation.self);\n            conversation.correspondents.forEach(addIfNotExist);\n          });\n        });\n        return output;\n      },\n    );\n\n    this._contactMatcher.addQuerySource({\n      getQueriesFn: this._selectors.uniqueNumbers,\n      readyCheckFn: () => (\n        this._messageStore.ready &&\n        this._extensionInfo.ready\n      ),\n    });\n    this._conversationMatcher.addQuerySource({\n      getQueriesFn: this._selectors.conversationLogIds,\n      readyCheckFn: () => (\n        this._messageStore.ready &&\n        this._extensionInfo.ready\n      ),\n    });\n\n    this._lastProcessedConversationLogMap = null;\n  }\n\n  _shouldInit() {\n    return this.pending &&\n      this._messageStore.ready &&\n      this._contactMatcher.ready &&\n      this._conversationMatcher.ready &&\n      this._dateTimeFormat.ready &&\n      this._extensionInfo.ready &&\n      this._storage.ready &&\n      this._tabManager.ready &&\n      this._readyCheckFunction();\n  }\n  _shouldReset() {\n    return this.ready &&\n      (\n        !this._messageStore.ready ||\n        !this._contactMatcher.ready ||\n        !this._conversationMatcher.ready ||\n        !this._dateTimeFormat.ready ||\n        !this._extensionInfo.ready ||\n        !this._storage.ready ||\n        !this._tabManager.ready ||\n        !this._readyCheckFunction()\n      );\n  }\n  _onReset() {\n    this._lastProcessedConversations = null;\n    this._lastAutoLog = null;\n  }\n\n  async _processConversationLog({\n    conversation,\n  }) {\n    await this._conversationMatcher.triggerMatch();\n    if (\n      this._conversationMatcher.dataMapping[conversation.conversationLogId] &&\n      this._conversationMatcher.dataMapping[conversation.conversationLogId].length\n    ) {\n      // update conversation\n      this._autoLogConversation({\n        conversation,\n      });\n    } else if (this.autoLog && conversation.type === messageTypes.sms) {\n      // new entry\n      await this._contactMatcher.triggerMatch();\n      const selfNumber = conversation.self &&\n        (conversation.self.phoneNumber || conversation.self.extensionNumber);\n      const selfMatches = (selfNumber &&\n        this._contactMatcher.dataMapping[conversation.self]) || [];\n      const correspondentMatches = (conversation.correspondents &&\n        conversation.correspondents.reduce((result, contact) => {\n          const number = contact.phoneNumber || contact.extensionNumber;\n          return number && this._contactMatcher.dataMapping[number] ?\n            result.concat(this._contactMatcher.dataMapping[number]) :\n            result;\n        }, [])) || [];\n\n      const selfEntity = (selfMatches &&\n        selfMatches.length === 1 &&\n        selfMatches[0]) ||\n        null;\n\n      // check older dates for existing selected entity match\n      const lastRecord = Object.keys(this.conversationLogMap[conversation.conversationId])\n        .map(date => (\n          this.conversationLogMap[conversation.conversationId][date]\n        )).sort(sortByDate)[1];\n      let correspondentEntity;\n      if (\n        lastRecord &&\n        this._conversationMatcher.dataMapping[lastRecord.conversationLogId] &&\n        this._conversationMatcher.dataMapping[lastRecord.conversationLogId].length\n      ) {\n        const lastActivity = this._conversationMatcher.dataMapping[lastRecord.conversationLogId][0];\n        correspondentEntity = correspondentMatches.find(item => (\n          this._isLoggedContact(conversation, lastActivity, item)\n        ));\n      }\n      correspondentEntity = correspondentEntity ||\n        (correspondentMatches &&\n          correspondentMatches.length === 1 &&\n          correspondentMatches[0]) ||\n        null;\n      await this._autoLogConversation({\n        conversation,\n        selfEntity,\n        correspondentEntity,\n      });\n    }\n  }\n\n  _processConversationLogMap() {\n    if (this.ready && this._lastAutoLog !== this.autoLog) {\n      this._lastAutoLog = this.autoLog;\n      if (this.autoLog) {\n        // force conversation log checking when switch auto log to on\n        this._lastProcessedConversationLogMap = null;\n      }\n    }\n    if (this.ready && this._lastProcessedConversations !== this.conversationLogMap) {\n      this._conversationMatcher.triggerMatch();\n      this._contactMatcher.triggerMatch();\n      const oldMap = this._lastProcessedConversations || {};\n      this._lastProcessedConversations = this.conversationLogMap;\n      if (this._tabManager.active) {\n        Object.keys(this._lastProcessedConversations).forEach((conversationId) => {\n          Object.keys(this._lastProcessedConversations[conversationId]).forEach((date) => {\n            const conversation = this._lastProcessedConversations[conversationId][date];\n            if (\n              !oldMap[conversationId] ||\n              !oldMap[conversationId][date] ||\n              conversation.messages[0].id !== oldMap[conversationId][date].messages[0].id\n            ) {\n              this._processConversationLog({\n                conversation,\n              });\n            }\n          });\n        });\n      }\n    }\n  }\n\n  async _onStateChange() {\n    await super._onStateChange();\n    this._processConversationLogMap();\n  }\n\n  async _autoLogConversation({ conversation, selfEntity, correspondentEntity }) {\n    await this.log({\n      conversation,\n      selfEntity,\n      correspondentEntity,\n    });\n  }\n  async log({ conversation, ...options }) {\n    super.log({ item: conversation, ...options });\n  }\n\n  async logConversation({ conversationId, correspondentEntity, redirect, ...options }) {\n    if (this.conversationLogMap[conversationId]) {\n      await Promise.all(Object.keys(this.conversationLogMap[conversationId])\n        .map(date => this.conversationLogMap[conversationId][date])\n        .sort(sortByDate)\n        .map((conversation, idx) => this.log({\n          ...options,\n          conversation,\n          correspondentEntity,\n          redirect: redirect && idx === 0, // on issue one with redirect\n        })));\n    }\n  }\n\n  get autoLog() {\n    return this._storage.getItem(this._storageKey).autoLog;\n  }\n\n  setAutoLog(autoLog) {\n    if (this.ready && autoLog !== this.autoLog) {\n      this.store.dispatch({\n        type: this.actionTypes.setAutoLog,\n        autoLog,\n      });\n    }\n  }\n\n  get conversationLogMap() {\n    return this._selectors.conversationLogMap();\n  }\n\n  get conversationLogIds() {\n    return this._selectors.conversationLogIds();\n  }\n  getConversationLogId(message) {\n    const conversationId = message.conversationId;\n    const date = this._formatDateTime({\n      type: 'date',\n      utcTimestamp: message.creationTime,\n    });\n    return getLogId({\n      conversationId,\n      date,\n    });\n  }\n\n  get dataMapping() {\n    return this._conversationMatcher.dataMapping;\n  }\n}\n"]}