{"version":3,"sources":["modules/ConversationLogger/index.js"],"names":["getLogId","conversationLogIdentityFunction","conversationId","date","conversation","conversationLogId","ConversationLogger","auth","contactMatcher","conversationMatcher","dateTimeFormat","extensionInfo","messageStore","rolesAndPermissions","storage","tabManager","isLoggedContact","formatDateTime","options","name","actionTypes","identityFunction","_auth","_contactMatcher","_conversationMatcher","_dateTimeFormat","_extensionInfo","_messageStore","_rolesAndPermissions","_storage","_tabManager","_isLoggedContact","_formatDateTime","_storageKey","_name","registerReducer","key","reducer","addSelector","messages","extensionNumber","dataMapping","conversationLogMapping","mapping","slice","sort","forEach","message","type","utcTimestamp","creationTime","createTime","conversationLogMatches","push","_selectors","conversationLogMap","logIds","output","numberMap","addIfNotExist","contact","number","phoneNumber","self","correspondents","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","conversationLogIds","_lastProcessedConversationLogMap","_autoLogQueue","_autoLogPromise","pending","_readyCheckFunction","_lastProcessedConversations","_lastAutoLog","ownerId","all","splice","map","_processConversationLog","length","_processQueue","reduce","result","concat","lastRecord","find","item","lastActivity","correspondentMatches","_getCorrespondentMatches","match","queries","_autoLogConversation","autoLog","sms","numbers","selfNumber","selfMatches","selfEntity","correspondentEntity","getLastMatchedCorrespondentEntity","triggerMatch","oldMap","active","id","_queueAutoLogConversation","_processConversationLogMap","log","redirect","idx","queueIndex","store","dispatch","setAutoLog","serviceFeatures","SMSReceiving","PagerReceiving","enabled","getItem"],"mappings":"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","file":"index.js","sourcesContent":["import LoggerBase from '../../lib/LoggerBase';\nimport ensureExist from '../../lib/ensureExist';\nimport actionTypes from './actionTypes';\nimport getDataReducer from './getDataReducer';\nimport messageTypes from '../../enums/messageTypes';\nimport { getNumbersFromMessage, sortByDate } from '../../lib/messageHelper';\nimport sleep from '../../lib/sleep';\nimport proxify from '../../lib/proxy/proxify';\n\nexport function getLogId({ conversationId, date }) {\n  return `${conversationId}/${date}`;\n}\n\nexport function conversationLogIdentityFunction(conversation) {\n  return conversation.conversationLogId;\n}\n\n/**\n * @class\n * @description Conversation logger module\n */\nexport default class ConversationLogger extends LoggerBase {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Auth} params.auth - auth module instance\n   * @param {ContactMatcher} params.contactMatcher - contactMatcher module instance\n   * @param {ConversationMatcher} params.conversationMatcher - conversationMatcher module instance\n   * @param {DateTimeFormat} params.dateTimeFormat - dateTimeFormat module instance\n   * @param {MessageStore} params.messageStore - messageStore module instance\n   * @param {RolesAndPermissions} params.rolesAndPermissions - rolesAndPermissions module instance\n   * @param {Storage} params.storage - storage module instance\n   * @param {TabManager} params.tabManager - tabManager module instance\n   * @param {Function} params.isLoggedContact - get if contact is logged\n   * @param {Function} params.formatDateTime - data time format\n   */\n  constructor({\n    auth,\n    contactMatcher,\n    conversationMatcher,\n    dateTimeFormat,\n    extensionInfo,\n    messageStore,\n    rolesAndPermissions,\n    storage,\n    tabManager,\n    isLoggedContact = () => false,\n    formatDateTime = (...args) => dateTimeFormat.formatDateTime(...args),\n    ...options\n  }) {\n    super({\n      ...options,\n      name: 'conversationLogger',\n      actionTypes,\n      identityFunction: conversationLogIdentityFunction,\n    });\n    this._auth = this::ensureExist(auth, 'auth');\n    this._contactMatcher = this::ensureExist(contactMatcher, 'contactMatcher');\n    this._conversationMatcher = this::ensureExist(conversationMatcher, 'conversationMatcher');\n    this._dateTimeFormat = this::ensureExist(dateTimeFormat, 'dateTimeFormat');\n    this._extensionInfo = this::ensureExist(extensionInfo, 'extensionInfo');\n    this._messageStore = this::ensureExist(messageStore, 'messageStore');\n    this._rolesAndPermissions = this::ensureExist(rolesAndPermissions, 'rolesAndPermissions');\n    this._storage = this::ensureExist(storage, 'storage');\n    this._tabManager = tabManager;\n    this._isLoggedContact = isLoggedContact;\n    this._formatDateTime = formatDateTime;\n    this._storageKey = `${this._name}Data`;\n    this._storage.registerReducer({\n      key: this._storageKey,\n      reducer: getDataReducer(this.actionTypes),\n    });\n\n    this.addSelector('conversationLogMap',\n      () => this._messageStore.messages,\n      () => this._extensionInfo.extensionNumber,\n      () => this._conversationMatcher.dataMapping,\n      (messages, extensionNumber, conversationLogMapping = {}) => {\n        const mapping = {};\n        messages.slice().sort(sortByDate)\n          .forEach((message) => {\n            const conversationId = message.conversationId;\n            const date = this._formatDateTime({\n              type: 'date',\n              utcTimestamp: message.creationTime,\n            });\n            if (!mapping[conversationId]) {\n              mapping[conversationId] = {};\n            }\n            if (!mapping[conversationId][date]) {\n              const conversationLogId = getLogId({ conversationId, date });\n              mapping[conversationId][date] = {\n                conversationLogId,\n                conversationId,\n                creationTime: message.createTime, // for sorting\n                date,\n                type: message.type,\n                messages: [],\n                conversationLogMatches: conversationLogMapping[conversationLogId] || [],\n                ...getNumbersFromMessage({ extensionNumber, message }),\n              };\n            }\n            mapping[conversationId][date].messages.push(message);\n          });\n        return mapping;\n      },\n    );\n\n    this.addSelector('conversationLogIds',\n      this._selectors.conversationLogMap,\n      (conversationLogMap) => {\n        const logIds = [];\n        Object.keys(conversationLogMap).forEach((conversationId) => {\n          Object.keys(conversationLogMap[conversationId]).forEach((date) => {\n            logIds.push(conversationLogMap[conversationId][date].conversationLogId);\n          });\n        });\n        return logIds;\n      },\n    );\n    this.addSelector('uniqueNumbers',\n      this._selectors.conversationLogMap,\n      (conversationLogMap) => {\n        const output = [];\n        const numberMap = {};\n        function addIfNotExist(contact) {\n          const number = contact.phoneNumber || contact.extensionNumber;\n          if (number && !numberMap[number]) {\n            output.push(number);\n            numberMap[number] = true;\n          }\n        }\n        Object.keys(conversationLogMap).forEach((conversationId) => {\n          Object.keys(conversationLogMap[conversationId]).forEach((date) => {\n            const conversation = conversationLogMap[conversationId][date];\n            addIfNotExist(conversation.self);\n            conversation.correspondents.forEach(addIfNotExist);\n          });\n        });\n        return output;\n      },\n    );\n\n    this._contactMatcher.addQuerySource({\n      getQueriesFn: this._selectors.uniqueNumbers,\n      readyCheckFn: () => (\n        this._messageStore.ready &&\n        this._extensionInfo.ready\n      ),\n    });\n    this._conversationMatcher.addQuerySource({\n      getQueriesFn: this._selectors.conversationLogIds,\n      readyCheckFn: () => (\n        this._messageStore.ready &&\n        this._extensionInfo.ready\n      ),\n    });\n\n    this._lastProcessedConversationLogMap = null;\n    this._autoLogQueue = [];\n    this._autoLogPromise = null;\n  }\n\n  _shouldInit() {\n    return this.pending &&\n      this._contactMatcher.ready &&\n      this._conversationMatcher.ready &&\n      this._dateTimeFormat.ready &&\n      this._extensionInfo.ready &&\n      this._messageStore.ready &&\n      this._rolesAndPermissions.ready &&\n      this._storage.ready &&\n      (!this._tabManager || this._tabManager.ready) &&\n      this._readyCheckFunction();\n  }\n  _shouldReset() {\n    return this.ready &&\n      (\n        !this._contactMatcher.ready ||\n        !this._conversationMatcher.ready ||\n        !this._dateTimeFormat.ready ||\n        !this._extensionInfo.ready ||\n        !this._messageStore.ready ||\n        !this._rolesAndPermissions.ready ||\n        !this._storage.ready ||\n        (this._tabManager && !this._tabManager.ready) ||\n        !this._readyCheckFunction()\n      );\n  }\n  _onReset() {\n    this._lastProcessedConversations = null;\n    this._lastAutoLog = null;\n    this._autoLogPromise = null;\n    this._autoLogQueue = [];\n  }\n\n  async _processQueue() {\n    const ownerId = this._auth.ownerId;\n    await sleep(300);\n    if (ownerId !== this._auth.ownerId) return;\n    await Promise.all(\n      this._autoLogQueue.splice(0, 10)\n        .map(conversation => this._processConversationLog({ conversation }))\n    );\n    if (\n      ownerId === this._auth.ownerId &&\n      this._autoLogQueue.length > 0\n    ) {\n      this._autoLogPromise = this._processQueue();\n    } else {\n      this._autoLogPromise = null;\n    }\n  }\n  _queueAutoLogConversation({\n    conversation,\n  }) {\n    this._autoLogQueue.push(conversation);\n    if (!this._autoLogPromise) {\n      this._autoLogPromise = this._processQueue();\n    }\n  }\n\n  _getCorrespondentMatches(conversation) {\n    return (conversation.correspondents &&\n      conversation.correspondents.reduce((result, contact) => {\n        const number = contact.phoneNumber || contact.extensionNumber;\n        return number && this._contactMatcher.dataMapping[number] ?\n          result.concat(this._contactMatcher.dataMapping[number]) :\n          result;\n      }, [])) || [];\n  }\n  getLastMatchedCorrespondentEntity(conversation) {\n    const lastRecord = Object.keys(this.conversationLogMap[conversation.conversationId])\n      .map(date => (\n        this.conversationLogMap[conversation.conversationId][date]\n      )).sort(sortByDate).find(item => (\n        item.conversationLogMatches.length > 0\n      ));\n    if (\n      lastRecord &&\n      this._conversationMatcher.dataMapping[lastRecord.conversationLogId] &&\n      this._conversationMatcher.dataMapping[lastRecord.conversationLogId].length\n    ) {\n      const lastActivity = this._conversationMatcher.dataMapping[lastRecord.conversationLogId][0];\n      const correspondentMatches = this._getCorrespondentMatches(lastRecord);\n      return correspondentMatches.find(item => (\n        this._isLoggedContact(conversation, lastActivity, item)\n      ));\n    }\n    return null;\n  }\n  async _processConversationLog({\n    conversation,\n  }) {\n    // await this._conversationMatcher.triggerMatch();\n    await this._conversationMatcher.match({ queries: [conversation.conversationLogId] });\n    if (\n      this._conversationMatcher.dataMapping[conversation.conversationLogId] &&\n      this._conversationMatcher.dataMapping[conversation.conversationLogId].length\n    ) {\n      // update conversation\n      await this._autoLogConversation({\n        conversation,\n      });\n    } else if (this.autoLog && conversation.type === messageTypes.sms) {\n      // new entry\n      const numbers = [];\n      const numberMap = {};\n      function addIfNotExist(contact) {\n        const number = contact.phoneNumber || contact.extensionNumber;\n        if (number && !numberMap[number]) {\n          numbers.push(number);\n          numberMap[number] = true;\n        }\n      }\n      addIfNotExist(conversation.self);\n      conversation.correspondents.forEach(addIfNotExist);\n      await this._contactMatcher.match({ queries: numbers });\n      const selfNumber = conversation.self &&\n        (conversation.self.phoneNumber || conversation.self.extensionNumber);\n      const selfMatches = (selfNumber &&\n        this._contactMatcher.dataMapping[conversation.self]) || [];\n      const correspondentMatches = this._getCorrespondentMatches(conversation);\n\n      const selfEntity = (selfMatches &&\n        selfMatches.length === 1 &&\n        selfMatches[0]) ||\n        null;\n\n      let correspondentEntity = this.getLastMatchedCorrespondentEntity(conversation);\n\n      correspondentEntity = correspondentEntity ||\n        (correspondentMatches &&\n          correspondentMatches.length === 1 &&\n          correspondentMatches[0]) ||\n        null;\n      await this._autoLogConversation({\n        conversation,\n        selfEntity,\n        correspondentEntity,\n      });\n    }\n  }\n\n  _processConversationLogMap() {\n    if (this.ready && this._lastAutoLog !== this.autoLog) {\n      this._lastAutoLog = this.autoLog;\n      if (this.autoLog) {\n        // force conversation log checking when switch auto log to on\n        this._lastProcessedConversations = null;\n      }\n    }\n    if (this.ready && this._lastProcessedConversations !== this.conversationLogMap) {\n      this._conversationMatcher.triggerMatch();\n      this._contactMatcher.triggerMatch();\n      const oldMap = this._lastProcessedConversations || {};\n      this._lastProcessedConversations = this.conversationLogMap;\n      if (!this._tabManager || this._tabManager.active) {\n        Object.keys(this._lastProcessedConversations).forEach((conversationId) => {\n          Object.keys(this._lastProcessedConversations[conversationId]).forEach((date) => {\n            const conversation = this._lastProcessedConversations[conversationId][date];\n            if (\n              !oldMap[conversationId] ||\n              !oldMap[conversationId][date] ||\n              conversation.messages[0].id !== oldMap[conversationId][date].messages[0].id\n            ) {\n              this._queueAutoLogConversation({\n                conversation,\n              });\n            }\n          });\n        });\n      }\n    }\n  }\n\n  async _onStateChange() {\n    await super._onStateChange();\n    this._processConversationLogMap();\n  }\n\n  async _autoLogConversation({ conversation, selfEntity, correspondentEntity }) {\n    await this.log({\n      conversation,\n      selfEntity,\n      correspondentEntity,\n    });\n  }\n\n  @proxify\n  async log({ conversation, ...options }) {\n    super.log({ item: conversation, ...options });\n  }\n\n  @proxify\n  async logConversation({ conversationId, correspondentEntity, redirect, ...options }) {\n    if (this.conversationLogMap[conversationId]) {\n      await Promise.all(Object.keys(this.conversationLogMap[conversationId])\n        .map(date => this.conversationLogMap[conversationId][date])\n        .sort(sortByDate)\n        .map((conversation, idx) => {\n          const queueIndex = this._autoLogQueue\n            .find(item => item.conversationLogId === conversation.conversationLogId);\n          if (queueIndex > -1) {\n            this._autoLogQueue.splice(queueIndex, 1);\n          }\n          return this.log({\n            ...options,\n            conversation,\n            correspondentEntity,\n            redirect: redirect && idx === 0, // only direct on the first item\n          });\n        }));\n    }\n  }\n\n  get available() {\n    const {\n      SMSReceiving,\n      PagerReceiving,\n    } = this._rolesAndPermissions.serviceFeatures;\n    return !!(\n      (SMSReceiving && SMSReceiving.enabled) ||\n      (PagerReceiving && PagerReceiving.enabled)\n    );\n  }\n\n  get autoLog() {\n    return this._storage.getItem(this._storageKey).autoLog;\n  }\n\n  @proxify\n  async setAutoLog(autoLog) {\n    if (this.ready && autoLog !== this.autoLog) {\n      this.store.dispatch({\n        type: this.actionTypes.setAutoLog,\n        autoLog,\n      });\n    }\n  }\n\n  get conversationLogMap() {\n    return this._selectors.conversationLogMap();\n  }\n\n  get conversationLogIds() {\n    return this._selectors.conversationLogIds();\n  }\n  getConversationLogId(message) {\n    const conversationId = message.conversationId;\n    const date = this._formatDateTime({\n      type: 'date',\n      utcTimestamp: message.creationTime,\n    });\n    return getLogId({\n      conversationId,\n      date,\n    });\n  }\n\n  get dataMapping() {\n    return this._conversationMatcher.dataMapping;\n  }\n}\n"]}