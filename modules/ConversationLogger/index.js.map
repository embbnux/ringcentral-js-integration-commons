{"version":3,"sources":["modules/ConversationLogger/index.js"],"names":["getLogId","conversationLogIdentityFunction","conversationId","date","conversation","conversationLogId","ConversationLogger","contactMatcher","conversationMatcher","dateTimeFormat","extensionInfo","messageStore","rolesAndPermissions","storage","tabManager","isLoggedContact","formatDateTime","options","name","actionTypes","identityFunction","_contactMatcher","_conversationMatcher","_dateTimeFormat","_extensionInfo","_messageStore","_rolesAndPermissions","_storage","_tabManager","_isLoggedContact","_formatDateTime","_storageKey","_name","registerReducer","key","reducer","addSelector","messages","extensionNumber","mapping","slice","sort","forEach","message","type","utcTimestamp","creationTime","createTime","push","_selectors","conversationLogMap","logIds","output","numberMap","addIfNotExist","contact","number","phoneNumber","self","correspondents","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","conversationLogIds","_lastProcessedConversationLogMap","pending","_readyCheckFunction","_lastProcessedConversations","_lastAutoLog","triggerMatch","dataMapping","length","_autoLogConversation","autoLog","sms","selfNumber","selfMatches","correspondentMatches","reduce","result","concat","selfEntity","lastRecord","map","correspondentEntity","lastActivity","find","item","oldMap","active","id","_processConversationLog","_processConversationLogMap","log","redirect","all","idx","store","dispatch","setAutoLog","serviceFeatures","SMSReceiving","PagerReceiving","enabled","getItem"],"mappings":"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","file":"index.js","sourcesContent":["import LoggerBase from '../../lib/LoggerBase';\nimport ensureExist from '../../lib/ensureExist';\nimport actionTypes from './actionTypes';\nimport getDataReducer from './getDataReducer';\nimport messageTypes from '../../enums/messageTypes';\nimport { getNumbersFromMessage, sortByDate } from '../../lib/messageHelper';\n\nexport function getLogId({ conversationId, date }) {\n  return `${conversationId}/${date}`;\n}\n\nexport function conversationLogIdentityFunction(conversation) {\n  return conversation.conversationLogId;\n}\n\nexport default class ConversationLogger extends LoggerBase {\n  constructor({\n    contactMatcher,\n    conversationMatcher,\n    dateTimeFormat,\n    extensionInfo,\n    messageStore,\n    rolesAndPermissions,\n    storage,\n    tabManager,\n    isLoggedContact = () => false,\n    formatDateTime = (...args) => dateTimeFormat.formatDateTime(...args),\n    ...options,\n  }) {\n    super({\n      ...options,\n      name: 'conversationLogger',\n      actionTypes,\n      identityFunction: conversationLogIdentityFunction,\n    });\n    this._contactMatcher = this::ensureExist(contactMatcher, 'contactMatcher');\n    this._conversationMatcher = this::ensureExist(conversationMatcher, 'conversationMatcher');\n    this._dateTimeFormat = this::ensureExist(dateTimeFormat, 'dateTimeFormat');\n    this._extensionInfo = this::ensureExist(extensionInfo, 'extensionInfo');\n    this._messageStore = this::ensureExist(messageStore, 'messageStore');\n    this._rolesAndPermissions = this::ensureExist(rolesAndPermissions, 'rolesAndPermissions');\n    this._storage = this::ensureExist(storage, 'storage');\n    this._tabManager = this::ensureExist(tabManager, 'tabManager');\n    this._isLoggedContact = isLoggedContact;\n    this._formatDateTime = formatDateTime;\n    this._storageKey = `${this._name}Data`;\n    this._storage.registerReducer({\n      key: this._storageKey,\n      reducer: getDataReducer(this.actionTypes),\n    });\n\n    this.addSelector('conversationLogMap',\n      () => this._messageStore.messages,\n      () => this._extensionInfo.extensionNumber,\n      (messages, extensionNumber) => {\n        const mapping = {};\n        messages.slice().sort(sortByDate)\n          .forEach((message) => {\n            const conversationId = message.conversationId;\n            const date = this._formatDateTime({\n              type: 'date',\n              utcTimestamp: message.creationTime,\n            });\n            if (!mapping[conversationId]) {\n              mapping[conversationId] = {};\n            }\n            if (!mapping[conversationId][date]) {\n              mapping[conversationId][date] = {\n                conversationLogId: getLogId({ conversationId, date }),\n                conversationId,\n                creationTime: message.createTime, // for sorting\n                date,\n                type: message.type,\n                messages: [],\n                ...getNumbersFromMessage({ extensionNumber, message }),\n              };\n            }\n            mapping[conversationId][date].messages.push(message);\n          });\n        return mapping;\n      },\n    );\n\n    this.addSelector('conversationLogIds',\n      this._selectors.conversationLogMap,\n      (conversationLogMap) => {\n        const logIds = [];\n        Object.keys(conversationLogMap).forEach((conversationId) => {\n          Object.keys(conversationLogMap[conversationId]).forEach((date) => {\n            logIds.push(conversationLogMap[conversationId][date].conversationLogId);\n          });\n        });\n        return logIds;\n      },\n    );\n    this.addSelector('uniqueNumbers',\n      this._selectors.conversationLogMap,\n      (conversationLogMap) => {\n        const output = [];\n        const numberMap = {};\n        function addIfNotExist(contact) {\n          const number = contact.phoneNumber || contact.extensionNumber;\n          if (number && !numberMap[number]) {\n            output.push(number);\n            numberMap[number] = true;\n          }\n        }\n        Object.keys(conversationLogMap).forEach((conversationId) => {\n          Object.keys(conversationLogMap[conversationId]).forEach((date) => {\n            const conversation = conversationLogMap[conversationId][date];\n            addIfNotExist(conversation.self);\n            conversation.correspondents.forEach(addIfNotExist);\n          });\n        });\n        return output;\n      },\n    );\n\n    this._contactMatcher.addQuerySource({\n      getQueriesFn: this._selectors.uniqueNumbers,\n      readyCheckFn: () => (\n        this._messageStore.ready &&\n        this._extensionInfo.ready\n      ),\n    });\n    this._conversationMatcher.addQuerySource({\n      getQueriesFn: this._selectors.conversationLogIds,\n      readyCheckFn: () => (\n        this._messageStore.ready &&\n        this._extensionInfo.ready\n      ),\n    });\n\n    this._lastProcessedConversationLogMap = null;\n  }\n\n  _shouldInit() {\n    return this.pending &&\n      this._contactMatcher.ready &&\n      this._conversationMatcher.ready &&\n      this._dateTimeFormat.ready &&\n      this._extensionInfo.ready &&\n      this._messageStore.ready &&\n      this._rolesAndPermissions.ready &&\n      this._storage.ready &&\n      this._tabManager.ready &&\n      this._readyCheckFunction();\n  }\n  _shouldReset() {\n    return this.ready &&\n      (\n        !this._contactMatcher.ready ||\n        !this._conversationMatcher.ready ||\n        !this._dateTimeFormat.ready ||\n        !this._extensionInfo.ready ||\n        !this._messageStore.ready ||\n        !this._rolesAndPermissions.ready ||\n        !this._storage.ready ||\n        !this._tabManager.ready ||\n        !this._readyCheckFunction()\n      );\n  }\n  _onReset() {\n    this._lastProcessedConversations = null;\n    this._lastAutoLog = null;\n  }\n\n  async _processConversationLog({\n    conversation,\n  }) {\n    await this._conversationMatcher.triggerMatch();\n    if (\n      this._conversationMatcher.dataMapping[conversation.conversationLogId] &&\n      this._conversationMatcher.dataMapping[conversation.conversationLogId].length\n    ) {\n      // update conversation\n      this._autoLogConversation({\n        conversation,\n      });\n    } else if (this.autoLog && conversation.type === messageTypes.sms) {\n      // new entry\n      await this._contactMatcher.triggerMatch();\n      const selfNumber = conversation.self &&\n        (conversation.self.phoneNumber || conversation.self.extensionNumber);\n      const selfMatches = (selfNumber &&\n        this._contactMatcher.dataMapping[conversation.self]) || [];\n      const correspondentMatches = (conversation.correspondents &&\n        conversation.correspondents.reduce((result, contact) => {\n          const number = contact.phoneNumber || contact.extensionNumber;\n          return number && this._contactMatcher.dataMapping[number] ?\n            result.concat(this._contactMatcher.dataMapping[number]) :\n            result;\n        }, [])) || [];\n\n      const selfEntity = (selfMatches &&\n        selfMatches.length === 1 &&\n        selfMatches[0]) ||\n        null;\n\n      // check older dates for existing selected entity match\n      const lastRecord = Object.keys(this.conversationLogMap[conversation.conversationId])\n        .map(date => (\n          this.conversationLogMap[conversation.conversationId][date]\n        )).sort(sortByDate)[1];\n      let correspondentEntity;\n      if (\n        lastRecord &&\n        this._conversationMatcher.dataMapping[lastRecord.conversationLogId] &&\n        this._conversationMatcher.dataMapping[lastRecord.conversationLogId].length\n      ) {\n        const lastActivity = this._conversationMatcher.dataMapping[lastRecord.conversationLogId][0];\n        correspondentEntity = correspondentMatches.find(item => (\n          this._isLoggedContact(conversation, lastActivity, item)\n        ));\n      }\n      correspondentEntity = correspondentEntity ||\n        (correspondentMatches &&\n          correspondentMatches.length === 1 &&\n          correspondentMatches[0]) ||\n        null;\n      await this._autoLogConversation({\n        conversation,\n        selfEntity,\n        correspondentEntity,\n      });\n    }\n  }\n\n  _processConversationLogMap() {\n    if (this.ready && this._lastAutoLog !== this.autoLog) {\n      this._lastAutoLog = this.autoLog;\n      if (this.autoLog) {\n        // force conversation log checking when switch auto log to on\n        this._lastProcessedConversationLogMap = null;\n      }\n    }\n    if (this.ready && this._lastProcessedConversations !== this.conversationLogMap) {\n      this._conversationMatcher.triggerMatch();\n      this._contactMatcher.triggerMatch();\n      const oldMap = this._lastProcessedConversations || {};\n      this._lastProcessedConversations = this.conversationLogMap;\n      if (this._tabManager.active) {\n        Object.keys(this._lastProcessedConversations).forEach((conversationId) => {\n          Object.keys(this._lastProcessedConversations[conversationId]).forEach((date) => {\n            const conversation = this._lastProcessedConversations[conversationId][date];\n            if (\n              !oldMap[conversationId] ||\n              !oldMap[conversationId][date] ||\n              conversation.messages[0].id !== oldMap[conversationId][date].messages[0].id\n            ) {\n              this._processConversationLog({\n                conversation,\n              });\n            }\n          });\n        });\n      }\n    }\n  }\n\n  async _onStateChange() {\n    await super._onStateChange();\n    this._processConversationLogMap();\n  }\n\n  async _autoLogConversation({ conversation, selfEntity, correspondentEntity }) {\n    await this.log({\n      conversation,\n      selfEntity,\n      correspondentEntity,\n    });\n  }\n  async log({ conversation, ...options }) {\n    super.log({ item: conversation, ...options });\n  }\n\n  async logConversation({ conversationId, correspondentEntity, redirect, ...options }) {\n    if (this.conversationLogMap[conversationId]) {\n      await Promise.all(Object.keys(this.conversationLogMap[conversationId])\n        .map(date => this.conversationLogMap[conversationId][date])\n        .sort(sortByDate)\n        .map((conversation, idx) => this.log({\n          ...options,\n          conversation,\n          correspondentEntity,\n          redirect: redirect && idx === 0, // on issue one with redirect\n        })));\n    }\n  }\n\n  get available() {\n    const {\n      SMSReceiving,\n      PagerReceiving,\n    } = this._rolesAndPermissions.serviceFeatures;\n    return !!(\n      (SMSReceiving && SMSReceiving.enabled) ||\n      (PagerReceiving && PagerReceiving.enabled)\n    );\n  }\n\n  get autoLog() {\n    return this._storage.getItem(this._storageKey).autoLog;\n  }\n\n  setAutoLog(autoLog) {\n    if (this.ready && autoLog !== this.autoLog) {\n      this.store.dispatch({\n        type: this.actionTypes.setAutoLog,\n        autoLog,\n      });\n    }\n  }\n\n  get conversationLogMap() {\n    return this._selectors.conversationLogMap();\n  }\n\n  get conversationLogIds() {\n    return this._selectors.conversationLogIds();\n  }\n  getConversationLogId(message) {\n    const conversationId = message.conversationId;\n    const date = this._formatDateTime({\n      type: 'date',\n      utcTimestamp: message.creationTime,\n    });\n    return getLogId({\n      conversationId,\n      date,\n    });\n  }\n\n  get dataMapping() {\n    return this._conversationMatcher.dataMapping;\n  }\n}\n"]}