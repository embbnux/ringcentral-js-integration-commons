{"version":3,"sources":["modules/DetailedPresence/getDetailedPresenceReducer.js"],"names":["getDataReducer","getDetailedPresenceReducer","types","removeIntermediateCall","reduce","result","activeCall","find","item","sessionId","direction","push","state","type","activeCalls","timestamp","fetchSuccess","notification","map","existingCall","call","normalizedCall","startTime","offset","Math","min","resetSuccess","getTelephonyStatusReducer","telephonyStatus","reducers","status","data","dndStatus","presenceStatus","userStatus","message"],"mappings":";;;;;;;;;;QAiBgBA,c,GAAAA,c;kBAgEQC,0B;;AAjFxB;;AACA;;AACA;;;;AACA;;AACA;;AAMA;;;;AACA;;;;AAMO,SAASD,cAAT,CAAwBE,KAAxB,EAA+B;AACpC,MAAMC,yBAAyB,gBAAEC,MAAF,CAAS,UAACC,MAAD,EAASC,UAAT,EAAwB;AAC9D,QACE,CAAC,wCAAmBA,UAAnB,CAAD,IACA,CAAC,gBAAEC,IAAF,CACC;AAAA,aACEC,KAAKC,SAAL,KAAmBH,WAAWG,SAA9B,IACAD,KAAKE,SAAL,KAAmBJ,WAAWI,SAFhC;AAAA,KADD,EAKCL,MALD,CAFH,EASE;AACAA,aAAOM,IAAP,CAAYL,UAAZ;AACD;AACD,WAAOD,MAAP;AACD,GAd8B,CAA/B;AAeA,SAAO,YAAuD;AAAA,QAAtDO,KAAsD,uEAA9C,EAA8C;AAAA;AAAA,QAAxCC,IAAwC,QAAxCA,IAAwC;AAAA,gCAAlCC,WAAkC;AAAA,QAAlCA,WAAkC,oCAApB,EAAoB;AAAA,QAAhBC,SAAgB,QAAhBA,SAAgB;;AAC5D,YAAQF,IAAR;AACE,WAAKX,MAAMc,YAAX;AACA,WAAKd,MAAMe,YAAX;AAAyB;AACvB,iBAAO,gBAAEC,GAAF,CAAM,UAACZ,UAAD,EAAgB;AAC3B,gBAAMa,eAAeP,MAAML,IAAN,CAAW;AAAA,qBAC9Ba,KAAKX,SAAL,KAAmBH,WAAWG,SADA;AAAA,aAAX,CAArB;AAGA,gBAAI,CAACU,YAAL,EAAmB;AACjB,kBAAME,iBAAiB,wCAAmB,qCAAgBf,UAAhB,CAAnB,CAAvB;AACA,kBAAMgB,YAAYD,eAAeC,SAAf,IAA4BP,SAA9C;AACA,kBAAMQ,SAASC,KAAKC,GAAL,CAASV,YAAYO,SAArB,EAAgC,CAAhC,CAAf;AACA,gDACKD,cADL;AAEEC,oCAFF;AAGEC;AAHF;AAKD;AACD,8CACKJ,YADL,EAEK,wCAAmB,qCAAgBb,UAAhB,CAAnB,CAFL;AAID,WAlBM,EAkBJH,uBAAuB,EAAvB,EAA2BW,WAA3B,CAlBI,CAAP;AAmBD;AACD,WAAKZ,MAAMwB,YAAX;AACE,eAAO,EAAP;AACF;AACE,eAAOd,KAAP;AA1BJ;AA4BD,GA7BD;AA8BD;;AAGD,SAASe,yBAAT,CAAmCzB,KAAnC,EAA0C;AACxC,SAAO,YAAqD;AAAA,QAApDU,KAAoD,uEAA5C,IAA4C;AAAA;AAAA,QAApCC,IAAoC,SAApCA,IAAoC;AAAA,sCAA9Be,eAA8B;AAAA,QAA9BA,eAA8B,yCAAZhB,KAAY;;AAC1D,YAAQC,IAAR;AACE,WAAKX,MAAMc,YAAX;AACA,WAAKd,MAAMe,YAAX;AACE,eAAOW,eAAP;AACF,WAAK1B,MAAMwB,YAAX;AACE,eAAO,IAAP;AACF;AACE,eAAOd,KAAP;AAPJ;AASD,GAVD;AAWD;;AAED;AACe,SAASX,0BAAT,CAAoCC,KAApC,EAA0D;AAAA,MAAf2B,QAAe,uEAAJ,EAAI;;AACvE,SAAO,uDACFA,QADE;AAELC,YAAQ,sCAAuB5B,KAAvB,CAFH;AAGL6B,UAAM/B,eAAeE,KAAf,CAHD;AAIL8B,eAAW,6CAAoB9B,KAApB,CAJN;AAKL+B,oBAAgB,kDAAyB/B,KAAzB,CALX;AAMLgC,gBAAY,8CAAqBhC,KAArB,CANP;AAOLiC,aAAS,2CAAkBjC,KAAlB,CAPJ;AAQL0B,qBAAiBD,0BAA0BzB,KAA1B;AARZ,KAAP;AAUD","file":"getDetailedPresenceReducer.js","sourcesContent":["import 'core-js/fn/array/find';\nimport 'core-js/fn/array/find-index';\nimport R from 'ramda';\nimport { combineReducers } from 'redux';\nimport {\n  getDndStatusReducer,\n  getPresenceStatusReducer,\n  getUserStatusReducer,\n  getMessageReducer,\n} from '../Presence/getPresenceReducer';\nimport getModuleStatusReducer from '../../lib/getModuleStatusReducer';\nimport {\n  normalizeFromTo,\n  normalizeStartTime,\n  isIntermediateCall,\n} from '../../lib/callLogHelpers';\n\nexport function getDataReducer(types) {\n  const removeIntermediateCall = R.reduce((result, activeCall) => {\n    if (\n      !isIntermediateCall(activeCall) &&\n      !R.find(\n        item => (\n          item.sessionId === activeCall.sessionId &&\n          item.direction === activeCall.direction\n        ),\n        result\n      )\n    ) {\n      result.push(activeCall);\n    }\n    return result;\n  });\n  return (state = [], { type, activeCalls = [], timestamp }) => {\n    switch (type) {\n      case types.fetchSuccess:\n      case types.notification: {\n        return R.map((activeCall) => {\n          const existingCall = state.find(call => (\n            call.sessionId === activeCall.sessionId\n          ));\n          if (!existingCall) {\n            const normalizedCall = normalizeStartTime(normalizeFromTo(activeCall));\n            const startTime = normalizedCall.startTime || timestamp;\n            const offset = Math.min(timestamp - startTime, 0);\n            return {\n              ...normalizedCall,\n              startTime,\n              offset,\n            };\n          }\n          return {\n            ...existingCall,\n            ...normalizeStartTime(normalizeFromTo(activeCall)),\n          };\n        }, removeIntermediateCall([], activeCalls));\n      }\n      case types.resetSuccess:\n        return [];\n      default:\n        return state;\n    }\n  };\n}\n\n\nfunction getTelephonyStatusReducer(types) {\n  return (state = null, { type, telephonyStatus = state }) => {\n    switch (type) {\n      case types.fetchSuccess:\n      case types.notification:\n        return telephonyStatus;\n      case types.resetSuccess:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\n/* istanbul ignore next: unnecessary to test combineReducers */\nexport default function getDetailedPresenceReducer(types, reducers = {}) {\n  return combineReducers({\n    ...reducers,\n    status: getModuleStatusReducer(types),\n    data: getDataReducer(types),\n    dndStatus: getDndStatusReducer(types),\n    presenceStatus: getPresenceStatusReducer(types),\n    userStatus: getUserStatusReducer(types),\n    message: getMessageReducer(types),\n    telephonyStatus: getTelephonyStatusReducer(types),\n  });\n}\n"]}