{"version":3,"sources":["modules/DetailedPresence/getDetailedPresenceReducer.js"],"names":["isIntermediateCall","samePresenceCallAs","removeDuplicateIntermediateCalls","removeEndedCalls","processActiveCalls","getCallsReducer","getDetailedPresenceReducer","call","telephonyStatus","noCall","terminationType","intermediate","targetCall","id","sessionId","calls","resultCalls","indexMap","forEach","isIntermediate","sessionid","index","length","push","activeCalls","filter","map","types","state","type","timestamp","fetchSuccess","notification","activeCall","currentCall","find","startTime","sort","resetSuccess","getTelephonyStatusReducer","status","dndStatus"],"mappings":"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","file":"getDetailedPresenceReducer.js","sourcesContent":["import 'core-js/fn/array/find';\nimport 'core-js/fn/array/find-index';\nimport { combineReducers } from 'redux';\nimport { getDndStatusReducer } from '../Presence/getPresenceReducer';\nimport getModuleStatusReducer from '../../lib/getModuleStatusReducer';\nimport telephonyStatuses from '../../enums/telephonyStatuses';\nimport terminationTypes from '../../enums/terminationTypes';\nimport {\n  isEnded,\n  sortByStartTime,\n  removeInboundRingOutLegs,\n  normalizeFromTo,\n} from '../../lib/callLogHelpers';\n\nexport function isIntermediateCall(call = {}) {\n  return call.telephonyStatus === telephonyStatuses.noCall\n    && call.terminationType === terminationTypes.intermediate;\n}\nexport function samePresenceCallAs(targetCall) {\n  return call => (\n    call.id === targetCall.id ||\n    call.sessionId === targetCall.sessionId\n  );\n}\nexport function removeDuplicateIntermediateCalls(calls) {\n  const resultCalls = [];\n  const indexMap = {};\n  calls.forEach((call) => {\n    const isIntermediate = isIntermediateCall(call);\n    if (!indexMap[call.sessionId]) {\n      indexMap[call.sessionid] = {\n        index: resultCalls.length,\n        isIntermediate,\n      };\n      resultCalls.push(call);\n    } else if (!isIntermediate) {\n      indexMap[call.sessionId].isIntermediate = false;\n      resultCalls[indexMap[call.sessionId].index] = call;\n    }\n  });\n  return resultCalls;\n}\n\nexport function removeEndedCalls(activeCalls = []) {\n  return activeCalls.filter(call => !isEnded(call));\n}\n\nexport function processActiveCalls(activeCalls) {\n  return removeEndedCalls(\n    removeInboundRingOutLegs(\n      removeDuplicateIntermediateCalls(activeCalls).map(normalizeFromTo)));\n}\n\nexport function getCallsReducer(types) {\n  return (state = [], { type, activeCalls, timestamp }) => {\n    switch (type) {\n      case types.fetchSuccess:\n      case types.notification: {\n        if (activeCalls) {\n          return processActiveCalls(activeCalls).map((activeCall) => {\n            const currentCall = state.find(samePresenceCallAs(activeCall));\n            if (!currentCall) return { ...activeCall, startTime: timestamp };\n            if (isIntermediateCall(activeCall)) return currentCall;\n            return { ...currentCall, ...activeCall };\n          }).sort(sortByStartTime);\n        }\n        return state;\n      }\n      case types.resetSuccess:\n        return [];\n      default:\n        return state;\n    }\n  };\n}\n\n\nfunction getTelephonyStatusReducer(types) {\n  return (state = null, { type, telephonyStatus = state }) => {\n    switch (type) {\n      case types.fetchSuccess:\n      case types.notification:\n        return telephonyStatus;\n      case types.resetSuccess:\n        return null;\n      default:\n        return state;\n    }\n  };\n}\n\n/* istanbul ignore next: unnecessary to test combineReducers */\nexport default function getDetailedPresenceReducer(types) {\n  return combineReducers({\n    status: getModuleStatusReducer(types),\n    calls: getCallsReducer(types),\n    dndStatus: getDndStatusReducer(types),\n    telephonyStatus: getTelephonyStatusReducer(types),\n  });\n}\n"]}