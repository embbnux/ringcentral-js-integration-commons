{"version":3,"sources":["modules/DetailedPresence/getDetailedPresenceReducer.js"],"names":["isIntermediateCall","samePresenceCallAs","removeDuplicateIntermediateCalls","removeEndedCalls","removeInboundRingOutLegs","processActiveCalls","getCallsReducer","getDetailedPresenceReducer","call","telephonyStatus","noCall","terminationType","intermediate","targetCall","id","from","to","sessionId","calls","resultCalls","indexMap","forEach","isIntermediate","has","set","index","length","push","record","get","activeCalls","filter","output","outbounds","inbound","outboundIndex","findIndex","outbound","splice","pop","onHold","concat","types","state","type","timestamp","fetchSuccess","notification","map","activeCall","currentCall","find","startTime","sort","status","dndStatus"],"mappings":"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","file":"getDetailedPresenceReducer.js","sourcesContent":["import 'core-js/fn/array/find';\nimport 'core-js/fn/array/find-index';\nimport { combineReducers } from 'redux';\nimport {\n  isValidNumber,\n} from 'phoneformat.js';\nimport { getDndStatusReducer } from '../Presence/getPresenceReducer';\n\nimport getModuleStatusReducer from '../../lib/getModuleStatusReducer';\nimport telephonyStatus from '../../enums/telephonyStatus';\nimport terminationTypes from '../../enums/terminationTypes';\nimport {\n  isEnded,\n  isOnHold,\n  isInbound,\n  isOutbound,\n  areTwoLegs,\n  sortCallsByStartTime,\n} from '../../lib/callLogHelpers';\nimport isSameLocalNumber from '../../lib/isSameLocalNumber';\n\nexport function isIntermediateCall(call = {}) {\n  return call.telephonyStatus === telephonyStatus.noCall\n    && call.terminationType === terminationTypes.intermediate;\n}\nexport function samePresenceCallAs(targetCall) {\n  return call => (\n    (call.id === targetCall.id) ||\n    (call.from === targetCall.from\n      && call.to === targetCall.to\n      && call.sessionId === targetCall.sessionId)\n  );\n}\nexport function removeDuplicateIntermediateCalls(calls) {\n  const resultCalls = [];\n  const indexMap = new Map();\n  calls.forEach((call) => {\n    const isIntermediate = isIntermediateCall(call);\n    if (!indexMap.has(call.sessionId)) {\n      indexMap.set(call.sessionId, { index: resultCalls.length, isIntermediate });\n      resultCalls.push(call);\n    } else if (!isIntermediate) {\n      const record = indexMap.get(call.sessionId);\n      record.isIntermediate = false;\n      resultCalls[record.index] = call;\n    }\n  });\n  return resultCalls;\n}\n\nexport function removeEndedCalls(activeCalls = []) {\n  return activeCalls.filter(call => !isEnded(call));\n}\n\n\nexport function removeInboundRingOutLegs(calls) {\n  const output = [];\n  const outbounds = calls.filter(isOutbound);\n  calls.filter(isInbound).forEach((inbound) => {\n    const outboundIndex = outbounds.findIndex(call => areTwoLegs(inbound, call));\n    if (outboundIndex > -1) {\n      const outbound = { ...outbounds.splice(outboundIndex, 1).pop() };\n      // Handle inboundLeg.from is '+19072028624', but outboundLeg.to is '9072028624'\n      // https://jira.ringcentral.com/browse/RCINT-3127\n      if (isSameLocalNumber(inbound.from, outbound.to) && isValidNumber(inbound.from)) {\n        outbound.to = inbound.from;\n      }\n      if (isOnHold(inbound)) {\n        outbound.telephonyStatus = telephonyStatus.onHold;\n      }\n      output.push(outbound);\n    } else {\n      output.push(inbound);\n    }\n  });\n  return output.concat(outbounds);\n}\n\nexport function processActiveCalls(activeCalls) {\n  return removeEndedCalls(\n    removeInboundRingOutLegs(\n      removeDuplicateIntermediateCalls(activeCalls)));\n}\n\nexport function getCallsReducer(types) {\n  return (state = [], { type, activeCalls, timestamp }) => {\n    switch (type) {\n      case types.fetchSuccess:\n      case types.notification: {\n        if (activeCalls) {\n          return processActiveCalls(activeCalls).map((activeCall) => {\n            const currentCall = state.find(samePresenceCallAs(activeCall));\n            if (!currentCall) return { ...activeCall, startTime: timestamp };\n            if (isIntermediateCall(activeCall)) return currentCall;\n            return { ...currentCall, ...activeCall };\n          }).sort(sortCallsByStartTime);\n        }\n        return state;\n      }\n      default:\n        return state;\n    }\n  };\n}\n\n/* istanbul ignore next: unnecessary to test combineReducers */\nexport default function getDetailedPresenceReducer(types) {\n  return combineReducers({\n    status: getModuleStatusReducer(types),\n    calls: getCallsReducer(types),\n    dndStatus: getDndStatusReducer(types),\n  });\n}\n"]}