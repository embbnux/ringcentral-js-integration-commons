{"version":3,"sources":["modules/DetailedPresence/index.js"],"names":["presenceRegExp","DetailedPresence","auth","client","subscription","connectivityMonitor","storage","options","actionTypes","_subscriptionHandler","message","test","event","body","activeCalls","dndStatus","telephonyStatus","presenceStatus","userStatus","store","dispatch","type","notification","lastDndStatus","timestamp","Date","now","_onStateChange","_auth","loggedIn","_subscription","ready","_connectivityMonitor","status","pending","init","_connectivity","connectivity","fetch","subscribe","detailedPresenceWithSip","initSuccess","resetSuccess","_lastMessage","_fetch","_client","_storage","_lastNotDisturbDndStatusStorageKey","_reducer","registerReducer","key","reducer","lastNotDisturbDndStatus","addSelector","state","calls","map","call","sessionId","data","filter","_lastTelephonyStatus","ownerId","service","platform","get","json","fetchSuccess","_promise","fetchError","error","_selectors","sessionIdList"],"mappings":"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","file":"index.js","sourcesContent":["import Presence from '../Presence';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport { getLastNotDisturbDndStatusReducer } from '../Presence/getPresenceReducer';\nimport actionTypes from './actionTypes';\nimport getDetailedPresenceReducer from './getDetailedPresenceReducer';\nimport subscriptionFilters from '../../enums/subscriptionFilters';\nimport {\n  isEnded,\n  removeInboundRingOutLegs,\n} from '../../lib/callLogHelpers';\n\nconst presenceRegExp = /\\/presence(\\?.*)?/;\n\nexport default class DetailedPresence extends Presence {\n  constructor({\n    auth,\n    client,\n    subscription,\n    connectivityMonitor,\n    storage,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = auth;\n    this._client = client;\n    this._storage = storage;\n    this._subscription = subscription;\n    this._connectivityMonitor = connectivityMonitor;\n    this._lastNotDisturbDndStatusStorageKey = 'lastNotDisturbDndStatusDetailPresence';\n    if (this._storage) {\n      this._reducer = getDetailedPresenceReducer(this.actionTypes);\n      this._storage.registerReducer({\n        key: this._lastNotDisturbDndStatusStorageKey,\n        reducer: getLastNotDisturbDndStatusReducer(this.actionTypes)\n      });\n    } else {\n      this._reducer = getDetailedPresenceReducer(this.actionTypes, {\n        lastNotDisturbDndStatus: getLastNotDisturbDndStatusReducer(this.actionTypes),\n      });\n    }\n    this._lastMessage = null;\n    this.addSelector('sessionIdList',\n      () => this.state.calls,\n      calls => calls.map(call => call.sessionId),\n    );\n\n    this.addSelector('calls',\n      () => this.state.data,\n      data => (\n        removeInboundRingOutLegs(data)\n          .filter(call => !isEnded(call))\n      ),\n    );\n\n    this._lastTelephonyStatus = null;\n  }\n\n  _subscriptionHandler = (message) => {\n    if (presenceRegExp.test(message.event) && message.body) {\n      const {\n        activeCalls,\n        dndStatus,\n        telephonyStatus,\n        presenceStatus,\n        userStatus,\n      } = message.body;\n      this.store.dispatch({\n        type: this.actionTypes.notification,\n        activeCalls,\n        dndStatus,\n        telephonyStatus,\n        presenceStatus,\n        userStatus,\n        message: message.body.message,\n        lastDndStatus: this.dndStatus,\n        timestamp: Date.now(),\n      });\n    }\n  }\n  _onStateChange = async () => {\n    if (\n      this._auth.loggedIn &&\n      this._subscription.ready &&\n      (!this._connectivityMonitor || this._connectivityMonitor.ready) &&\n      this.status === moduleStatuses.pending\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      if (this._connectivityMonitor) {\n        this._connectivity = this._connectivityMonitor.connectivity;\n      }\n      await this.fetch();\n      this._subscription.subscribe(subscriptionFilters.detailedPresenceWithSip);\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (\n      (\n        !this._auth.loggedIn ||\n        !this._subscription.ready ||\n        (this._connectivityMonitor && !this._connectivityMonitor.ready)\n      ) &&\n      this.ready\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    } else if (\n      this.ready &&\n      this._subscription.ready &&\n      this._subscription.message &&\n      this._subscription.message !== this._lastMessage\n    ) {\n      this._lastMessage = this._subscription.message;\n      this._subscriptionHandler(this._lastMessage);\n    } else if (\n      this.ready &&\n      this._connectivityMonitor &&\n      this._connectivityMonitor.ready &&\n      this._connectivity !== this._connectivityMonitor.connectivity\n    ) {\n      this._connectivity = this._connectivityMonitor.connectivity;\n      // fetch data on regain connectivity\n      if (this._connectivity) {\n        this._fetch();\n      }\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(this._onStateChange);\n  }\n\n  get data() {\n    return this.state.data;\n  }\n  get calls() {\n    return this._selectors.calls();\n  }\n\n  get telephonyStatus() {\n    return this.state.telephonyStatus;\n  }\n\n  get sessionIdList() {\n    return this._selectors.sessionIdList();\n  }\n  async _fetch() {\n    this.store.dispatch({\n      type: this.actionTypes.fetch,\n    });\n    const ownerId = this._auth.ownerId;\n    try {\n      const {\n        activeCalls,\n        dndStatus,\n        telephonyStatus,\n        presenceStatus,\n        userStatus,\n        message,\n      } = (await this._client.service.platform()\n        .get(subscriptionFilters.detailedPresenceWithSip)).json();\n      if (this._auth.ownerId === ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchSuccess,\n          activeCalls,\n          dndStatus,\n          telephonyStatus,\n          presenceStatus,\n          userStatus,\n          message,\n          timestamp: Date.now(),\n        });\n        this._promise = null;\n      }\n    } catch (error) {\n      if (this._auth.ownerId === ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchError,\n          error,\n        });\n        this._promise = null;\n      }\n    }\n  }\n}\n"]}