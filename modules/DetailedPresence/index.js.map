{"version":3,"sources":["modules/DetailedPresence/index.js"],"names":["presenceRegExp","DetailedPresence","auth","client","subscription","connectivityMonitor","options","actionTypes","_subscriptionHandler","message","test","event","body","activeCalls","dndStatus","telephonyStatus","store","dispatch","type","notification","timestamp","Date","now","_onStateChange","_auth","loggedIn","_subscription","ready","_connectivityMonitor","status","pending","init","_connectivity","connectivity","fetch","subscribe","detailedPresence","initSuccess","resetSuccess","_lastMessage","_fetch","_client","_reducer","addSelector","state","calls","map","call","sessionId","data","filter","_lastTelephonyStatus","ownerId","service","platform","get","json","fetchSuccess","_promise","fetchError","error","_selectors","sessionIdList"],"mappings":"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","file":"index.js","sourcesContent":["import Presence from '../Presence';\nimport moduleStatus from '../../enums/moduleStatus';\nimport actionTypes from './actionTypes';\nimport getDetailedPresenceReducer from './getDetailedPresenceReducer';\nimport subscriptionFilters from '../../enums/subscriptionFilters';\nimport {\n  isEnded,\n  isRinging,\n  removeInboundRingOutLegs,\n} from '../../lib/callLogHelpers';\n\nconst presenceRegExp = /\\/presence(\\?.*)?/;\n\nexport default class DetailedPresence extends Presence {\n  constructor({\n    auth,\n    client,\n    subscription,\n    connectivityMonitor,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = auth;\n    this._client = client;\n    this._subscription = subscription;\n    this._connectivityMonitor = connectivityMonitor;\n\n    this._reducer = getDetailedPresenceReducer(this.actionTypes);\n    this._lastMessage = null;\n    this.addSelector('sessionIdList',\n      () => this.state.calls,\n      calls => calls.map(call => call.sessionId),\n    );\n\n    this.addSelector('calls',\n      () => this.state.data,\n      data => (\n        removeInboundRingOutLegs(data)\n          .filter(call => !isEnded(call))\n      ),\n    );\n\n    this._lastTelephonyStatus = null;\n  }\n\n  _subscriptionHandler = (message) => {\n    if (presenceRegExp.test(message.event) && message.body) {\n      const {\n        activeCalls,\n        dndStatus,\n        telephonyStatus,\n      } = message.body;\n      this.store.dispatch({\n        type: this.actionTypes.notification,\n        activeCalls,\n        dndStatus,\n        telephonyStatus,\n        timestamp: Date.now(),\n      });\n    }\n  }\n  _onStateChange = async () => {\n    if (\n      this._auth.loggedIn &&\n      this._subscription.ready &&\n      (!this._connectivityMonitor || this._connectivityMonitor.ready) &&\n      this.status === moduleStatus.pending\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      if (this._connectivityMonitor) {\n        this._connectivity = this._connectivityMonitor.connectivity;\n      }\n      await this.fetch();\n      this._subscription.subscribe(subscriptionFilters.detailedPresence);\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (\n      (\n        !this._auth.loggedIn ||\n        !this._subscription.ready ||\n        (this._connectivityMonitor && !this._connectivityMonitor.ready)\n      ) &&\n      this.ready\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    } else if (\n      this.ready &&\n      this._subscription.ready &&\n      this._subscription.message &&\n      this._subscription.message !== this._lastMessage\n    ) {\n      this._lastMessage = this._subscription.message;\n      this._subscriptionHandler(this._lastMessage);\n    } else if (\n      this.ready &&\n      this._connectivityMonitor &&\n      this._connectivityMonitor.ready &&\n      this._connectivity !== this._connectivityMonitor.connectivity\n    ) {\n      this._connectivity = this._connectivityMonitor.connectivity;\n      // fetch data on regain connectivity\n      if (this._connectivity) {\n        this._fetch();\n      }\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(this._onStateChange);\n  }\n\n  get data() {\n    return this.state.data;\n  }\n  get calls() {\n    return this._selectors.calls();\n  }\n\n  get telephonyStatus() {\n    return this.state.telephonyStatus;\n  }\n\n  get sessionIdList() {\n    return this._selectors.sessionIdList();\n  }\n\n  async _fetch() {\n    this.store.dispatch({\n      type: this.actionTypes.fetch,\n    });\n    const ownerId = this._auth.ownerId;\n    try {\n      const {\n        activeCalls,\n        dndStatus,\n        telephonyStatus,\n      } = (await this._client.service.platform()\n        .get(subscriptionFilters.detailedPresence)).json();\n      if (this._auth.ownerId === ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchSuccess,\n          activeCalls,\n          dndStatus,\n          telephonyStatus,\n          timestamp: Date.now(),\n        });\n        this._promise = null;\n      }\n    } catch (error) {\n      if (this._auth.ownerId === ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchError,\n          error,\n        });\n        this._promise = null;\n      }\n    }\n  }\n}\n"]}