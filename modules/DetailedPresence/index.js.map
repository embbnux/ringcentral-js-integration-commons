{"version":3,"sources":["modules/DetailedPresence/index.js"],"names":["presenceRegExp","DetailedPresence","auth","client","subscription","connectivityMonitor","storage","options","actionTypes","_subscriptionHandler","message","test","event","body","sequence","_lastSequence","activeCalls","dndStatus","telephonyStatus","presenceStatus","userStatus","store","dispatch","type","notification","lastDndStatus","timestamp","Date","now","_onStateChange","_auth","loggedIn","_subscription","ready","_connectivityMonitor","status","pending","init","_connectivity","connectivity","fetch","subscribe","detailedPresenceWithSip","initSuccess","reset","_lastTelephonyStatus","_lastMessage","resetSuccess","_fetch","_client","_storage","_lastNotDisturbDndStatusStorageKey","_reducer","registerReducer","key","reducer","lastNotDisturbDndStatus","addSelector","state","calls","map","call","sessionId","data","filter","ownerId","service","platform","get","json","fetchSuccess","_promise","fetchError","error","_selectors","sessionIdList"],"mappings":"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","file":"index.js","sourcesContent":["import Presence from '../Presence';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport { getLastNotDisturbDndStatusReducer } from '../Presence/getPresenceReducer';\nimport actionTypes from './actionTypes';\nimport getDetailedPresenceReducer from './getDetailedPresenceReducer';\nimport subscriptionFilters from '../../enums/subscriptionFilters';\nimport {\n  isEnded,\n  removeInboundRingOutLegs,\n} from '../../lib/callLogHelpers';\n\nconst presenceRegExp = /\\/presence(\\?.*)?/;\n\n/**\n * @class\n * @description Presence detail info managing module\n */\nexport default class DetailedPresence extends Presence {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Auth} params.auth - auth module instance\n   * @param {Client} params.client - client module instance\n   * @param {Subscription} params.subscription - subscription module instance\n   * @param {ConnectivityMonitor} params.connectivityMonitor - connectivityMonitor module instance\n   */\n  constructor({\n    auth,\n    client,\n    subscription,\n    connectivityMonitor,\n    storage,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = auth;\n    this._client = client;\n    this._storage = storage;\n    this._subscription = subscription;\n    this._connectivityMonitor = connectivityMonitor;\n    this._lastNotDisturbDndStatusStorageKey = 'lastNotDisturbDndStatusDetailPresence';\n    if (this._storage) {\n      this._reducer = getDetailedPresenceReducer(this.actionTypes);\n      this._storage.registerReducer({\n        key: this._lastNotDisturbDndStatusStorageKey,\n        reducer: getLastNotDisturbDndStatusReducer(this.actionTypes)\n      });\n    } else {\n      this._reducer = getDetailedPresenceReducer(this.actionTypes, {\n        lastNotDisturbDndStatus: getLastNotDisturbDndStatusReducer(this.actionTypes),\n      });\n    }\n    this._lastMessage = null;\n    this.addSelector('sessionIdList',\n      () => this.state.calls,\n      calls => calls.map(call => call.sessionId),\n    );\n\n    this.addSelector('calls',\n      () => this.state.data,\n      data => (\n        removeInboundRingOutLegs(data)\n          .filter(call => !isEnded(call))\n      ),\n    );\n    this._lastMessage = null;\n    this._lastTelephonyStatus = null;\n    this._lastSequence = 0;\n  }\n\n  _subscriptionHandler = (message) => {\n    if (presenceRegExp.test(message.event) && message.body) {\n      if (message.body.sequence) {\n        if (message.body.sequence <= this._lastSequence) {\n          return;\n        }\n        this._lastSequence = message.body.sequence;\n      }\n      const {\n        activeCalls,\n        dndStatus,\n        telephonyStatus,\n        presenceStatus,\n        userStatus,\n      } = message.body;\n      this.store.dispatch({\n        type: this.actionTypes.notification,\n        activeCalls,\n        dndStatus,\n        telephonyStatus,\n        presenceStatus,\n        userStatus,\n        message: message.body.message,\n        lastDndStatus: this.dndStatus,\n        timestamp: Date.now(),\n      });\n    }\n  }\n  _onStateChange = async () => {\n    if (\n      this._auth.loggedIn &&\n      this._subscription.ready &&\n      (!this._connectivityMonitor || this._connectivityMonitor.ready) &&\n      this.status === moduleStatuses.pending\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      if (this._connectivityMonitor) {\n        this._connectivity = this._connectivityMonitor.connectivity;\n      }\n      await this.fetch();\n      this._subscription.subscribe(subscriptionFilters.detailedPresenceWithSip);\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (\n      (\n        !this._auth.loggedIn ||\n        !this._subscription.ready ||\n        (this._connectivityMonitor && !this._connectivityMonitor.ready)\n      ) &&\n      this.ready\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.reset,\n      });\n      this._lastTelephonyStatus = null;\n      this._lastSequence = 0;\n      this._lastMessage = null;\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    } else if (\n      this.ready &&\n      this._subscription.ready &&\n      this._subscription.message &&\n      this._subscription.message !== this._lastMessage\n    ) {\n      this._lastMessage = this._subscription.message;\n      this._subscriptionHandler(this._lastMessage);\n    } else if (\n      this.ready &&\n      this._connectivityMonitor &&\n      this._connectivityMonitor.ready &&\n      this._connectivity !== this._connectivityMonitor.connectivity\n    ) {\n      this._connectivity = this._connectivityMonitor.connectivity;\n      // fetch data on regain connectivity\n      if (this._connectivity) {\n        this._fetch();\n      }\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(this._onStateChange);\n  }\n\n  get data() {\n    return this.state.data;\n  }\n  get calls() {\n    return this._selectors.calls();\n  }\n\n  get telephonyStatus() {\n    return this.state.telephonyStatus;\n  }\n\n  get sessionIdList() {\n    return this._selectors.sessionIdList();\n  }\n  async _fetch() {\n    this.store.dispatch({\n      type: this.actionTypes.fetch,\n    });\n    const ownerId = this._auth.ownerId;\n    try {\n      const {\n        activeCalls,\n        dndStatus,\n        telephonyStatus,\n        presenceStatus,\n        userStatus,\n        message,\n      } = (await this._client.service.platform()\n          .get(subscriptionFilters.detailedPresenceWithSip)).json();\n      if (this._auth.ownerId === ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchSuccess,\n          activeCalls,\n          dndStatus,\n          telephonyStatus,\n          presenceStatus,\n          userStatus,\n          message,\n          timestamp: Date.now(),\n        });\n        this._promise = null;\n      }\n    } catch (error) {\n      if (this._auth.ownerId === ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchError,\n          error,\n        });\n        this._promise = null;\n      }\n    }\n  }\n}\n"]}