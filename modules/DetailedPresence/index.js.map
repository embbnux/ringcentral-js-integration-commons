{"version":3,"sources":["modules/DetailedPresence/index.js"],"names":["presenceRegExp","DetailedPresence","auth","client","subscription","connectivityMonitor","onRinging","onNewCall","onCallUpdated","onCallEnded","options","actionTypes","_subscriptionHandler","message","test","event","body","activeCalls","dndStatus","store","dispatch","type","notification","timestamp","Date","now","_onStateChange","_auth","loggedIn","_subscription","ready","_connectivityMonitor","status","pending","init","_connectivity","connectivity","fetch","subscribe","initSuccess","_lastProcessedCalls","resetSuccess","_lastMessage","_fetch","calls","oldCalls","forEach","call","oldCallIndex","findIndex","item","sessionId","onRingingCalled","_onNewCall","_onRinging","oldCall","splice","telephonyStatus","_onCallUpdated","_onCallEnded","_client","_reducer","addSelector","state","map","ownerId","service","platform","get","json","fetchSuccess","_promise","fetchError","error","_selectors","sessionIdList"],"mappings":"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","file":"index.js","sourcesContent":["import Presence from '../Presence';\nimport moduleStatus from '../../enums/moduleStatus';\nimport actionTypes from './actionTypes';\nimport getDetailedPresenceReducer from './getDetailedPresenceReducer';\nimport {\n  isRinging,\n} from '../../lib/callLogHelpers';\n\nconst presenceRegExp = /\\/presence(\\?.*)?/;\n\nexport default class DetailedPresence extends Presence {\n  constructor({\n    auth,\n    client,\n    subscription,\n    connectivityMonitor,\n    onRinging,\n    onNewCall,\n    onCallUpdated,\n    onCallEnded,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._auth = auth;\n    this._client = client;\n    this._subscription = subscription;\n    this._connectivityMonitor = connectivityMonitor;\n    this._onRinging = onRinging;\n    this._onNewCall = onNewCall;\n    this._onCallUpdated = onCallUpdated;\n    this._onCallEnded = onCallEnded;\n\n    this._reducer = getDetailedPresenceReducer(this.actionTypes);\n    this._lastMessage = null;\n    this.addSelector('sessionIdList',\n      () => this.state.calls,\n      calls => calls.map(call => call.sessionId),\n    );\n    this._lastProcessedCalls = [];\n  }\n\n  _subscriptionHandler = (message) => {\n    if (presenceRegExp.test(message.event) && message.body) {\n      const {\n        activeCalls,\n        dndStatus,\n      } = message.body;\n      this.store.dispatch({\n        type: this.actionTypes.notification,\n        activeCalls,\n        dndStatus,\n        timestamp: Date.now(),\n      });\n    }\n  }\n  _onStateChange = async () => {\n    if (\n      this._auth.loggedIn &&\n      this._subscription.ready &&\n      (!this._connectivityMonitor || this._connectivityMonitor.ready) &&\n      this.status === moduleStatus.pending\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      if (this._connectivityMonitor) {\n        this._connectivity = this._connectivityMonitor.connectivity;\n      }\n      await this.fetch();\n      this._subscription.subscribe('/account/~/extension/~/presence?detailedTelephonyState=true');\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (\n      (\n        !this._auth.loggedIn ||\n        !this._subscription.ready ||\n        (this._connectivityMonitor && !this._connectivityMonitor.ready)\n      ) &&\n      this.ready\n    ) {\n      this._lastProcessedCalls = [];\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    } else if (\n      this.ready &&\n      this._subscription.ready &&\n      this._subscription.message &&\n      this._subscription.message !== this._lastMessage\n    ) {\n      this._lastMessage = this._subscription.message;\n      this._subscriptionHandler(this._lastMessage);\n    } else if (\n      this.ready &&\n      this._connectivityMonitor &&\n      this._connectivityMonitor.ready &&\n      this._connectivity !== this._connectivityMonitor.connectivity\n    ) {\n      this._connectivity = this._connectivityMonitor.connectivity;\n      // fetch data on regain connectivity\n      if (this._connectivity) {\n        this._fetch();\n      }\n    } else if (\n      this.ready &&\n      this._lastProcessedCalls !== this.calls\n    ) {\n      const oldCalls = [...this._lastProcessedCalls];\n      this._lastProcessedCalls = this.calls;\n\n      this.calls.forEach((call) => {\n        const oldCallIndex = oldCalls.findIndex(item => item.sessionId === call.sessionId);\n        let onRingingCalled = false;\n        if (oldCallIndex === -1) {\n          if (typeof this._onNewCall === 'function') {\n            this._onNewCall(call);\n          }\n          if (\n            typeof this._onRinging === 'function' &&\n            !onRingingCalled &&\n            isRinging(call)\n          ) {\n            this._onRinging();\n            onRingingCalled = true;\n          }\n        } else {\n          const oldCall = oldCalls[oldCallIndex];\n          oldCalls.splice(oldCallIndex, 1);\n          if (\n            call.telephonyStatus !== oldCall.telephonyStatus &&\n            typeof this._onCallUpdated === 'function'\n          ) {\n            this._onCallUpdated(call);\n          }\n        }\n      });\n      oldCalls.forEach((call) => {\n        if (typeof this._onCallEnded === 'function') {\n          this._onCallEnded(call);\n        }\n      });\n    }\n  }\n\n  initialize() {\n    this.store.subscribe(this._onStateChange);\n  }\n\n  get calls() {\n    return this.state.calls;\n  }\n\n  get sessionIdList() {\n    return this._selectors.sessionIdList();\n  }\n\n  async _fetch() {\n    this.store.dispatch({\n      type: this.actionTypes.fetch,\n    });\n    const ownerId = this._auth.ownerId;\n    try {\n      const {\n        activeCalls,\n        dndStatus,\n      } = (await this._client.service.platform()\n        .get('/account/~/extension/~/presence?detailedTelephonyState=true')).json();\n      if (this._auth.ownerId === ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchSuccess,\n          activeCalls,\n          dndStatus,\n          timestamp: Date.now(),\n        });\n        this._promise = null;\n      }\n    } catch (error) {\n      if (this._auth.ownerId === ownerId) {\n        this.store.dispatch({\n          type: this.actionTypes.fetchError,\n          error,\n        });\n        this._promise = null;\n      }\n    }\n  }\n}\n"]}