{"version":3,"sources":["modules/Call/index.js"],"names":["Call","alert","client","storage","regionSettings","callingSettings","softphone","ringout","accountExtension","numberValidate","options","actionTypes","onCall","callStatus","idle","toNumber","trim","length","lastCallNumber","onToNumberChange","_alert","warning","message","noToNumber","store","dispatch","type","connect","number","_getValidatedNumbers","validatedNumbers","_makeCall","connectSuccess","connectError","firstLegConnectFailed","connectFailed","payroll","danger","networkError","internalError","_client","_storage","_storageKey","_reducer","_regionSettings","_callingSettings","_ringout","_softphone","_accountExtension","_numberValidate","registerReducer","key","reducer","subscribe","ready","status","pending","initSuccess","resetSuccess","value","toNumberChanged","data","fromNumber","myLocation","validatedResult","validateNumbers","result","errors","forEach","error","parsedNumbers","numbers","parsedFromNumber","e164","subAddress","join","countryCode","areaCode","hasPlus","isServiceNumber","hasInvalidChars","noAreaCode","normalized","phoneNumber","homeCountry","numberParser","parse","post","originalStrings","resp","phoneNumbers","special","specialNumber","originalString","isAvailableExtension","notAnExtension","callingMode","makeCall","prompt","ringoutPrompt","state","getItem"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport callingModes from '../CallingSettings/callingModes';\nimport moduleStatus from '../../enums/moduleStatus';\nimport normalizeNumber from '../../lib/normalizeNumber';\nimport parseNumber from '../../lib/parseNumber';\n\nimport callActionTypes from './actionTypes';\nimport getCallReducer, {\n  getLastCallNumberReducer,\n} from './getCallReducer';\n\nimport callStatus from './callStatus';\nimport callErrors from './callErrors';\nimport ringoutErrors from '../Ringout/ringoutErrors';\n\n\nexport default class Call extends RcModule {\n  constructor({\n    alert,\n    client,\n    storage,\n    regionSettings,\n    callingSettings,\n    softphone,\n    ringout,\n    accountExtension,\n    numberValidate,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes: callActionTypes,\n    });\n\n    this._alert = alert;\n    this._client = client;\n    this._storage = storage;\n    this._storageKey = 'lastCallNumber';\n    this._reducer = getCallReducer(this.actionTypes);\n    this._regionSettings = regionSettings;\n    this._callingSettings = callingSettings;\n    this._ringout = ringout;\n    this._softphone = softphone;\n    this._accountExtension = accountExtension;\n    this._numberValidate = numberValidate;\n\n    this._storage.registerReducer({\n      key: this._storageKey,\n      reducer: getLastCallNumberReducer(this.actionTypes),\n    });\n  }\n\n  initialize() {\n    this.store.subscribe(() => {\n      if (\n        this._regionSettings.ready &&\n        this._callingSettings.ready &&\n        this._storage.ready &&\n        this.status === moduleStatus.pending\n      ) {\n        this.store.dispatch({\n          type: this.actionTypes.initSuccess,\n        });\n      } else if (\n        (\n          !this._regionSettings.ready ||\n          !this._callingSettings.ready ||\n          !this._storage.ready\n        ) &&\n        this.status === moduleStatus.ready\n      ) {\n        this.store.dispatch({\n          type: this.actionTypes.resetSuccess,\n        });\n      }\n    });\n  }\n\n  onToNumberChange(value) {\n    this.store.dispatch({\n      type: this.actionTypes.toNumberChanged,\n      data: value,\n    });\n  }\n\n  onCall = async () => {\n    if (this.callStatus === callStatus.idle) {\n      // last number check\n      if (`${this.toNumber}`.trim().length === 0) {\n        if (this.lastCallNumber) {\n          this.onToNumberChange(this.lastCallNumber);\n        } else {\n          this._alert.warning({\n            message: callErrors.noToNumber,\n          });\n        }\n      } else {\n        this.store.dispatch({\n          type: this.actionTypes.connect,\n          number: this.toNumber,\n        });\n        try {\n          const validatedNumbers = await this._getValidatedNumbers();\n          if (validatedNumbers) {\n            await this._makeCall(validatedNumbers);\n            this.store.dispatch({\n              type: this.actionTypes.connectSuccess\n            });\n          } else {\n            this.store.dispatch({\n              type: this.actionTypes.connectError\n            });\n          }\n        } catch (error) {\n          if (error.message === ringoutErrors.firstLegConnectFailed) {\n            this._alert.warning({\n              message: callErrors.connectFailed,\n              payroll: error\n            });\n          } else if (error.message === 'Failed to fetch') {\n            this._alert.danger({\n              message: callErrors.networkError,\n              payroll: error,\n            });\n          } else if (error.message !== 'Refresh token has expired') {\n            this._alert.danger({\n              message: callErrors.internalError,\n              payroll: error,\n            });\n          }\n          this.store.dispatch({\n            type: this.actionTypes.connectError\n          });\n        }\n      }\n    }\n  }\n\n  async _getValidatedNumbers() {\n    const fromNumber = this._callingSettings.myLocation;\n    const validatedResult\n      = this._numberValidate.validateNumbers([this.toNumber, fromNumber]);\n    if (!validatedResult.result) {\n      validatedResult.errors.forEach((error) => {\n        this._alert.warning({\n          message: callErrors[error.type]\n        });\n      });\n      return null;\n    }\n    const parsedNumbers = validatedResult.numbers;\n    // using e164 in response to call\n    let parsedFromNumber =\n      parsedNumbers[1] ? parsedNumbers[1].e164 : '';\n    // add ext back if any\n    if (parsedFromNumber !== '') {\n      parsedFromNumber = (parsedNumbers[1].subAddress) ?\n        [parsedNumbers[1].e164, parsedNumbers[1].subAddress].join('*') :\n        parsedNumbers[1].e164;\n    }\n    return {\n      toNumber: parsedNumbers[0].e164,\n      fromNumber: parsedFromNumber,\n    };\n  }\n\n  async _getValidatedNumbersOld() {\n    const fromNumber = this._callingSettings.myLocation;\n    const countryCode = this._regionSettings.countryCode;\n    const areaCode = this._regionSettings.areaCode;\n\n    const {\n      hasPlus,\n      number,\n      isServiceNumber,\n      hasInvalidChars,\n    } = parseNumber(this.toNumber);\n    // include special char or cleaned has no digit (only #*+)\n    if (hasInvalidChars || number === '') {\n      this._alert.warning({\n        message: callErrors.noToNumber,\n      });\n    } else if (\n      !isServiceNumber &&\n      !hasPlus &&\n      number.length === 7 &&\n      (countryCode === 'CA' || countryCode === 'US') &&\n      areaCode === ''\n    ) {\n      this._alert.warning({\n        message: callErrors.noAreaCode\n      });\n    } else {\n      // to e164 normalize\n      const normalized = normalizeNumber({\n        phoneNumber: this.toNumber,\n        countryCode,\n        areaCode,\n      });\n      // phoneParser\n      const homeCountry = countryCode ? { homeCountry: countryCode } : {};\n      const resp = await this._client.numberParser().parse().post(\n        {\n          originalStrings: [normalized, fromNumber]\n        },\n        homeCountry,\n      );\n      if (resp.phoneNumbers[0] && resp.phoneNumbers[0].special) {\n        this._alert.warning({\n          message: callErrors.specialNumber\n        });\n      } else if (resp.phoneNumbers[0] &&\n        resp.phoneNumbers[0].originalString.length <= 5 &&\n        !this._accountExtension.isAvailableExtension(resp.phoneNumbers[0].originalString)\n      ) { // not a service code but short number, confirm if it is an extension\n        this._alert.warning({\n          message: callErrors.notAnExtension\n        });\n      } else {\n        // using e164 in response to call\n        let parsedFromNumber =\n          resp.phoneNumbers[1] ? resp.phoneNumbers[1].e164 : '';\n        // add ext back if any\n        if (parsedFromNumber !== '') {\n          parsedFromNumber = (resp.phoneNumbers[1].subAddress) ?\n            [resp.phoneNumbers[1].e164, resp.phoneNumbers[1].subAddress].join('*') :\n            resp.phoneNumbers[1].e164;\n        }\n        return {\n          toNumber: resp.phoneNumbers[0].e164,\n          fromNumber: parsedFromNumber,\n        };\n      }\n    }\n    return null;\n  }\n\n  async _makeCall({ toNumber, fromNumber }) {\n    const callingMode = this._callingSettings.callingMode;\n    switch (callingMode) {\n      case callingModes.softphone:\n        this._softphone.makeCall(toNumber);\n        break;\n      case callingModes.ringout:\n        await this._ringout.makeCall({\n          fromNumber,\n          toNumber,\n          prompt: this._callingSettings.ringoutPrompt,\n        });\n        break;\n      default:\n        break;\n    }\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get callStatus() {\n    return this.state.callStatus;\n  }\n\n  get isIdle() {\n    return this.state.callStatus === callStatus.idle;\n  }\n\n  get lastCallNumber() {\n    return this._storage.getItem(this._storageKey) || '';\n  }\n\n  get toNumber() {\n    return this.state.toNumber;\n  }\n}\n"]}