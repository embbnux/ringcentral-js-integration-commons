{"version":3,"sources":["modules/Call/index.js"],"names":["Call","alert","client","storage","callingSettings","softphone","ringout","webphone","extensionPhoneNumber","numberValidate","regionSettings","options","actionTypes","onCall","callStatus","idle","toNumber","trim","length","lastCallNumber","onToNumberChange","_alert","warning","message","noToNumber","store","dispatch","type","connect","number","_getValidatedNumbers","validatedNumbers","_makeCall","connectSuccess","connectError","firstLegConnectFailed","connectFailed","payload","danger","networkError","internalError","_client","_storage","_storageKey","_reducer","_callingSettings","_ringout","_softphone","_webphone","_numberValidate","_extensionPhoneNumber","_regionSettings","_callSettingMode","registerReducer","key","reducer","subscribe","ready","status","pending","init","callingMode","fromNumbers","initSuccess","resetSuccess","disconnect","oldCallSettingMode","value","toNumberChanged","data","fromNumber","isWebphone","myLocation","waitingValidateNumbers","push","validateNumbers","validatedResult","result","errors","forEach","error","parsedNumbers","numbers","parsedFromNumber","e164","subAddress","join","countryCode","homeCountry","availableCountries","find","country","isoCode","homeCountryId","callingCode","makeCall","prompt","ringoutPrompt","state","getItem"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport callingModes from '../CallingSettings/callingModes';\nimport moduleStatuses from '../../enums/moduleStatuses';\n\nimport callActionTypes from './actionTypes';\nimport getCallReducer, {\n  getLastCallNumberReducer,\n} from './getCallReducer';\n\nimport callStatus from './callStatus';\nimport callErrors from './callErrors';\nimport ringoutErrors from '../Ringout/ringoutErrors';\n\n\nexport default class Call extends RcModule {\n  constructor({\n    alert,\n    client,\n    storage,\n    callingSettings,\n    softphone,\n    ringout,\n    webphone,\n    extensionPhoneNumber,\n    numberValidate,\n    regionSettings,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes: callActionTypes,\n    });\n\n    this._alert = alert;\n    this._client = client;\n    this._storage = storage;\n    this._storageKey = 'lastCallNumber';\n    this._reducer = getCallReducer(this.actionTypes);\n    this._callingSettings = callingSettings;\n    this._ringout = ringout;\n    this._softphone = softphone;\n    this._webphone = webphone;\n    this._numberValidate = numberValidate;\n    this._extensionPhoneNumber = extensionPhoneNumber;\n    this._regionSettings = regionSettings;\n    this._callSettingMode = null;\n\n    this._storage.registerReducer({\n      key: this._storageKey,\n      reducer: getLastCallNumberReducer(this.actionTypes),\n    });\n  }\n\n  initialize() {\n    this.store.subscribe(async () => {\n      if (\n        this._numberValidate.ready &&\n        this._callingSettings.ready &&\n        this._storage.ready &&\n        this._extensionPhoneNumber.ready &&\n        this._regionSettings.ready &&\n        (!this._webphone || this._webphone.ready) &&\n        this._ringout.ready &&\n        this._softphone.ready &&\n        this.status === moduleStatuses.pending\n      ) {\n        this.store.dispatch({\n          type: this.actionTypes.init,\n        });\n        // init webphone\n        this._callSettingMode = this._callingSettings.callingMode;\n        if (this._callSettingMode === callingModes.webphone) {\n          await this._webphone.connect(this._callingSettings.fromNumbers.length > 0);\n        }\n        this.store.dispatch({\n          type: this.actionTypes.initSuccess,\n        });\n      } else if (\n        (\n          !this._numberValidate.ready ||\n          !this._callingSettings.ready ||\n          !this._extensionPhoneNumber.ready ||\n          !this._regionSettings.ready ||\n          (!!this._webphone && !this._webphone.ready) ||\n          !this._ringout.ready ||\n          !this._softphone.ready ||\n          !this._storage.ready\n        ) &&\n        this.ready\n      ) {\n        this.store.dispatch({\n          type: this.actionTypes.resetSuccess,\n        });\n        this._callSettingMode = this._callingSettings.callingMode;\n        if (this._callSettingMode === callingModes.webphone && this._webphone) {\n          this._webphone.disconnect();\n        }\n      } else if (this.ready) {\n        const oldCallSettingMode = this._callSettingMode;\n        if (this._callingSettings.callingMode !== oldCallSettingMode && this._webphone) {\n          this._callSettingMode = this._callingSettings.callingMode;\n          if (oldCallSettingMode === callingModes.webphone) {\n            this._webphone.disconnect();\n          } else if (this._callSettingMode === callingModes.webphone) {\n            await this._webphone.connect(this.fromNumbers);\n          }\n        }\n      }\n    });\n  }\n\n  onToNumberChange(value) {\n    this.store.dispatch({\n      type: this.actionTypes.toNumberChanged,\n      data: value,\n    });\n  }\n\n  onCall = async () => {\n    if (this.callStatus === callStatus.idle) {\n      // last number check\n      if (`${this.toNumber}`.trim().length === 0) {\n        if (this.lastCallNumber) {\n          this.onToNumberChange(this.lastCallNumber);\n        } else {\n          this._alert.warning({\n            message: callErrors.noToNumber,\n          });\n        }\n      } else {\n        this.store.dispatch({\n          type: this.actionTypes.connect,\n          number: this.toNumber,\n        });\n        try {\n          const validatedNumbers = await this._getValidatedNumbers();\n          if (validatedNumbers) {\n            await this._makeCall(validatedNumbers);\n            this.store.dispatch({\n              type: this.actionTypes.connectSuccess\n            });\n          } else {\n            this.store.dispatch({\n              type: this.actionTypes.connectError\n            });\n          }\n        } catch (error) {\n          if (error.message === ringoutErrors.firstLegConnectFailed) {\n            this._alert.warning({\n              message: callErrors.connectFailed,\n              payload: error\n            });\n          } else if (error.message === 'Failed to fetch') {\n            this._alert.danger({\n              message: callErrors.networkError,\n              payload: error,\n            });\n          } else if (error.message !== 'Refresh token has expired') {\n            this._alert.danger({\n              message: callErrors.internalError,\n              payload: error,\n            });\n          }\n          this.store.dispatch({\n            type: this.actionTypes.connectError\n          });\n        }\n      }\n    }\n  }\n\n  async _getValidatedNumbers() {\n    let fromNumber;\n    const isWebphone = (this._callingSettings.callingMode === callingModes.webphone);\n    if (isWebphone) {\n      fromNumber = this._callingSettings.fromNumber;\n      if (fromNumber === null || fromNumber === '') {\n        return null;\n      }\n    } else {\n      fromNumber = this._callingSettings.myLocation;\n    }\n    const waitingValidateNumbers = [this.toNumber];\n    if (\n      fromNumber &&\n      fromNumber.length > 0 &&\n      !(isWebphone && fromNumber === 'anonymous')\n    ) {\n      waitingValidateNumbers.push(fromNumber);\n    }\n    const validatedResult\n      = await this._numberValidate.validateNumbers(waitingValidateNumbers);\n    if (!validatedResult.result) {\n      validatedResult.errors.forEach((error) => {\n        this._alert.warning({\n          message: callErrors[error.type]\n        });\n      });\n      return null;\n    }\n    const parsedNumbers = validatedResult.numbers;\n    // using e164 in response to call\n    let parsedFromNumber =\n      parsedNumbers[1] ? parsedNumbers[1].e164 : '';\n    // add ext back if any\n    if (parsedFromNumber !== '') {\n      parsedFromNumber = (parsedNumbers[1].subAddress) ?\n        [parsedNumbers[1].e164, parsedNumbers[1].subAddress].join('*') :\n        parsedNumbers[1].e164;\n    }\n    return {\n      toNumber: parsedNumbers[0].e164,\n      fromNumber: parsedFromNumber,\n    };\n  }\n\n  async _makeCall({ toNumber, fromNumber }) {\n    const callingMode = this._callingSettings.callingMode;\n    const countryCode = this._regionSettings.countryCode;\n    const homeCountry = this._regionSettings.availableCountries.find(\n      country => country.isoCode === countryCode\n    );\n    const homeCountryId = (homeCountry && homeCountry.callingCode) || '1';\n    switch (callingMode) {\n      case callingModes.softphone:\n        this._softphone.makeCall(toNumber);\n        break;\n      case callingModes.ringout:\n        await this._ringout.makeCall({\n          fromNumber,\n          toNumber,\n          prompt: this._callingSettings.ringoutPrompt,\n        });\n        break;\n      case callingModes.webphone:\n        if (this._webphone) {\n          await this._webphone.makeCall({\n            fromNumber,\n            toNumber,\n            homeCountryId,\n          });\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get callStatus() {\n    return this.state.callStatus;\n  }\n\n  get isIdle() {\n    return this.state.callStatus === callStatus.idle;\n  }\n\n  get lastCallNumber() {\n    return this._storage.getItem(this._storageKey) || '';\n  }\n\n  get toNumber() {\n    return this.state.toNumber;\n  }\n}\n"]}