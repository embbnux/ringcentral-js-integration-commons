{"version":3,"sources":["modules/Call/index.js"],"names":["Call","alert","client","storage","callingSettings","softphone","ringout","numberValidate","options","actionTypes","onCall","callStatus","idle","toNumber","trim","length","lastCallNumber","onToNumberChange","_alert","warning","message","noToNumber","store","dispatch","type","connect","number","_getValidatedNumbers","validatedNumbers","_makeCall","connectSuccess","connectError","firstLegConnectFailed","connectFailed","payroll","console","log","danger","networkError","internalError","_client","_storage","_storageKey","_reducer","_callingSettings","_ringout","_softphone","_numberValidate","registerReducer","key","reducer","subscribe","ready","status","pending","initSuccess","resetSuccess","value","toNumberChanged","data","fromNumber","myLocation","waitingValidateNumbers","push","validateNumbers","validatedResult","result","errors","forEach","error","parsedNumbers","numbers","parsedFromNumber","e164","subAddress","join","callingMode","makeCall","prompt","ringoutPrompt","state","getItem"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport callingModes from '../CallingSettings/callingModes';\nimport moduleStatus from '../../enums/moduleStatus';\n\nimport callActionTypes from './actionTypes';\nimport getCallReducer, {\n  getLastCallNumberReducer,\n} from './getCallReducer';\n\nimport callStatus from './callStatus';\nimport callErrors from './callErrors';\nimport ringoutErrors from '../Ringout/ringoutErrors';\n\n\nexport default class Call extends RcModule {\n  constructor({\n    alert,\n    client,\n    storage,\n    callingSettings,\n    softphone,\n    ringout,\n    numberValidate,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes: callActionTypes,\n    });\n\n    this._alert = alert;\n    this._client = client;\n    this._storage = storage;\n    this._storageKey = 'lastCallNumber';\n    this._reducer = getCallReducer(this.actionTypes);\n    this._callingSettings = callingSettings;\n    this._ringout = ringout;\n    this._softphone = softphone;\n    this._numberValidate = numberValidate;\n\n    this._storage.registerReducer({\n      key: this._storageKey,\n      reducer: getLastCallNumberReducer(this.actionTypes),\n    });\n  }\n\n  initialize() {\n    this.store.subscribe(() => {\n      if (\n        this._numberValidate.ready &&\n        this._callingSettings.ready &&\n        this._storage.ready &&\n        this.status === moduleStatus.pending\n      ) {\n        this.store.dispatch({\n          type: this.actionTypes.initSuccess,\n        });\n      } else if (\n        (\n          !this._numberValidate.ready ||\n          !this._callingSettings.ready ||\n          !this._storage.ready\n        ) &&\n        this.status === moduleStatus.ready\n      ) {\n        this.store.dispatch({\n          type: this.actionTypes.resetSuccess,\n        });\n      }\n    });\n  }\n\n  onToNumberChange(value) {\n    this.store.dispatch({\n      type: this.actionTypes.toNumberChanged,\n      data: value,\n    });\n  }\n\n  onCall = async () => {\n    if (this.callStatus === callStatus.idle) {\n      // last number check\n      if (`${this.toNumber}`.trim().length === 0) {\n        if (this.lastCallNumber) {\n          this.onToNumberChange(this.lastCallNumber);\n        } else {\n          this._alert.warning({\n            message: callErrors.noToNumber,\n          });\n        }\n      } else {\n        this.store.dispatch({\n          type: this.actionTypes.connect,\n          number: this.toNumber,\n        });\n        try {\n          const validatedNumbers = await this._getValidatedNumbers();\n          if (validatedNumbers) {\n            await this._makeCall(validatedNumbers);\n            this.store.dispatch({\n              type: this.actionTypes.connectSuccess\n            });\n          } else {\n            this.store.dispatch({\n              type: this.actionTypes.connectError\n            });\n          }\n        } catch (error) {\n          if (error.message === ringoutErrors.firstLegConnectFailed) {\n            this._alert.warning({\n              message: callErrors.connectFailed,\n              payroll: error\n            });\n          } else if (error.message === 'Failed to fetch') {\n            console.log(error);\n            this._alert.danger({\n              message: callErrors.networkError,\n              payroll: error,\n            });\n          } else if (error.message !== 'Refresh token has expired') {\n            this._alert.danger({\n              message: callErrors.internalError,\n              payroll: error,\n            });\n          }\n          this.store.dispatch({\n            type: this.actionTypes.connectError\n          });\n        }\n      }\n    }\n  }\n\n  async _getValidatedNumbers() {\n    const fromNumber = this._callingSettings.myLocation;\n    const waitingValidateNumbers = [this.toNumber];\n    if (fromNumber && fromNumber.length > 0) {\n      waitingValidateNumbers.push(fromNumber);\n    }\n    const validatedResult\n      = await this._numberValidate.validateNumbers(waitingValidateNumbers);\n    if (!validatedResult.result) {\n      validatedResult.errors.forEach((error) => {\n        this._alert.warning({\n          message: callErrors[error.type]\n        });\n      });\n      return null;\n    }\n    const parsedNumbers = validatedResult.numbers;\n    // using e164 in response to call\n    let parsedFromNumber =\n      parsedNumbers[1] ? parsedNumbers[1].e164 : '';\n    // add ext back if any\n    if (parsedFromNumber !== '') {\n      parsedFromNumber = (parsedNumbers[1].subAddress) ?\n        [parsedNumbers[1].e164, parsedNumbers[1].subAddress].join('*') :\n        parsedNumbers[1].e164;\n    }\n    return {\n      toNumber: parsedNumbers[0].e164,\n      fromNumber: parsedFromNumber,\n    };\n  }\n\n  async _makeCall({ toNumber, fromNumber }) {\n    const callingMode = this._callingSettings.callingMode;\n    switch (callingMode) {\n      case callingModes.softphone:\n        this._softphone.makeCall(toNumber);\n        break;\n      case callingModes.ringout:\n        await this._ringout.makeCall({\n          fromNumber,\n          toNumber,\n          prompt: this._callingSettings.ringoutPrompt,\n        });\n        break;\n      default:\n        break;\n    }\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get callStatus() {\n    return this.state.callStatus;\n  }\n\n  get isIdle() {\n    return this.state.callStatus === callStatus.idle;\n  }\n\n  get lastCallNumber() {\n    return this._storage.getItem(this._storageKey) || '';\n  }\n\n  get toNumber() {\n    return this.state.toNumber;\n  }\n}\n"]}