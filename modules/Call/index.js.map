{"version":3,"sources":["modules/Call/index.js"],"names":["Call","alert","client","storage","callingSettings","softphone","ringout","webphone","extensionPhoneNumber","numberValidate","options","actionTypes","onCall","callStatus","idle","toNumber","trim","length","lastCallNumber","onToNumberChange","_alert","warning","message","noToNumber","store","dispatch","type","connect","number","_getValidatedNumbers","validatedNumbers","_makeCall","connectSuccess","connectError","firstLegConnectFailed","connectFailed","payroll","danger","networkError","internalError","_client","_storage","_storageKey","_fromNumberStorageKey","_reducer","_callingSettings","_ringout","_softphone","_webphone","_numberValidate","_extensionPhoneNumber","registerReducer","key","reducer","addSelector","callerIdNumbers","phoneNumbers","sort","firstItem","lastItem","usageType","subscribe","ready","status","pending","initSuccess","_initFromNumber","resetSuccess","fromNumber","fromNumberList","fromNumbers","updateFromNumber","phoneNumber","value","toNumberChanged","data","myLocation","waitingValidateNumbers","push","validateNumbers","validatedResult","result","errors","forEach","error","parsedNumbers","numbers","parsedFromNumber","e164","subAddress","join","callingMode","makeCall","prompt","ringoutPrompt","state","getItem","_selectors"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport callingModes from '../CallingSettings/callingModes';\nimport moduleStatuses from '../../enums/moduleStatuses';\n\nimport callActionTypes from './actionTypes';\nimport getCallReducer, {\n  getLastCallNumberReducer,\n  getFromNumberReducer,\n} from './getCallReducer';\n\nimport callStatus from './callStatus';\nimport callErrors from './callErrors';\nimport ringoutErrors from '../Ringout/ringoutErrors';\n\n\nexport default class Call extends RcModule {\n  constructor({\n    alert,\n    client,\n    storage,\n    callingSettings,\n    softphone,\n    ringout,\n    webphone,\n    extensionPhoneNumber,\n    numberValidate,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes: callActionTypes,\n    });\n\n    this._alert = alert;\n    this._client = client;\n    this._storage = storage;\n    this._storageKey = 'lastCallNumber';\n    this._fromNumberStorageKey = 'fromCallIdNumber';\n    this._reducer = getCallReducer(this.actionTypes);\n    this._callingSettings = callingSettings;\n    this._ringout = ringout;\n    this._softphone = softphone;\n    this._webphone = webphone;\n    this._numberValidate = numberValidate;\n    this._extensionPhoneNumber = extensionPhoneNumber;\n\n    this._storage.registerReducer({\n      key: this._storageKey,\n      reducer: getLastCallNumberReducer(this.actionTypes),\n    });\n\n    this._storage.registerReducer({\n      key: this._fromNumberStorageKey,\n      reducer: getFromNumberReducer(this.actionTypes),\n    });\n\n    this.addSelector(\n      'fromNumbers',\n      () => this._extensionPhoneNumber.callerIdNumbers,\n      phoneNumbers => phoneNumbers.sort((firstItem, lastItem) => {\n        if (firstItem.usageType === 'DirectNumber') return -1;\n        else if (lastItem.usageType === 'DirectNumber') return 1;\n        else if (firstItem.usageType === 'MainCompanyNumber') return -1;\n        else if (lastItem.usageType === 'MainCompanyNumber') return 1;\n        else if (firstItem.usageType < lastItem.usageType) return -1;\n        else if (firstItem.usageType > lastItem.usageType) return 1;\n        return 0;\n      }),\n    );\n  }\n\n  initialize() {\n    this.store.subscribe(() => {\n      if (\n        this._numberValidate.ready &&\n        this._callingSettings.ready &&\n        this._storage.ready &&\n        this._extensionPhoneNumber.ready &&\n        this.status === moduleStatuses.pending\n      ) {\n        this.store.dispatch({\n          type: this.actionTypes.initSuccess,\n        });\n        this._initFromNumber();\n      } else if (\n        (\n          !this._numberValidate.ready ||\n          !this._callingSettings.ready ||\n          !this._extensionPhoneNumber.ready ||\n          !this._storage.ready\n        ) &&\n        this.status === moduleStatuses.ready\n      ) {\n        this.store.dispatch({\n          type: this.actionTypes.resetSuccess,\n        });\n      }\n    });\n  }\n\n  _initFromNumber() {\n    const fromNumber = this.fromNumber;\n    if (!fromNumber) {\n      const fromNumberList = this.fromNumbers;\n      this.updateFromNumber(fromNumberList[0]);\n    }\n  }\n\n  updateFromNumber(number) {\n    this.store.dispatch({\n      type: this.actionTypes.updateFromNumber,\n      number: number && number.phoneNumber,\n    });\n  }\n\n  onToNumberChange(value) {\n    this.store.dispatch({\n      type: this.actionTypes.toNumberChanged,\n      data: value,\n    });\n  }\n\n  onCall = async () => {\n    if (this.callStatus === callStatus.idle) {\n      // last number check\n      if (`${this.toNumber}`.trim().length === 0) {\n        if (this.lastCallNumber) {\n          this.onToNumberChange(this.lastCallNumber);\n        } else {\n          this._alert.warning({\n            message: callErrors.noToNumber,\n          });\n        }\n      } else {\n        this.store.dispatch({\n          type: this.actionTypes.connect,\n          number: this.toNumber,\n        });\n        try {\n          const validatedNumbers = await this._getValidatedNumbers();\n          if (validatedNumbers) {\n            await this._makeCall(validatedNumbers);\n            this.store.dispatch({\n              type: this.actionTypes.connectSuccess\n            });\n          } else {\n            this.store.dispatch({\n              type: this.actionTypes.connectError\n            });\n          }\n        } catch (error) {\n          if (error.message === ringoutErrors.firstLegConnectFailed) {\n            this._alert.warning({\n              message: callErrors.connectFailed,\n              payroll: error\n            });\n          } else if (error.message === 'Failed to fetch') {\n            this._alert.danger({\n              message: callErrors.networkError,\n              payroll: error,\n            });\n          } else if (error.message !== 'Refresh token has expired') {\n            this._alert.danger({\n              message: callErrors.internalError,\n              payroll: error,\n            });\n          }\n          this.store.dispatch({\n            type: this.actionTypes.connectError\n          });\n        }\n      }\n    }\n  }\n\n  async _getValidatedNumbers() {\n    const fromNumber = this._callingSettings.myLocation;\n    const waitingValidateNumbers = [this.toNumber];\n    if (fromNumber && fromNumber.length > 0) {\n      waitingValidateNumbers.push(fromNumber);\n    }\n    const validatedResult\n      = await this._numberValidate.validateNumbers(waitingValidateNumbers);\n    if (!validatedResult.result) {\n      validatedResult.errors.forEach((error) => {\n        this._alert.warning({\n          message: callErrors[error.type]\n        });\n      });\n      return null;\n    }\n    const parsedNumbers = validatedResult.numbers;\n    // using e164 in response to call\n    let parsedFromNumber =\n      parsedNumbers[1] ? parsedNumbers[1].e164 : '';\n    // add ext back if any\n    if (parsedFromNumber !== '') {\n      parsedFromNumber = (parsedNumbers[1].subAddress) ?\n        [parsedNumbers[1].e164, parsedNumbers[1].subAddress].join('*') :\n        parsedNumbers[1].e164;\n    }\n    return {\n      toNumber: parsedNumbers[0].e164,\n      fromNumber: parsedFromNumber,\n    };\n  }\n\n  async _makeCall({ toNumber, fromNumber }) {\n    const callingMode = this._callingSettings.callingMode;\n    switch (callingMode) {\n      case callingModes.softphone:\n        this._softphone.makeCall(toNumber);\n        break;\n      case callingModes.ringout:\n        await this._ringout.makeCall({\n          fromNumber,\n          toNumber,\n          prompt: this._callingSettings.ringoutPrompt,\n        });\n        break;\n      default:\n        break;\n    }\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get callStatus() {\n    return this.state.callStatus;\n  }\n\n  get isIdle() {\n    return this.state.callStatus === callStatus.idle;\n  }\n\n  get lastCallNumber() {\n    return this._storage.getItem(this._storageKey) || '';\n  }\n\n  get toNumber() {\n    return this.state.toNumber;\n  }\n\n  get fromNumber() {\n    return this._storage.getItem(this._fromNumberStorageKey);\n  }\n\n  get fromNumbers() {\n    return this._selectors.fromNumbers();\n  }\n}\n"]}