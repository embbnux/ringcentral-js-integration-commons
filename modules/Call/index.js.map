{"version":3,"sources":["modules/Call/index.js"],"names":["Call","alert","client","storage","regionSettings","callingSettings","softphone","ringout","accountExtension","options","actionTypes","onCall","callStatus","idle","toNumber","trim","length","lastCallNumber","onToNumberChange","_alert","warning","message","noToNumber","store","dispatch","type","connect","number","_getValidatedNumbers","validatedNumbers","_makeCall","firstLegConnectFailed","connectFailed","payroll","danger","networkError","internalError","completeConnect","_client","_storage","_storageKey","_reducer","_regionSettings","_callingSettings","_ringout","_softphone","_accountExtension","registerReducer","key","reducer","subscribe","ready","status","pending","initSuccess","resetSuccess","value","toNumberChanged","data","fromNumber","myLocation","countryCode","areaCode","hasPlus","isServiceNumber","cleaned","noAreaCode","normalized","phoneNumber","homeCountry","numberParser","parse","post","originalStrings","resp","phoneNumbers","special","specialNumber","originalString","isAvailableExtension","notAnExtension","parsedFromNumber","e164","subAddress","join","callingMode","makeCall","prompt","ringoutPrompt","state","getItem"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport callingModes from '../CallingSettings/callingModes';\nimport moduleStatus from '../../enums/moduleStatus';\nimport normalizeNumber from '../../lib/normalizeNumber'; // TODO : move to ringcentral-integration\nimport cleanNumber from '../../lib/cleanNumber';\nimport parseNumber from '../../lib/parseNumber';\n\nimport callActionTypes from './actionTypes';\nimport getCallReducer, {\n  getLastCallNumberReducer,\n} from './getCallReducer';\n\nimport callStatus from './callStatus';\nimport callErrors from './callErrors';\nimport ringoutErrors from '../Ringout/ringoutErrors';\n\n\nexport default class Call extends RcModule {\n  constructor({\n    alert,\n    client,\n    storage,\n    regionSettings,\n    callingSettings,\n    softphone,\n    ringout,\n    accountExtension,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes: callActionTypes,\n    });\n\n    this._alert = alert;\n    this._client = client;\n    this._storage = storage;\n    this._storageKey = 'lastCallNumber';\n    this._reducer = getCallReducer(this.actionTypes);\n    this._regionSettings = regionSettings;\n    this._callingSettings = callingSettings;\n    this._ringout = ringout;\n    this._softphone = softphone;\n    this._accountExtension = accountExtension;\n\n    this._storage.registerReducer({\n      key: this._storageKey,\n      reducer: getLastCallNumberReducer(this.actionTypes),\n    });\n  }\n\n  initialize() {\n    this.store.subscribe(() => {\n      if (\n        this._regionSettings.ready &&\n        this._callingSettings.ready &&\n        this._storage.ready &&\n        this.status === moduleStatus.pending\n      ) {\n        this.store.dispatch({\n          type: this.actionTypes.initSuccess,\n        });\n      } else if (\n        (\n          !this._regionSettings.ready ||\n          !this._callingSettings.ready ||\n          !this._storage.ready\n        ) &&\n        this.status === moduleStatus.ready\n      ) {\n        this.store.dispatch({\n          type: this.actionTypes.resetSuccess,\n        });\n      }\n    });\n  }\n\n  onToNumberChange(value) {\n    this.store.dispatch({\n      type: this.actionTypes.toNumberChanged,\n      data: value,\n    });\n  }\n\n  onCall = async () => {\n    if (this.callStatus === callStatus.idle) {\n      // last number check\n      if (`${this.toNumber}`.trim().length === 0) {\n        if (this.lastCallNumber) {\n          this.onToNumberChange(this.lastCallNumber);\n        } else {\n          this._alert.warning({\n            message: callErrors.noToNumber,\n          });\n        }\n      } else {\n        this.store.dispatch({\n          type: this.actionTypes.connect,\n          number: this.toNumber,\n        });\n        try {\n          const validatedNumbers = await this._getValidatedNumbers();\n          if (validatedNumbers) {\n            await this._makeCall(validatedNumbers);\n          }\n        } catch (error) {\n          if (error.message === ringoutErrors.firstLegConnectFailed) {\n            this._alert.warning({\n              message: callErrors.connectFailed,\n              payroll: error\n            });\n          } else if (error.message === 'Failed to fetch') {\n            this._alert.danger({\n              message: callErrors.networkError,\n              payroll: error,\n            });\n          } else if (error.message !== 'Refresh token has expired') {\n            this._alert.danger({\n              message: callErrors.internalError,\n              payroll: error,\n            });\n          }\n        }\n        this.store.dispatch({\n          type: this.actionTypes.completeConnect\n        });\n      }\n    }\n  }\n\n  async _getValidatedNumbers() {\n    const fromNumber = this._callingSettings.myLocation;\n    const countryCode = this._regionSettings.countryCode;\n    const areaCode = this._regionSettings.areaCode;\n\n    const {\n      hasPlus,\n      number,\n      isServiceNumber\n    } = parseNumber(this.toNumber);\n    const cleaned = cleanNumber(this.toNumber);\n    // non digital number\n    if (cleaned.length === 0) {\n      this._alert.warning({\n        message: callErrors.noToNumber,\n      });\n    } else if (\n      !isServiceNumber &&\n      !hasPlus &&\n      number.length === 7 &&\n      (countryCode === 'CA' || countryCode === 'US') &&\n      areaCode === ''\n    ) {\n      this._alert.warning({\n        message: callErrors.noAreaCode\n      });\n    } else {\n      // to e164 normalize\n      const normalized = normalizeNumber({\n        phoneNumber: this.toNumber,\n        countryCode,\n        areaCode,\n      });\n      // phoneParser\n      const homeCountry = countryCode ? { homeCountry: countryCode } : {};\n      const resp = await this._client.numberParser().parse().post(\n        {\n          originalStrings: [normalized, fromNumber]\n        },\n        homeCountry,\n      );\n      if (resp.phoneNumbers[0] && resp.phoneNumbers[0].special) {\n        this._alert.warning({\n          message: callErrors.specialNumber\n        });\n      } else if (resp.phoneNumbers[0] &&\n        resp.phoneNumbers[0].originalString.length <= 5 &&\n        !this._accountExtension.isAvailableExtension(resp.phoneNumbers[0].originalString)\n      ) { // not a service code but short number, confirm if it is an extension\n        this._alert.warning({\n          message: callErrors.notAnExtension\n        });\n      } else {\n        // using e164 in response to call\n        let parsedFromNumber =\n          resp.phoneNumbers[1] ? resp.phoneNumbers[1].e164 : '';\n        // add ext back if any\n        if (parsedFromNumber !== '') {\n          parsedFromNumber = (resp.phoneNumbers[1].subAddress) ?\n            [resp.phoneNumbers[1].e164, resp.phoneNumbers[1].subAddress].join('*') :\n            resp.phoneNumbers[1].e164;\n        }\n        return {\n          toNumber: resp.phoneNumbers[0].e164,\n          fromNumber: parsedFromNumber,\n        };\n      }\n    }\n    return null;\n  }\n\n  async _makeCall({ toNumber, fromNumber }) {\n    const callingMode = this._callingSettings.callingMode;\n    switch (callingMode) {\n      case callingModes.softphone:\n        this._softphone.makeCall(toNumber);\n        break;\n      case callingModes.ringout:\n        await this._ringout.makeCall({\n          fromNumber,\n          toNumber,\n          prompt: this._callingSettings.ringoutPrompt,\n        });\n        break;\n      default:\n        break;\n    }\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get callStatus() {\n    return this.state.callStatus;\n  }\n\n  get isIdle() {\n    return this.state.callStatus === callStatus.idle;\n  }\n\n  get lastCallNumber() {\n    return this._storage.getItem(this._storageKey) || '';\n  }\n\n  get toNumber() {\n    return this.state.toNumber;\n  }\n}\n"]}