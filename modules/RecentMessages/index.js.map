{"version":3,"sources":["modules/RecentMessages/index.js"],"names":["RecentMessages","client","messageStore","options","actionTypes","_client","_messageStore","_reducer","addSelector","messages","reduce","acc","cur","readStatus","_currentContact","_prevMessageStoreTimestamp","store","subscribe","_onStateChange","pending","ready","dispatch","type","initSuccess","resetSuccess","updatedTimestamp","getMessages","currentContact","forceUpdate","initLoad","loadReset","_getRecentMessages","loadSuccess","daySpan","length","dateFrom","recentMessages","_getLocalRecentMessages","dateTo","lastModifiedTime","undefined","_fetchRemoteRecentMessages","toISOString","concat","_dedup","slice","phoneNumbers","message","matches","i","find","_filterPhoneNumber","Date","push","phoneNumber","extensionNumber","from","to","params","messageType","perPage","recentMessagesPromise","promise","_fetchMessageList","all","then","_flattenToMessageRecords","_markAsRemoteMessage","_sortMessages","account","extension","list","allMessages","records","sort","a","b","map","fromRemote","hash","id","state","_selectors","unreadMessageCounts","messageStatus","loaded","status"],"mappings":"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","file":"index.js","sourcesContent":["import proxify from '../../lib/proxy/proxify';\nimport ensureExist from '../../lib/ensureExist';\nimport RcModule from '../../lib/RcModule';\nimport actionTypes from './actionTypes';\nimport messageStatus from './messageStatus';\nimport getRecentMessagesReducer from './getRecentMessagesReducer';\nimport getDateFrom from '../../lib/getDateFrom';\n\n/**\n * Retrieve all recent messages related to a specified contact.\n */\nexport default class RecentMessages extends RcModule {\n  constructor({\n    client,\n    messageStore,\n    ...options\n  }) {\n    super({\n      actionTypes,\n      ...options\n    });\n    this._client = this::ensureExist(client, 'client');\n    this._messageStore = this::ensureExist(messageStore, 'messageStore');\n    this._reducer = getRecentMessagesReducer(this.actionTypes);\n\n    this.addSelector(\n      'unreadMessageCounts',\n      () => this.messages,\n      messages => messages.reduce((acc, cur) => acc + (cur.readStatus !== 'Read' ? 1 : 0), 0)\n    );\n\n    this._currentContact = null;\n    this._prevMessageStoreTimestamp = null;\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (\n      this.pending &&\n      this._messageStore.ready\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (\n      this.ready &&\n      !this._messageStore.ready\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess\n      });\n    } else if (this._currentContact !== null) {\n      // Listen to messageStore state changes\n      if (this._messageStore.updatedTimestamp !== this._prevMessageStoreTimestamp) {\n        this._prevMessageStoreTimestamp = this._messageStore.updatedTimestamp;\n        this.getMessages(this._currentContact, true);\n      }\n    }\n  }\n\n  get messages() {\n    return this.state.messages;\n  }\n\n  get unreadMessageCounts() {\n    return this._selectors.unreadMessageCounts();\n  }\n\n  get isMessagesLoaded() {\n    return this.state.messageStatus === messageStatus.loaded;\n  }\n\n  @proxify\n  async getMessages(currentContact, forceUpdate = false) {\n    // No need to calculate recent messages of the same contact repeatly\n    if (\n      !forceUpdate &&\n      !!currentContact &&\n      currentContact === this._currentContact\n    ) {\n      return;\n    }\n    this._currentContact = currentContact;\n    this._prevMessageStoreTimestamp = this._messageStore.updatedTimestamp;\n    this.store.dispatch({\n      type: this.actionTypes.initLoad\n    });\n    if (!currentContact) {\n      this.store.dispatch({\n        type: this.actionTypes.loadReset\n      });\n      return;\n    }\n    const messages = await this._getRecentMessages(\n      currentContact,\n      this._messageStore.messages\n    );\n    this.store.dispatch({\n      type: this.actionTypes.loadSuccess,\n      messages\n    });\n  }\n\n  cleanUpMessages() {\n    this.store.dispatch({\n      type: this.actionTypes.loadReset\n    });\n    this._currentContact = null;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  /**\n   * Searching for recent messages of specific contact.\n   * @param {Object} currentContact Current contact\n   * @param {Array} messages Messages in messageStore\n   * @param {Number} daySpan Find messages within certain days\n   * @param {Number} length Maximum length of recent messages\n   * @return {Array}\n   * @private\n   */\n  async _getRecentMessages(currentContact, messages = [], daySpan = 60, length = 5) {\n    const dateFrom = getDateFrom(daySpan);\n    let recentMessages = this._getLocalRecentMessages(\n      currentContact,\n      messages,\n      dateFrom,\n      length\n    );\n\n    // If we could not find enough recent messages,\n    // we need to search for messages on server.\n    if (recentMessages.length < length) {\n      const dateTo = recentMessages.length > 0\n        ? recentMessages[recentMessages.length - 1].lastModifiedTime\n        : undefined;\n\n      // This will always be sorted\n      recentMessages = recentMessages.concat(\n        await this._fetchRemoteRecentMessages(\n          currentContact,\n          dateFrom.toISOString(),\n          dateTo,\n          length\n        )\n      );\n    }\n\n    recentMessages = this._dedup(recentMessages);\n    return recentMessages.length > length\n      ? recentMessages.slice(0, length)\n      : recentMessages;\n  }\n\n  /**\n   * Get recent messages from messageStore.\n   * @param {Object} currentContact\n   * @param {Array} messages\n   * @param {Date} dateFrom\n   * @param {Number} length\n   */\n  _getLocalRecentMessages(currentContact, messages, dateFrom, length) {\n    // Get all messages related to this contacts\n    const phoneNumbers = currentContact.phoneNumbers;\n    const recentMessages = [];\n    let message;\n    let matches;\n    for (let i = messages.length - 1; i >= 0; i -= 1) {\n      message = messages[i];\n      matches = phoneNumbers.find(this._filterPhoneNumber(message));\n\n      // Check if message is within certain days\n      if (!!matches && new Date(message.lastModifiedTime) > dateFrom) {\n        recentMessages.push(message);\n      }\n      if (recentMessages.length >= length) break;\n    }\n    return recentMessages;\n  }\n\n  _filterPhoneNumber(message) {\n    return ({ phoneNumber, extensionNumber }) => (\n      (\n        phoneNumber && (\n        phoneNumber === message.from.phoneNumber ||\n        !!message.to.find(to => to.phoneNumber === phoneNumber)\n      )) ||\n      (\n        extensionNumber && (\n        extensionNumber === message.from.extensionNumber ||\n        !!message.to.find(to => to.extensionNumber === extensionNumber)\n      ))\n    );\n  }\n\n  /**\n   * Fetch recent messages from server by given current contact.\n   * It will iterate through all phoneNumbers of this contact and\n   * get specific number of latest messsages.\n   * @param {Object} currentContact\n   * @param {String} dateFrom\n   * @param {String} dateTo\n   * @param {Number} length The number of messages\n   * @return {Array}\n   */\n  _fetchRemoteRecentMessages(\n    currentContact,\n    dateFrom,\n    dateTo = (new Date()).toISOString(),\n    length\n  ) {\n    const params = {\n      dateTo,\n      dateFrom,\n      messageType: ['SMS', 'Text'],\n      perPage: length\n    };\n    const phoneNumbers = currentContact.phoneNumbers;\n    const recentMessagesPromise = phoneNumbers.reduce((acc, { phoneNumber }) => {\n      // Cannot filter out by extensionNumber\n      if (phoneNumber) {\n        const promise = this._fetchMessageList(\n          Object.assign(params, {\n            phoneNumber\n          })\n        );\n        return acc.concat(promise);\n      }\n      return acc;\n    }, []);\n\n    // TODO: Because we need to navigate to the message page,\n    // So we may need to push new messages to messageStore\n    return Promise.all(recentMessagesPromise)\n      .then(this._flattenToMessageRecords)\n      .then(this._markAsRemoteMessage)\n      .then(messages => this._sortMessages(messages));\n  }\n\n  _fetchMessageList(params) {\n    return this._client.account().extension().messageStore().list(params);\n  }\n\n  _countUnreadMessages(messages) {\n    return messages.reduce((acc, cur) => acc + (cur.readStatus !== 'Read' ? 1 : 0), 0);\n  }\n\n  _flattenToMessageRecords(allMessages) {\n    return allMessages.reduce((acc, { records }) => acc.concat(records), []);\n  }\n\n  _sortMessages(recentMessages) {\n    // Sort by time in descending order\n    return recentMessages.sort((a, b) =>\n      new Date(b.lastModifiedTime) - new Date(a.lastModifiedTime)\n    );\n  }\n\n  _markAsRemoteMessage(messages) {\n    return messages.map((message) => {\n      message.fromRemote = true;\n      return message;\n    });\n  }\n\n  _dedup(messages) {\n    const hash = {};\n    return messages.reduce((acc, cur) => {\n      if (hash[cur.id]) return acc;\n      hash[cur.id] = true;\n      return acc.concat(cur);\n    }, []);\n  }\n}\n"]}