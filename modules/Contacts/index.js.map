{"version":3,"sources":["modules/Contacts/index.js"],"names":["addPhoneToContact","contact","phone","type","phoneNumber","existedPhone","phoneNumbers","find","number","phoneType","push","DEFAULT_TTL","Contacts","client","addressBook","accountExtension","accountPhoneNumber","ttl","options","actionTypes","_addressBook","_accountExtension","_accountPhoneNumber","_client","_reducer","_ttl","addSelector","availableExtensions","extensionToPhoneNumberMap","extensions","newExtensions","forEach","extension","status","indexOf","id","firstName","lastName","email","extensionNumber","ext","hasProfileImage","phones","length","contacts","rawContacts","rawContact","key","toLowerCase","store","subscribe","_onStateChange","_shouldInit","dispatch","initSuccess","_shouldReset","_resetModuleStatus","ready","pending","resetSuccess","result","matchContact","found","contactPhoneNumber","name","matchedContact","entityType","companyContacts","personalContacts","matchPhoneNumber","imageId","profileImages","Date","now","timestamp","url","account","profileImage","get","response","URL","_response","blob","imageUrl","createObjectURL","image","fetchImageSuccess","console","error","state","_selectors"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport isBlank from '../../lib/isBlank';\nimport normalizeNumber from '../../lib/normalizeNumber';\nimport ensureExist from '../../lib/ensureExist';\nimport actionTypes from './actionTypes';\nimport getContactsReducer from './getContactsReducer';\n\nfunction addPhoneToContact(contact, phone, type) {\n  const phoneNumber = normalizeNumber({ phoneNumber: phone });\n  if (isBlank(phoneNumber)) {\n    return;\n  }\n  const existedPhone = contact.phoneNumbers.find(\n    number => number && number.phoneNumber === phone\n  );\n  if (existedPhone) {\n    existedPhone.phoneType = type;\n  } else {\n    contact.phoneNumbers.push({\n      phoneNumber: phone,\n      phoneType: type,\n    });\n  }\n}\n\nconst DEFAULT_TTL = 30 * 60 * 1000;\nexport default class Contacts extends RcModule {\n  constructor({\n    client,\n    addressBook,\n    accountExtension,\n    accountPhoneNumber,\n    ttl = DEFAULT_TTL,\n    ...options,\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._addressBook = this::ensureExist(addressBook, 'addressBook');\n    this._accountExtension = this::ensureExist(accountExtension, 'accountExtension');\n    this._accountPhoneNumber = this::ensureExist(accountPhoneNumber, 'accountPhoneNumber');\n    this._client = this::ensureExist(client, 'client');\n    this._reducer = getContactsReducer(this.actionTypes);\n    this._ttl = ttl;\n\n    this.addSelector(\n      'companyContacts',\n      () => this._accountExtension.availableExtensions,\n      () => this._accountPhoneNumber.extensionToPhoneNumberMap,\n      (extensions, extensionToPhoneNumberMap) => {\n        const newExtensions = [];\n        extensions.forEach((extension) => {\n          if (!(extension.status === 'Enabled' &&\n            ['DigitalUser', 'User'].indexOf(extension.type) >= 0)) {\n            return;\n          }\n          const contact = {\n            type: 'company',\n            id: extension.id,\n            firstName: extension.contact && extension.contact.firstName,\n            lastName: extension.contact && extension.contact.lastName,\n            email: extension.contact && extension.contact.email,\n            extensionNumber: extension.ext,\n            hasProfileImage: extension.hasProfileImage,\n            phoneNumbers: [],\n          };\n          if (isBlank(contact.extensionNumber)) {\n            return;\n          }\n          const phones = extensionToPhoneNumberMap[contact.extensionNumber];\n          if (phones && phones.length > 0) {\n            phones.forEach((phone) => {\n              addPhoneToContact(contact, phone.phoneNumber, 'directPhone');\n            });\n          }\n          newExtensions.push(contact);\n        });\n        return newExtensions;\n      }\n    );\n\n    this.addSelector(\n      'personalContacts',\n      () => this._addressBook.contacts,\n      (rawContacts) => {\n        const contacts = [];\n        rawContacts.forEach((rawContact) => {\n          const contact = {\n            type: 'personal',\n            phoneNumbers: [],\n            ...rawContact,\n          };\n          Object.keys(contact).forEach((key) => {\n            if (key.toLowerCase().indexOf('phone') === -1) {\n              return;\n            }\n            if (typeof contact[key] !== 'string') {\n              return;\n            }\n            addPhoneToContact(contact, contact[key], key);\n          });\n          contacts.push(contact);\n        });\n        return contacts;\n      }\n    );\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._addressBook.ready &&\n      this._accountExtension.ready &&\n      this._accountPhoneNumber.ready &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._addressBook.ready ||\n        !this._accountExtension.ready ||\n        !this._accountPhoneNumber.ready\n      ) &&\n      this.ready\n    );\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  matchPhoneNumber(phone) {\n    const result = [];\n    const phoneNumber = normalizeNumber({ phoneNumber: phone });\n    const matchContact = (contact) => {\n      let found = contact.extensionNumber && contact.extensionNumber === phoneNumber;\n      if (!found) {\n        contact.phoneNumbers.forEach((contactPhoneNumber) => {\n          if (!found && contactPhoneNumber.phoneNumber === phoneNumber) {\n            found = true;\n          }\n        });\n      }\n      if (!found) {\n        return;\n      }\n      const name =\n        `${\n          contact.firstName ? contact.firstName : ''\n        } ${\n          contact.lastName ? contact.lastName : ''\n        }`;\n      const matchedContact = {\n        ...contact,\n        phoneNumbers: [\n          ...contact.phoneNumbers\n        ],\n        entityType: 'rcContact',\n        name,\n      };\n      if (contact.extensionNumber) {\n        matchedContact.phoneNumbers.push({\n          phoneType: 'extension',\n          phoneNumber: contact.extensionNumber,\n        });\n      }\n      result.push(matchedContact);\n    };\n    this.companyContacts.forEach(matchContact);\n    this.personalContacts.forEach(matchContact);\n    return result;\n  }\n\n  matchContacts({ phoneNumbers }) {\n    const result = {};\n    phoneNumbers.forEach((phoneNumber) => {\n      result[phoneNumber] = this.matchPhoneNumber(phoneNumber);\n    });\n    return result;\n  }\n\n  async getImageProfile(contact) {\n    if (contact.type === 'company' && contact.id && contact.hasProfileImage) {\n      const imageId = `${contact.type}${contact.id}`;\n      if (\n        this.profileImages[imageId] &&\n        (Date.now() - this.profileImages[imageId].timestamp < this._ttl)\n      ) {\n        return this.profileImages[imageId].url;\n      }\n      try {\n        const response = await this._client.account().extension(contact.id).profileImage().get();\n        const imageUrl = URL.createObjectURL(await response._response.blob());\n        const image = {\n          id: imageId,\n          url: imageUrl,\n        };\n        this.store.dispatch({\n          type: this.actionTypes.fetchImageSuccess,\n          image,\n        });\n        return image.url;\n      } catch (e) {\n        console.error(e);\n        return null;\n      }\n    }\n    return null;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get companyContacts() {\n    return this._selectors.companyContacts();\n  }\n\n  get personalContacts() {\n    return this._selectors.personalContacts();\n  }\n\n  get profileImages() {\n    return this.state.profileImages;\n  }\n}\n"]}