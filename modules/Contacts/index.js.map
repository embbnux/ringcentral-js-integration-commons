{"version":3,"sources":["modules/Contacts/index.js"],"names":["addPhoneToContact","contact","phone","type","phoneNumber","existedPhone","phoneNumbers","find","number","push","Contacts","addressBook","accountExtension","accountPhoneNumber","options","actionTypes","_addressBook","_accountExtension","_accountPhoneNumber","_reducer","addSelector","availableExtensions","extensionToPhoneNumberMap","extensions","newExtensions","forEach","extension","status","indexOf","id","firstName","lastName","email","extensionNumber","ext","phones","length","contacts","rawContacts","rawContact","key","toLowerCase","store","subscribe","_onStateChange","_shouldInit","dispatch","initSuccess","_shouldReset","_resetModuleStatus","ready","pending","resetSuccess","result","matchContact","found","contactPhoneNumber","matchedContact","entityType","name","phoneType","personalContacts","companyContacts","searchPhoneNumber","state","_selectors"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport isBlank from '../../lib/isBlank';\nimport normalizeNumber from '../../lib/normalizeNumber';\nimport actionTypes from './actionTypes';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport getContactsReducer from './getContactsReducer';\n\nfunction addPhoneToContact(contact, phone, type) {\n  const phoneNumber = normalizeNumber({ phoneNumber: phone });\n  if (isBlank(phoneNumber)) {\n    return;\n  }\n  const existedPhone = contact.phoneNumbers.find(\n    number => number && number.phoneNumber === phone\n  );\n  if (existedPhone) {\n    existedPhone.type = type;\n  } else {\n    contact.phoneNumbers.push({\n      phoneNumber: phone,\n      type,\n    });\n  }\n}\n\nexport default class Contacts extends RcModule {\n  constructor({\n    addressBook,\n    accountExtension,\n    accountPhoneNumber,\n    ...options,\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._addressBook = addressBook;\n    this._accountExtension = accountExtension;\n    this._accountPhoneNumber = accountPhoneNumber;\n    this._reducer = getContactsReducer(this.actionTypes);\n\n    this.addSelector(\n      'companyContacts',\n      () => this._accountExtension.availableExtensions,\n      () => this._accountPhoneNumber.extensionToPhoneNumberMap,\n      (extensions, extensionToPhoneNumberMap) => {\n        const newExtensions = [];\n        extensions.forEach((extension) => {\n          if (!(extension.status === 'Enabled' &&\n            ['DigitalUser', 'User'].indexOf(extension.type) >= 0)) {\n            return;\n          }\n          const contact = {\n            type: 'company',\n            id: extension.id,\n            firstName: extension.contact && extension.contact.firstName,\n            lastName: extension.contact && extension.contact.lastName,\n            email: extension.contact && extension.contact.email,\n            extensionNumber: extension.ext,\n            phoneNumbers: [],\n          };\n          if (isBlank(contact.extensionNumber)) {\n            return;\n          }\n          const phones = extensionToPhoneNumberMap[contact.extensionNumber];\n          if (phones && phones.length > 0) {\n            phones.forEach((phone) => {\n              addPhoneToContact(contact, phone.phoneNumber, 'directPhone');\n            });\n          }\n          newExtensions.push(contact);\n        });\n        return newExtensions;\n      }\n    );\n\n    this.addSelector(\n      'personalContacts',\n      () => this._addressBook.contacts,\n      (rawContacts) => {\n        const contacts = [];\n        rawContacts.forEach((rawContact) => {\n          const contact = {\n            type: 'personal',\n            phoneNumbers: [],\n            ...rawContact,\n          };\n          Object.keys(contact).forEach((key) => {\n            if (key.toLowerCase().indexOf('phone') === -1) {\n              return;\n            }\n            if (typeof contact[key] !== 'string') {\n              return;\n            }\n            addPhoneToContact(contact, contact[key], key);\n          });\n          contacts.push(contact);\n        });\n        return contacts;\n      }\n    );\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._addressBook.ready &&\n      this._accountExtension.ready &&\n      this._accountPhoneNumber.ready &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._addressBook.ready ||\n        !this._accountExtension.ready ||\n        !this._accountPhoneNumber.ready\n      ) &&\n      this.ready\n    );\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  searchPhoneNumber(phone) {\n    const result = [];\n    const phoneNumber = normalizeNumber({ phoneNumber: phone });\n    const matchContact = (contact) => {\n      let found = contact.extensionNumber && contact.extensionNumber === phoneNumber;\n      if (!found) {\n        contact.phoneNumbers.forEach((contactPhoneNumber) => {\n          if (!found && contactPhoneNumber.phoneNumber === phoneNumber) {\n            found = true;\n          }\n        });\n      }\n      if (!found) {\n        return;\n      }\n      const matchedContact = {\n        ...contact,\n        phoneNumbers: [\n          ...contact.phoneNumbers\n        ],\n        entityType: 'contact',\n        name: `${contact.firstName} ${contact.lastName}`,\n      };\n      if (contact.extensionNumber) {\n        matchedContact.phoneNumbers.push({\n          phoneType: 'extension',\n          phoneNumber: contact.extensionNumber,\n        });\n      }\n      result.push(matchedContact);\n    };\n    this.personalContacts.forEach(matchContact);\n    this.companyContacts.forEach(matchContact);\n    return result;\n  }\n\n  matchContacts({ phoneNumbers }) {\n    const result = {};\n    phoneNumbers.forEach((phoneNumber) => {\n      result[phoneNumber] = this.searchPhoneNumber(phoneNumber);\n    });\n    return result;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get companyContacts() {\n    return this._selectors.companyContacts();\n  }\n\n  get personalContacts() {\n    return this._selectors.personalContacts();\n  }\n}\n"]}