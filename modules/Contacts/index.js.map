{"version":3,"sources":["modules/Contacts/index.js"],"names":["MaximumBatchGetPresence","addPhoneToContact","contact","phone","type","phoneNumber","existedPhone","phoneNumbers","find","number","phoneType","push","DEFAULT_TTL","DEFAULT_PRESENCETTL","DEFAULT_AVATARTTL","DEFAULT_AVATARQUERYINTERVAL","Contacts","client","addressBook","accountExtension","accountPhoneNumber","ttl","avatarTtl","presenceTtl","avatarQueryInterval","options","actionTypes","_addressBook","_accountExtension","_accountPhoneNumber","_client","_reducer","_ttl","_avatarTtl","_presenceTtl","_avatarQueryInterval","addSelector","availableExtensions","extensionToPhoneNumberMap","extensions","newExtensions","forEach","extension","status","indexOf","id","firstName","lastName","email","extensionNumber","ext","hasProfileImage","phones","length","contacts","rawContacts","rawContact","key","toLowerCase","store","subscribe","_onStateChange","_shouldInit","dispatch","initSuccess","_shouldReset","_resetModuleStatus","ready","pending","resetSuccess","result","matchContact","found","contactPhoneNumber","name","matchedContact","entityType","companyContacts","personalContacts","matchPhoneNumber","contactType","contactId","toString","x","useCache","resolve","imageId","profileImages","Date","now","timestamp","image","imageUrl","_getAvatarContexts","_queryingAvatar","_processQueryAvatar","getAvatarContexts","ctx","account","profileImage","get","response","URL","_response","blob","createObjectURL","fetchImageSuccess","console","error","splice","presenceId","contactPresences","presence","_getPresenceContexts","clearTimeout","enqueueTimeoutId","_processQueryPresences","setTimeout","getPresenceContexts","map","_batchQueryPresences","responses","dndStatus","presenceStatus","telephonyStatus","userStatus","fetchPresenceSuccess","presenceSet","ids","join","platform","service","url","multipartResponse","json","item","state","_selectors"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport isBlank from '../../lib/isBlank';\nimport normalizeNumber from '../../lib/normalizeNumber';\nimport ensureExist from '../../lib/ensureExist';\nimport { batchGetApi } from '../../lib/batchApiHelper';\nimport sleep from '../../lib/sleep';\nimport actionTypes from './actionTypes';\nimport getContactsReducer from './getContactsReducer';\n\nconst MaximumBatchGetPresence = 30;\n\nfunction addPhoneToContact(contact, phone, type) {\n  const phoneNumber = normalizeNumber({ phoneNumber: phone });\n  if (isBlank(phoneNumber)) {\n    return;\n  }\n  const existedPhone = contact.phoneNumbers.find(\n    number => number && number.phoneNumber === phone\n  );\n  if (existedPhone) {\n    existedPhone.phoneType = type;\n  } else {\n    contact.phoneNumbers.push({\n      phoneNumber: phone,\n      phoneType: type,\n    });\n  }\n}\n\nconst DEFAULT_TTL = 30 * 60 * 1000; // 30 mins\nconst DEFAULT_PRESENCETTL = 10 * 60 * 1000; // 10 mins\nconst DEFAULT_AVATARTTL = 2 * 60 * 60 * 1000; // 2 hour\nconst DEFAULT_AVATARQUERYINTERVAL = 2 * 1000; // 2 seconds\n\n/**\n * @class\n * @description Contacts managing module\n */\nexport default class Contacts extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Client} params.client - client module instance\n   * @param {AddressBook} params.addressBook - addressBook module instance\n   * @param {AccountExtension} params.accountExtension - accountExtension module instance\n   * @param {AccountPhoneNumber} params.accountPhoneNumber - accountPhoneNumber module instance\n   * @param {Number} params.ttl - timestamp of local cache, default 30 mins\n   * @param {Number} params.avatarTtl - timestamp of avatar local cache, default 2 hour\n   * @param {Number} params.presenceTtl - timestamp of presence local cache, default 10 mins\n   * @param {Number} params.avatarQueryInterval - interval of query avatar, default 2 seconds\n   */\n  constructor({\n    client,\n    addressBook,\n    accountExtension,\n    accountPhoneNumber,\n    ttl = DEFAULT_TTL,\n    avatarTtl = DEFAULT_AVATARTTL,\n    presenceTtl = DEFAULT_PRESENCETTL,\n    avatarQueryInterval = DEFAULT_AVATARQUERYINTERVAL,\n    ...options,\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._addressBook = this::ensureExist(addressBook, 'addressBook');\n    this._accountExtension = this::ensureExist(accountExtension, 'accountExtension');\n    this._accountPhoneNumber = this::ensureExist(accountPhoneNumber, 'accountPhoneNumber');\n    this._client = this::ensureExist(client, 'client');\n    this._reducer = getContactsReducer(this.actionTypes);\n    this._ttl = ttl;\n    this._avatarTtl = avatarTtl;\n    this._presenceTtl = presenceTtl;\n    this._avatarQueryInterval = avatarQueryInterval;\n\n    this.addSelector(\n      'companyContacts',\n      () => this._accountExtension.availableExtensions,\n      () => this._accountPhoneNumber.extensionToPhoneNumberMap,\n      (extensions, extensionToPhoneNumberMap) => {\n        const newExtensions = [];\n        extensions.forEach((extension) => {\n          if (!(extension.status === 'Enabled' &&\n            ['DigitalUser', 'User'].indexOf(extension.type) >= 0)) {\n            return;\n          }\n          const contact = {\n            type: 'company',\n            id: extension.id,\n            firstName: extension.contact && extension.contact.firstName,\n            lastName: extension.contact && extension.contact.lastName,\n            email: extension.contact && extension.contact.email,\n            extensionNumber: extension.ext,\n            hasProfileImage: extension.hasProfileImage,\n            phoneNumbers: [],\n          };\n          if (isBlank(contact.extensionNumber)) {\n            return;\n          }\n          const phones = extensionToPhoneNumberMap[contact.extensionNumber];\n          if (phones && phones.length > 0) {\n            phones.forEach((phone) => {\n              addPhoneToContact(contact, phone.phoneNumber, 'directPhone');\n            });\n          }\n          newExtensions.push(contact);\n        });\n        return newExtensions;\n      }\n    );\n\n    this.addSelector(\n      'personalContacts',\n      () => this._addressBook.contacts,\n      (rawContacts) => {\n        const contacts = [];\n        rawContacts.forEach((rawContact) => {\n          const contact = {\n            type: 'personal',\n            phoneNumbers: [],\n            ...rawContact,\n          };\n          Object.keys(contact).forEach((key) => {\n            if (key.toLowerCase().indexOf('phone') === -1) {\n              return;\n            }\n            if (typeof contact[key] !== 'string') {\n              return;\n            }\n            addPhoneToContact(contact, contact[key], key);\n          });\n          contacts.push(contact);\n        });\n        return contacts;\n      }\n    );\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._addressBook.ready &&\n      this._accountExtension.ready &&\n      this._accountPhoneNumber.ready &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._addressBook.ready ||\n        !this._accountExtension.ready ||\n        !this._accountPhoneNumber.ready\n      ) &&\n      this.ready\n    );\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  matchPhoneNumber(phone) {\n    const result = [];\n    const phoneNumber = normalizeNumber({ phoneNumber: phone });\n    const matchContact = (contact) => {\n      let found = contact.extensionNumber && contact.extensionNumber === phoneNumber;\n      if (!found) {\n        contact.phoneNumbers.forEach((contactPhoneNumber) => {\n          if (!found && contactPhoneNumber.phoneNumber === phoneNumber) {\n            found = true;\n          }\n        });\n      }\n      if (!found) {\n        return;\n      }\n      const name =\n        `${\n        contact.firstName ? contact.firstName : ''\n        } ${\n        contact.lastName ? contact.lastName : ''\n        }`;\n      const matchedContact = {\n        ...contact,\n        phoneNumbers: [\n          ...contact.phoneNumbers\n        ],\n        entityType: 'rcContact',\n        name,\n      };\n      if (contact.extensionNumber) {\n        matchedContact.phoneNumbers.push({\n          phoneType: 'extension',\n          phoneNumber: contact.extensionNumber,\n        });\n      }\n      result.push(matchedContact);\n    };\n    this.companyContacts.forEach(matchContact);\n    this.personalContacts.forEach(matchContact);\n    return result;\n  }\n\n  matchContacts({ phoneNumbers }) {\n    const result = {};\n    phoneNumbers.forEach((phoneNumber) => {\n      result[phoneNumber] = this.matchPhoneNumber(phoneNumber);\n    });\n    return result;\n  }\n\n  findContactItem({ contactType, contactId }) {\n    const id = (contactId || '').toString();\n    switch (contactType) {\n      case 'company':\n        return this.companyContacts.find(x => x.id.toString() === id);\n      case 'personal':\n        return this.personalContacts.find(x => x.id.toString() === id);\n      default:\n        return null;\n    }\n  }\n\n  getImageProfile(contact, useCache = true) {\n    return new Promise((resolve) => {\n      if (!contact || !contact.id || contact.type !== 'company' || !contact.hasProfileImage) {\n        resolve(null);\n        return;\n      }\n\n      const imageId = `${contact.type}${contact.id}`;\n      if (\n        useCache &&\n        this.profileImages[imageId] &&\n        (Date.now() - this.profileImages[imageId].timestamp < this._avatarTtl)\n      ) {\n        const image = this.profileImages[imageId].imageUrl;\n        resolve(image);\n        return;\n      }\n\n      if (!this._getAvatarContexts) {\n        this._getAvatarContexts = [];\n      }\n      this._getAvatarContexts.push({\n        contact,\n        resolve,\n      });\n\n      if (!this._queryingAvatar) {\n        this._queryingAvatar = true;\n        this._processQueryAvatar(this._getAvatarContexts);\n      }\n    });\n  }\n\n  async _processQueryAvatar(getAvatarContexts) {\n    const ctx = getAvatarContexts[0];\n    const imageId = `${ctx.contact.type}${ctx.contact.id}`;\n    let imageUrl = null;\n    try {\n      const response = await this._client\n        .account()\n        .extension(ctx.contact.id)\n        .profileImage('195x195')\n        .get();\n      imageUrl = URL.createObjectURL(await response._response.blob());\n      this.store.dispatch({\n        type: this.actionTypes.fetchImageSuccess,\n        imageId,\n        imageUrl,\n        ttl: this._avatarTtl,\n      });\n    } catch (e) {\n      console.error(e);\n    }\n    ctx.resolve(imageUrl);\n    getAvatarContexts.splice(0, 1);\n    if (getAvatarContexts.length) {\n      await sleep(this._avatarQueryInterval);\n      this._processQueryAvatar(getAvatarContexts);\n    } else {\n      this._queryingAvatar = false;\n    }\n  }\n\n  getPresence(contact) {\n    return new Promise((resolve) => {\n      if (!contact || !contact.id || contact.type !== 'company') {\n        resolve(null);\n        return;\n      }\n\n      const presenceId = `${contact.type}${contact.id}`;\n      if (\n        this.contactPresences[presenceId] &&\n        (Date.now() - this.contactPresences[presenceId].timestamp < this._presenceTtl)\n      ) {\n        const presence = this.contactPresences[presenceId].presence;\n        resolve(presence);\n        return;\n      }\n\n      if (!this._getPresenceContexts) {\n        this._getPresenceContexts = [];\n      }\n      this._getPresenceContexts.push({\n        contact,\n        resolve,\n      });\n\n      clearTimeout(this.enqueueTimeoutId);\n      if (this._getPresenceContexts.length === MaximumBatchGetPresence) {\n        this._processQueryPresences(this._getPresenceContexts);\n        this._getPresenceContexts = null;\n      } else {\n        this.enqueueTimeoutId = setTimeout(() => {\n          this._processQueryPresences(this._getPresenceContexts);\n          this._getPresenceContexts = null;\n        }, 1000);\n      }\n    });\n  }\n\n  async _processQueryPresences(getPresenceContexts) {\n    const contacts = getPresenceContexts.map(x => x.contact);\n    const responses = await this._batchQueryPresences(contacts);\n    getPresenceContexts.forEach((ctx) => {\n      const response = responses[ctx.contact.id];\n      if (!response) {\n        ctx.resolve(null);\n        return;\n      }\n      const { dndStatus, presenceStatus, telephonyStatus, userStatus } = response;\n      const presence = {\n        dndStatus,\n        presenceStatus,\n        telephonyStatus,\n        userStatus,\n      };\n      const presenceId = `${ctx.contact.type}${ctx.contact.id}`;\n      this.store.dispatch({\n        type: this.actionTypes.fetchPresenceSuccess,\n        presenceId,\n        presence,\n        ttl: this._presenceTtl,\n      });\n      ctx.resolve(presence);\n    });\n  }\n\n  async _batchQueryPresences(contacts) {\n    const presenceSet = {};\n    try {\n      if (contacts.length === 1) {\n        const id = contacts[0].id;\n        const response = await this._client.account().extension(id).presence().get();\n        presenceSet[id] = response;\n      } else if (contacts.length > 1) {\n        const ids = contacts.map(x => x.id).join(',');\n        const multipartResponse = await batchGetApi({\n          platform: this._client.service.platform(),\n          url: `/account/~/extension/${ids}/presence?detailedTelephonyState=true&sipData=true`,\n        });\n        const responses = multipartResponse.map(x => x.json());\n        responses.forEach((item) => {\n          presenceSet[item.extension.id] = item;\n        });\n      }\n    } catch (e) {\n      console.error(e);\n    }\n    return presenceSet;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get companyContacts() {\n    return this._selectors.companyContacts();\n  }\n\n  get personalContacts() {\n    return this._selectors.personalContacts();\n  }\n\n  get profileImages() {\n    return this.state.profileImages;\n  }\n\n  get contactPresences() {\n    return this.state.contactPresences;\n  }\n}\n"]}