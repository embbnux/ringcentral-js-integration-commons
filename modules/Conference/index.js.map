{"version":3,"sources":["modules/Conference/index.js"],"names":["DEFAULT_MASK","Conference","auth","client","regionSettings","options","name","fetchFunction","account","extension","conferencing","get","_auth","_client","addSelector","countryCode","data","isoCode","countrys","phoneNumbers","find","value","country","phoneNumber","filter","_selectors","conferenceNumbers"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,eAAe,wEAArB;;IAEqBC,U;;;AACnB,4BAKK;AAAA;;AAAA,QAJAC,IAIA,QAJAA,IAIA;AAAA,QAHAC,MAGA,QAHAA,MAGA;AAAA,QAFAC,cAEA,QAFAA,cAEA;AAAA,QADGC,OACH;AAAA;;AAAA;AAEDC,YAAM,YAFL;AAGDH,oBAHC;AAIDI;AAAA,+EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACSJ,OAAOK,OAAP,GAAiBC,SAAjB,GAA6BC,YAA7B,GAA4CC,GAA5C,EADT;;AAAA;AAAA;AAAA,gCAC4DX,YAD5D;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAf;;AAAA;AAAA;AAAA;AAAA;AAJC,OAOEK,OAPF;;AASH,UAAKO,KAAL,GAAaV,IAAb;AACA,UAAKW,OAAL,GAAeV,MAAf;AACA,UAAKW,WAAL,CACG,mBADH,EAEG;AAAA,aAAMV,eAAeW,WAArB;AAAA,KAFH,EAGG;AAAA,aAAM,MAAKC,IAAX;AAAA,KAHH,EAIG,UAACC,OAAD,EAAUD,IAAV,EAAmB;AACjB,UAAI,CAACA,IAAL,EAAW;AACT,eAAOA,IAAP;AACD;AACD,UAAME,WAAWF,KAAKG,YAAL,CAAkBC,IAAlB,CAAuB;AAAA,eAASC,MAAMC,OAAN,CAAcL,OAAd,KAA0BA,OAAnC;AAAA,OAAvB,CAAjB;AACA,UAAI,OAAOC,QAAP,KAAoB,WAAxB,EAAqC;AACnC,eAAOF,IAAP;AACD;AACD,wCACKA,IADL;AAEEO,qBAAaL,SAASK,WAFxB;AAGEJ,sBAAcH,KAAKG,YAAL,CAAkBK,MAAlB,CAAyB;AAAA,iBACzBH,MAAME,WAAN,KAAsBL,SAASK,WADN;AAAA,SAAzB;AAHhB;AAMD,KAlBJ;AAXG;AA+BJ;;;;wBACuB;AACtB,aAAO,KAAKE,UAAL,CAAgBC,iBAAhB,EAAP;AACD;;;;;kBAxCkBzB,U","file":"index.js","sourcesContent":["import mask from 'json-mask';\nimport DataFetcher from '../../lib/DataFetcher';\n\nconst DEFAULT_MASK = 'phoneNumber,hostCode,participantCode,phoneNumbers(country,phoneNumber)';\n\nexport default class Conference extends DataFetcher {\n  constructor({\n       auth,\n       client,\n       regionSettings,\n       ...options,\n    }) {\n    super({\n      name: 'conference',\n      client,\n      fetchFunction: async () => mask(\n                        await client.account().extension().conferencing().get(), DEFAULT_MASK\n                     ),\n      ...options,\n    });\n    this._auth = auth;\n    this._client = client;\n    this.addSelector(\n       'conferenceNumbers',\n       () => regionSettings.countryCode,\n       () => this.data,\n       (isoCode, data) => {\n         if (!data) {\n           return data;\n         }\n         const countrys = data.phoneNumbers.find(value => value.country.isoCode === isoCode);\n         if (typeof countrys === 'undefined') {\n           return data;\n         }\n         return {\n           ...data,\n           phoneNumber: countrys.phoneNumber,\n           phoneNumbers: data.phoneNumbers.filter(value =>\n                         value.phoneNumber !== countrys.phoneNumber),\n         };\n       }\n    );\n  }\n  get conferenceNumbers() {\n    return this._selectors.conferenceNumbers();\n  }\n\n}\n"]}