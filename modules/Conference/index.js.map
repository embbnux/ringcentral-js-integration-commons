{"version":3,"sources":["modules/Conference/index.js"],"names":["DEFAULT_MASK","Conference","client","regionSettings","options","name","fetchFunction","account","extension","conferencing","get","addSelector","countryCode","data","isoCode","countrys","phoneNumbers","find","value","country","phoneNumber","filter","_selectors","conferenceNumbers"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,eAAe,wEAArB;;AAEA;;;;;IAIqBC,U;;;AACnB;;;;;;AAMA,4BAIG;AAAA;;AAAA,QAHDC,MAGC,QAHDA,MAGC;AAAA,QAFDC,cAEC,QAFDA,cAEC;AAAA,QADEC,OACF;AAAA;;AAAA;AAECC,YAAM,YAFP;AAGCH,oBAHD;AAICI;AAAA,+EAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBACPJ,OAAOK,OAAP,GAAiBC,SAAjB,GAA6BC,YAA7B,GAA4CC,GAA5C,EADO;;AAAA;AAAA;AAAA,gCAEbV,YAFa;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAf;;AAAA;AAAA;AAAA;AAAA;AAJD,OAQII,OARJ;;AAUD,UAAKO,WAAL,CACE,mBADF,EAEE;AAAA,aAAMR,eAAeS,WAArB;AAAA,KAFF,EAGE;AAAA,aAAM,MAAKC,IAAX;AAAA,KAHF,EAIE,UAACC,OAAD,EAAUD,IAAV,EAAmB;AACjB,UAAI,CAACA,IAAL,EAAW;AACT,eAAOA,IAAP;AACD;AACD,UAAME,WAAWF,KAAKG,YAAL,CAAkBC,IAAlB,CAAuB;AAAA,eAASC,MAAMC,OAAN,CAAcL,OAAd,KAA0BA,OAAnC;AAAA,OAAvB,CAAjB;AACA,UAAI,OAAOC,QAAP,KAAoB,WAAxB,EAAqC;AACnC,eAAOF,IAAP;AACD;AACD,wCACKA,IADL;AAEEO,qBAAaL,SAASK,WAFxB;AAGEJ,sBAAcH,KAAKG,YAAL,CAAkBK,MAAlB,CAAyB;AAAA,iBACrCH,MAAME,WAAN,KAAsBL,SAASK,WADM;AAAA,SAAzB;AAHhB;AAMD,KAlBH;AAVC;AA8BF;;;;wBAEuB;AACtB,aAAO,KAAKE,UAAL,CAAgBC,iBAAhB,EAAP;AACD;;;;;kBA7CkBtB,U","file":"index.js","sourcesContent":["import mask from 'json-mask';\nimport DataFetcher from '../../lib/DataFetcher';\n\nconst DEFAULT_MASK = 'phoneNumber,hostCode,participantCode,phoneNumbers(country,phoneNumber)';\n\n/**\n * @class\n * @description Conference managing module\n */\nexport default class Conference extends DataFetcher {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {RegionSettings} params.regionSettings - regionSettings module instance\n   * @param {Client} params.client - client module instance\n   */\n  constructor({\n    client,\n    regionSettings,\n    ...options\n  }) {\n    super({\n      name: 'conference',\n      client,\n      fetchFunction: async () => mask(\n        await client.account().extension().conferencing().get(),\n        DEFAULT_MASK,\n      ),\n      ...options,\n    });\n    this.addSelector(\n      'conferenceNumbers',\n      () => regionSettings.countryCode,\n      () => this.data,\n      (isoCode, data) => {\n        if (!data) {\n          return data;\n        }\n        const countrys = data.phoneNumbers.find(value => value.country.isoCode === isoCode);\n        if (typeof countrys === 'undefined') {\n          return data;\n        }\n        return {\n          ...data,\n          phoneNumber: countrys.phoneNumber,\n          phoneNumbers: data.phoneNumbers.filter(value =>\n            value.phoneNumber !== countrys.phoneNumber),\n        };\n      }\n    );\n  }\n\n  get conferenceNumbers() {\n    return this._selectors.conferenceNumbers();\n  }\n}\n"]}