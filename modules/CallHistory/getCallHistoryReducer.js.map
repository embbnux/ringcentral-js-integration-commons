{"version":3,"sources":["modules/CallHistory/getCallHistoryReducer.js"],"names":["getCallHistoryReducer","getEndedCallsReducer","types","state","type","endedCalls","timestamp","addEndedCalls","newState","slice","forEach","call","callWithDuration","duration","Math","floor","startTime","idx","findIndex","item","sessionId","push","removeEndedCalls","filter","find","shouldRemove","resetSuccess","status"],"mappings":";;;;;;;;;;kBAsCwBA,qB;;AAtCxB;;AACA;;;;AACA;;;;;;AAEA,SAASC,oBAAT,CAA8BC,KAA9B,EAAqC;AACnC,SAAO,YAAiD;AAAA,QAAhDC,KAAgD,uEAAxC,EAAwC;AAAA;AAAA,QAAlCC,IAAkC,QAAlCA,IAAkC;AAAA,QAA5BC,UAA4B,QAA5BA,UAA4B;AAAA,QAAhBC,SAAgB,QAAhBA,SAAgB;;AACtD,YAAQF,IAAR;AACE,WAAKF,MAAMK,aAAX;AAA0B;AACxB,cAAMC,WAAWL,MAAMM,KAAN,EAAjB;AACA,0BAAEC,OAAF,CAAU,UAACC,IAAD,EAAU;AAClB,gBAAMC,8CACDD,IADC;AAEJE,wBAAUC,KAAKC,KAAL,CAAW,CAACT,YAAYK,KAAKK,SAAlB,IAA+B,IAA1C;AAFN,cAAN;AAIA,gBAAMC,MAAM,gBAAEC,SAAF,CAAY;AAAA,qBAAQC,KAAKC,SAAL,KAAmBT,KAAKS,SAAhC;AAAA,aAAZ,EAAuDZ,QAAvD,CAAZ;AACA,gBAAIS,MAAM,CAAC,CAAX,EAAc;AACZ;AACAT,uBAASS,GAAT,IAAgBL,gBAAhB;AACD,aAHD,MAGO;AACLJ,uBAASa,IAAT,CAAcT,gBAAd;AACD;AACF,WAZD,EAYGP,UAZH;AAaA,iBAAOG,QAAP;AACD;AACD,WAAKN,MAAMoB,gBAAX;AACE,eAAOnB,MAAMoB,MAAN,CAAa;AAAA,iBAClB,CAAClB,WAAWmB,IAAX,CAAgB;AAAA,mBAAgBC,aAAaL,SAAb,KAA2BT,KAAKS,SAAhD;AAAA,WAAhB,CADiB;AAAA,SAAb,CAAP;AAGF,WAAKlB,MAAMwB,YAAX;AACE,eAAO,EAAP;AACF;AACE,eAAOvB,KAAP;AAzBJ;AA2BD,GA5BD;AA6BD;;AAGD;AACe,SAASH,qBAAT,CAA+BE,KAA/B,EAAsC;AACnD,SAAO,4BAAgB;AACrByB,YAAQ,sCAAuBzB,KAAvB,CADa;AAErBG,gBAAYJ,qBAAqBC,KAArB;AAFS,GAAhB,CAAP;AAID","file":"getCallHistoryReducer.js","sourcesContent":["import { combineReducers } from 'redux';\nimport r from 'ramda';\nimport getModuleStatusReducer from '../../lib/getModuleStatusReducer';\n\nfunction getEndedCallsReducer(types) {\n  return (state = [], { type, endedCalls, timestamp }) => {\n    switch (type) {\n      case types.addEndedCalls: {\n        const newState = state.slice();\n        r.forEach((call) => {\n          const callWithDuration = {\n            ...call,\n            duration: Math.floor((timestamp - call.startTime) / 1000),\n          };\n          const idx = r.findIndex(item => item.sessionId === call.sessionId, newState);\n          if (idx > -1) {\n            // replace old one if found\n            newState[idx] = callWithDuration;\n          } else {\n            newState.push(callWithDuration);\n          }\n        }, endedCalls);\n        return newState;\n      }\n      case types.removeEndedCalls:\n        return state.filter(call => (\n          !endedCalls.find(shouldRemove => shouldRemove.sessionId === call.sessionId)\n        ));\n      case types.resetSuccess:\n        return [];\n      default:\n        return state;\n    }\n  };\n}\n\n\n/* istanbul ignore next: unnecessary to test getModuleStatusReducer */\nexport default function getCallHistoryReducer(types) {\n  return combineReducers({\n    status: getModuleStatusReducer(types),\n    endedCalls: getEndedCallsReducer(types),\n  });\n}\n"]}