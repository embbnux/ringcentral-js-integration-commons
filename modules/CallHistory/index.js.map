{"version":3,"sources":["modules/CallHistory/index.js"],"names":["CallHistory","accountInfo","callLog","callMonitor","activityMatcher","contactMatcher","options","actionTypes","_onStateChange","_callLog","ready","_callMonitor","_accountInfo","_contactMatcher","_activityMatcher","pending","store","dispatch","type","init","initSuccess","reset","_lastProcessedCalls","_lastProcessedIds","_lastProcessedMonitorCalls","_lastProcessedNumbers","resetSuccess","uniqueNumbers","_selectors","triggerMatch","sessionIds","monitorCalls","calls","endedCalls","filter","find","call","sessionId","currentCall","length","addEndedCalls","timestamp","Date","now","currentCalls","ids","forEach","shouldRemove","state","removeEndedCalls","_reducer","addSelector","countryCode","map","callFrom","from","phoneNumber","callTo","to","normalizedCalls","cache","contactCache","activityCache","fromNumber","extensionNumber","toNumber","fromMatches","dataMap","toMatches","activityMatches","concat","sort","output","numberMap","addIfNotExist","number","push","addNumbersFromCall","addQuerySource","getQueriesFn","readyCheckFn","subscribe","status"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport {\n  sortByStartTime,\n} from '../../lib/callLogHelpers';\nimport actionTypes from './actionTypes';\nimport getCallHistoryReducer from './getCallHistoryReducer';\nimport ensureExist from '../../lib/ensureExist';\nimport normalizeNumber from '../../lib/normalizeNumber';\n\nexport default class CallHistory extends RcModule {\n  constructor({\n    accountInfo,\n    callLog,\n    callMonitor,\n    activityMatcher,\n    contactMatcher,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._accountInfo = this::ensureExist(accountInfo, 'accountInfo');\n    this._callLog = this::ensureExist(callLog, 'callLog');\n    this._activityMatcher = activityMatcher;\n    this._contactMatcher = contactMatcher;\n    this._callMonitor = callMonitor;\n    this._reducer = getCallHistoryReducer(this.actionTypes);\n\n    this.addSelector('normalizedCalls',\n      () => this._callLog.calls,\n      () => this._accountInfo.countryCode,\n      (calls, countryCode) => (\n        calls.map((call) => {\n          const callFrom = {\n            ...call.from,\n          };\n          if (callFrom.phoneNumber) {\n            callFrom.phoneNumber = normalizeNumber({\n              phoneNumber: callFrom.phoneNumber,\n              countryCode,\n            });\n          }\n          const callTo = {\n            ...call.to,\n          };\n          if (callTo.phoneNumber) {\n            callTo.phoneNumber = normalizeNumber({\n              phoneNumber: callTo.phoneNumber,\n              countryCode,\n            });\n          }\n          return {\n            ...call,\n            from: callFrom,\n            to: callTo,\n          };\n        })\n      ),\n    );\n\n    this.addSelector('calls',\n      this._selectors.normalizedCalls,\n      () => this.state.endedCalls,\n      () => (this._contactMatcher && this._contactMatcher.ready ?\n        this._contactMatcher.cache :\n        null),\n      () => (this._activityMatcher && this._activityMatcher.ready ?\n        this._activityMatcher.cache :\n        null),\n      (normalizedCalls, endedCalls, contactCache, activityCache) => {\n        const sessionIds = {};\n        return normalizedCalls.map((call) => {\n          sessionIds[call.sessionId] = true;\n          const fromNumber = call.from && (call.from.phoneNumber || call.from.extensionNumber);\n          const toNumber = call.to && (call.to.phoneNumber || call.to.extensionNumber);\n          return {\n            ...call,\n            fromMatches: (fromNumber && contactCache && contactCache.dataMap[fromNumber]) || [],\n            toMatches: (toNumber && contactCache && contactCache.dataMap[toNumber]) || [],\n            activityMatches: (activityCache && activityCache.dataMap[call.sessionId]) || [],\n          };\n        }).concat(endedCalls.filter(call => !sessionIds[call.sessionId]))\n          .sort(sortByStartTime);\n      },\n    );\n\n    this.addSelector('uniqueNumbers',\n      this._selectors.normalizedCalls,\n      () => this.state.endedCalls,\n      (normalizedCalls, endedCalls) => {\n        const output = [];\n        const numberMap = {};\n        function addIfNotExist(number) {\n          if (!numberMap[number]) {\n            output.push(number);\n            numberMap[number] = true;\n          }\n        }\n        function addNumbersFromCall(call) {\n          if (call.from && call.from.phoneNumber) {\n            addIfNotExist(call.from.phoneNumber);\n          } else if (call.from && call.from.extensionNumber) {\n            addIfNotExist(call.from.extensionNumber);\n          }\n          if (call.to && call.to.phoneNumber) {\n            addIfNotExist(call.to.phoneNumber);\n          } else if (call.to && call.to.extensionNumber) {\n            addIfNotExist(call.to.extensionNumber);\n          }\n        }\n        normalizedCalls.forEach(addNumbersFromCall);\n        endedCalls.forEach(addNumbersFromCall);\n        return output;\n      },\n    );\n\n    if (this._contactMatcher) {\n      this._contactMatcher.addQuerySource({\n        getQueriesFn: this._selectors.uniqueNumbers,\n        readyCheckFn: () => (\n          (!this._callMonitor || this._callMonitor.ready) &&\n          this._callLog.ready &&\n          this._accountInfo.ready\n        ),\n      });\n    }\n\n    this.addSelector('sessionIds',\n      () => this._callLog.calls,\n      () => this.state.endedCalls,\n      (calls, endedCalls) => {\n        const sessionIds = {};\n        return calls.map((call) => {\n          sessionIds[call.sessionId] = true;\n          return call.sessionId;\n        }).concat(\n          endedCalls\n            .filter(call => !sessionIds[call.sessionId])\n            .map(call => call.sessionId)\n          );\n      },\n    );\n\n    if (this._activityMatcher) {\n      this._activityMatcher.addQuerySource({\n        getQueriesFn: this._selectors.sessionIds,\n        readyCheckFn: () => (\n          (!this._callMonitor || this._callMonitor.ready) &&\n          this._callLog.ready\n        ),\n      });\n    }\n  }\n  _onStateChange = async () => {\n    if (\n      this._callLog.ready &&\n      (!this._callMonitor || this._callMonitor.ready) &&\n      this._accountInfo.ready &&\n      (!this._contactMatcher || this._contactMatcher.ready) &&\n      (!this._activityMatcher || this._activityMatcher.ready) &&\n      this.pending\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (\n      (\n        !this._callLog.ready ||\n        (this._callMonitor && !this._callMonitor.ready) ||\n        !this._accountInfo.ready ||\n        (this._contactMatcher && !this._contactMatcher.ready) ||\n        (this._activityMatcher && !this._activityMatcher.ready)\n      ) &&\n      this.ready\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.reset,\n      });\n      this._lastProcessedCalls = null;\n      this._lastProcessedIds = null;\n      this._lastProcessedMonitorCalls = null;\n      this._lastProcessedNumbers = null;\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    } else if (\n      this.ready\n    ) {\n      const uniqueNumbers = this._selectors.uniqueNumbers();\n      if (this._lastProcessedNumbers !== uniqueNumbers) {\n        this._lastProcessedNumbers = uniqueNumbers;\n        if (this._contactMatcher && this._contactMatcher.ready) {\n          this._contactMatcher.triggerMatch();\n        }\n      }\n      const sessionIds = this._selectors.sessionIds();\n      if (this._lastProcessedIds !== sessionIds) {\n        this._lastProcessedIds = sessionIds;\n        if (this._activityMatcher && this._activityMatcher.ready) {\n          this._activityMatcher.triggerMatch();\n        }\n      }\n      if (this._callMonitor) {\n        const monitorCalls = this._callMonitor.calls;\n        if (this._lastProcessedMonitorCalls !== monitorCalls) {\n          const endedCalls = (this._lastProcessedMonitorCalls || [])\n            .filter(call => (\n              !monitorCalls.find(currentCall => call.sessionId === currentCall.sessionId)\n            ));\n          this._lastProcessedMonitorCalls = monitorCalls;\n          if (endedCalls.length) {\n            this.store.dispatch({\n              type: this.actionTypes.addEndedCalls,\n              endedCalls,\n              timestamp: Date.now(),\n            });\n          }\n        }\n      }\n      const currentCalls = this._callLog.calls;\n      if (currentCalls !== this._lastProcessedCalls) {\n        this._lastProcessedCalls = currentCalls;\n        const ids = {};\n        currentCalls.forEach((call) => {\n          ids[call.sessionId] = true;\n        });\n        const shouldRemove = this.state.endedCalls.filter(call => ids[call.sessionId]);\n        if (shouldRemove.length) {\n          this.store.dispatch({\n            type: this.actionTypes.removeEndedCalls,\n            endedCalls: shouldRemove,\n          });\n        }\n      }\n    }\n  }\n  initialize() {\n    this.store.subscribe(this._onStateChange);\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get pending() {\n    return this.state.status === moduleStatuses.pending;\n  }\n\n  get calls() {\n    return this._selectors.calls();\n  }\n}\n"]}