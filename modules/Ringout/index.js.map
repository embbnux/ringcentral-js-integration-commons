{"version":3,"sources":["modules/Ringout/index.js"],"names":["DEFAULT_MONITOR_INTERVAL","DEFAULT_TIME_BETWEEN_CALLS","Ringout","auth","client","monitorInterval","timeBetweenCalls","options","actionTypes","_auth","_client","_reducer","_monitorInterval","_timeBetweenCalls","store","subscribe","loggedIn","ready","dispatch","type","initSuccess","resetSuccess","fromNumber","toNumber","prompt","status","startToConnect","account","extension","ringout","post","from","phoneNumber","to","playPrompt","resp","startTime","Date","now","_monitorRingout","id","connectSuccess","connectError","message","pollingCancelled","ringoutId","_fetchRingoutStatus","callerStatus","Error","firstLegConnectFailed","get","exception","pollingFailed","error","state","ringoutStatus"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport actionTypes from './actionTypes';\nimport getRingoutReducer from './getRingoutReducer';\nimport ringoutErrors from './ringoutErrors';\nimport sleep from '../../lib/sleep';\nimport proxify from '../../lib/proxy/proxify';\n\nconst DEFAULT_MONITOR_INTERVAL = 2500;\nconst DEFAULT_TIME_BETWEEN_CALLS = 10000;\n\nexport default class Ringout extends RcModule {\n  constructor({\n    auth,\n    client,\n    monitorInterval = DEFAULT_MONITOR_INTERVAL,\n    timeBetweenCalls = DEFAULT_TIME_BETWEEN_CALLS,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes\n    });\n    this._auth = auth;\n    this._client = client;\n    this._reducer = getRingoutReducer(this.actionTypes);\n    this._monitorInterval = monitorInterval;\n    this._timeBetweenCalls = timeBetweenCalls;\n  }\n\n  initialize() {\n    this.store.subscribe(() => {\n      if (this._auth.loggedIn && !this.ready) {\n        this.store.dispatch({\n          type: this.actionTypes.initSuccess\n        });\n      } else if (!this._auth.loggedIn && this.ready) {\n        this.store.dispatch({\n          type: this.actionTypes.resetSuccess\n        });\n      }\n    });\n  }\n  @proxify\n  async makeCall({ fromNumber, toNumber, prompt }) {\n    if (this.status === moduleStatuses.ready) {\n      this.store.dispatch({\n        type: this.actionTypes.startToConnect\n      });\n      try {\n        const resp = await this._client.account().extension().ringout().post({\n          from: { phoneNumber: fromNumber },\n          to: { phoneNumber: toNumber },\n          playPrompt: prompt\n        });\n        const startTime = Date.now();\n        await this._monitorRingout(resp.id, startTime);\n        this.store.dispatch({\n          type: this.actionTypes.connectSuccess\n        });\n      } catch (e) {\n        this.store.dispatch({\n          type: this.actionTypes.connectError\n        });\n        if (e.message !== ringoutErrors.pollingCancelled) {\n          throw e;\n        }\n      }\n    } else {\n      // TODO: Need to dispatch a generic error action\n    }\n  }\n\n  @proxify\n  async _monitorRingout(ringoutId, startTime) {\n    let callerStatus = await this._fetchRingoutStatus(ringoutId);\n    while (callerStatus === 'InProgress') {\n      if (Date.now() - startTime > this._timeBetweenCalls) {\n        throw new Error(ringoutErrors.pollingCancelled);\n      }\n      await sleep(this._monitorInterval);\n      callerStatus = await this._fetchRingoutStatus(ringoutId);\n    }\n    if (callerStatus !== 'Success' && callerStatus !== 'NoAnswer') {\n      throw new Error(ringoutErrors.firstLegConnectFailed);\n    }\n  }\n\n  @proxify\n  async _fetchRingoutStatus(ringoutId) {\n    try {\n      const resp = await this._client.account().extension().ringout(ringoutId).get();\n      return resp.status.callerStatus;\n    } catch (e) {\n      const exception = new Error(ringoutErrors.pollingFailed);\n      exception.error = e;\n      throw exception;\n    }\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ringoutStatus() {\n    return this.state.ringoutStatus;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n}\n"]}