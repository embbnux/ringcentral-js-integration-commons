{"version":3,"sources":["modules/DateTimeIntl/browserDateTimeIntlProvider.js"],"names":["intlOptions","time","hour","minute","hour12","date","year","month","day","dateTime","BrowserDateTimeIntlProvider","locale","_locale","_formatters","currentLocale","settings","utcString","type","Date","_getFormatter","format","now","isToday","getFullYear","getMonth","getDate","options","key","formatter","Intl","DateTimeFormat","ready"],"mappings":";;;;;;;;;;;;;;;;;;;;;AACA,IAAMA,cAAc;AAClBC,QAAM;AACJC,UAAM,SADF;AAEJC,YAAQ,SAFJ;AAGJ;AACAC,YAAQ;AAJJ,GADY;AAOlBC,QAAM;AACJC,UAAM,SADF;AAEJC,WAAO,SAFH;AAGJC,SAAK;AAHD,GAPY;AAYlBC,YAAU;AACRH,UAAM,SADE;AAERC,WAAO,SAFC;AAGRC,SAAK,SAHG;AAIRN,UAAM,SAJE;AAKRC,YAAQ,SALA;AAMR;AACAC,YAAQ;AAPA;AAZQ,CAApB;;IAuBqBM,2B;AACnB,6CAEG;AAAA,QADDC,MACC,QADDA,MACC;AAAA;;AACD,SAAKC,OAAL,GAAeD,MAAf;AACA,SAAKE,WAAL,GAAmB,EAAnB;AACD;;;;kCAMa;AACZ,UAAMC,gBAAgB,KAAKF,OAAL,CAAaE,aAAnC;AACA,aAAO;AACLA;AADK,OAAP;AAGD;;;0CAE6C;AAAA,UAA7BC,QAA6B,SAA7BA,QAA6B;AAAA,UAAnBC,SAAmB,SAAnBA,SAAmB;AAAA,UAARC,IAAQ,SAARA,IAAQ;;AAC5C,UAAMZ,OAAO,IAAIa,IAAJ,CAASF,SAAT,CAAb;AACA,UAAML,SAAUI,YAAYA,SAASD,aAAtB,IAAwC,OAAvD;;AAEA,cAAQG,IAAR;AACE,aAAK,MAAL;AAAa;AACX,mBAAO,KAAKE,aAAL,CAAmBR,MAAnB,EAA2BX,YAAYS,QAAvC,EAAiDW,MAAjD,CAAwDf,IAAxD,CAAP;AACD;;AAED,aAAK,MAAL;AAAa;AACX,mBAAO,KAAKc,aAAL,CAAmBR,MAAnB,EAA2BX,YAAYK,IAAvC,EAA6Ce,MAA7C,CAAoDf,IAApD,CAAP;AACD;;AAED,aAAK,MAAL;AAAa;AACX,mBAAO,KAAKc,aAAL,CAAmBR,MAAnB,EAA2BX,YAAYC,IAAvC,EAA6CmB,MAA7C,CAAoDf,IAApD,CAAP;AACD;;AAED;AAAS;AACP,gBAAMgB,MAAM,IAAIH,IAAJ,EAAZ;AACA,gBAAMI,UACJD,IAAIE,WAAJ,OAAsBlB,KAAKkB,WAAL,EAAtB,IACAF,IAAIG,QAAJ,OAAmBnB,KAAKmB,QAAL,EADnB,IAEAH,IAAII,OAAJ,OAAkBpB,KAAKoB,OAAL,EAHpB;AAKA,mBAAQH,UACN,KAAKH,aAAL,CAAmBR,MAAnB,EAA2BX,YAAYC,IAAvC,EAA6CmB,MAA7C,CAAoDf,IAApD,CADM,GAEN,KAAKc,aAAL,CAAmBR,MAAnB,EAA2BX,YAAYK,IAAvC,EAA6Ce,MAA7C,CAAoDf,IAApD,CAFF;AAID;;AAxBH;AA2BD;;;kCAEaM,M,EAAQe,O,EAAS;AAC7B,UAAMC,MAAM,yBAAe,CAAChB,MAAD,EAASe,OAAT,CAAf,CAAZ;AACA,UAAIE,YAAY,KAAKf,WAAL,CAAiBc,GAAjB,CAAhB;AACA,UAAI,CAACC,SAAL,EAAgB;AACdA,oBAAY,KAAKf,WAAL,CAAiBc,GAAjB,IACV,IAAIE,KAAKC,cAAT,CAAwBnB,MAAxB,EAAgCe,OAAhC,CADF;AAED;AACD,aAAOE,SAAP;AACD;;;wBApDW;AACV,aAAO,KAAKhB,OAAL,CAAamB,KAApB;AACD;;;;;kBAVkBrB,2B","file":"browserDateTimeIntlProvider.js","sourcesContent":["\nconst intlOptions = {\n  time: {\n    hour: 'numeric',\n    minute: 'numeric',\n    // second: 'numeric',\n    hour12: false,\n  },\n  date: {\n    year: 'numeric',\n    month: 'numeric',\n    day: 'numeric',\n  },\n  dateTime: {\n    year: 'numeric',\n    month: 'numeric',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    // second: 'numeric',\n    hour12: false,\n  }\n};\n\nexport default class BrowserDateTimeIntlProvider {\n  constructor({\n    locale,\n  }) {\n    this._locale = locale;\n    this._formatters = {};\n  }\n\n  get ready() {\n    return this._locale.ready;\n  }\n\n  getSettings() {\n    const currentLocale = this._locale.currentLocale;\n    return {\n      currentLocale,\n    };\n  }\n\n  formatDateTime({ settings, utcString, type }) {\n    const date = new Date(utcString);\n    const locale = (settings && settings.currentLocale) || 'en-US';\n\n    switch (type) {\n      case 'long': {\n        return this._getFormatter(locale, intlOptions.dateTime).format(date);\n      }\n\n      case 'date': {\n        return this._getFormatter(locale, intlOptions.date).format(date);\n      }\n\n      case 'time': {\n        return this._getFormatter(locale, intlOptions.time).format(date);\n      }\n\n      default: {\n        const now = new Date();\n        const isToday = (\n          now.getFullYear() === date.getFullYear() &&\n          now.getMonth() === date.getMonth() &&\n          now.getDate() === date.getDate()\n        );\n        return (isToday ?\n          this._getFormatter(locale, intlOptions.time).format(date) :\n          this._getFormatter(locale, intlOptions.date).format(date)\n        );\n      }\n\n    }\n  }\n\n  _getFormatter(locale, options) {\n    const key = JSON.stringify([locale, options]);\n    let formatter = this._formatters[key];\n    if (!formatter) {\n      formatter = this._formatters[key] =\n        new Intl.DateTimeFormat(locale, options);\n    }\n    return formatter;\n  }\n}\n"]}