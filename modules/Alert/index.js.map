{"version":3,"sources":["modules/Alert/index.js"],"names":["Alert","ttl","options","actionTypes","_autoDismiss","now","Date","ids","state","messages","filter","item","timestamp","map","id","length","dismiss","_reducer","_ttl","message","payload","level","info","allowDuplicates","store","dispatch","type","alert","v4","setTimeout","danger","warning","success","concat","dismissAll","ready"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;;;IAIqBA,K;;;AACnB;;;;AAIA,uBAGG;AAAA,wBAFDC,GAEC;AAAA,QAFDA,GAEC,4BAFK,IAEL;AAAA,QADEC,OACF;AAAA;;AAAA,+JAEIA,OAFJ;AAGCC;AAHD;;AAAA,UA2BHC,YA3BG,GA2BY,YAAM;AACnB,UAAMC,MAAMC,KAAKD,GAAL,EAAZ;AACA,UAAME,MAAM,MAAKC,KAAL,CAAWC,QAAX,CACTC,MADS,CACF;AAAA,eAAQC,KAAKV,GAAL,GAAW,CAAX,IAAgBI,MAAMM,KAAKC,SAAX,GAAuBD,KAAKV,GAApD;AAAA,OADE,EAETY,GAFS,CAEL;AAAA,eAAQF,KAAKG,EAAb;AAAA,OAFK,CAAZ;AAGA,UAAIP,IAAIQ,MAAR,EAAgB;AACd,cAAKC,OAAL,CAAaT,GAAb;AACD;AACF,KAnCE;;AAKD,UAAKU,QAAL,GAAgB,+BAAgB,MAAKd,WAArB,CAAhB;AACA,UAAKe,IAAL,GAAYjB,GAAZ;AANC;AAOF;;AAED;AACA;;;;;;;AA2BA;;;;;;;;iCAcG;AAAA,UALDkB,OAKC,SALDA,OAKC;AAAA,UAJDC,OAIC,SAJDA,OAIC;AAAA,8BAHDC,KAGC;AAAA,UAHDA,KAGC,+BAHO,sBAAYC,IAGnB;AAAA,4BAFDrB,GAEC;AAAA,UAFDA,GAEC,6BAFK,KAAKiB,IAEV;AAAA,wCADDK,eACC;AAAA,UADDA,eACC,yCADiB,IACjB;;AACD,WAAKC,KAAL,CAAWC,QAAX,CAAoB;AAClBC,cAAM,KAAKvB,WAAL,CAAiBwB,KADL;AAElBR,wBAFkB;AAGlBC,wBAHkB;AAIlBC,oBAJkB;AAKlBpB,gBALkB;AAMlBsB,wCANkB;AAOlBT,YAAI,eAAKc,EAAL,EAPc;AAQlBhB,mBAAWN,KAAKD,GAAL;AARO,OAApB;AAUA,UAAIJ,MAAM,CAAV,EAAa;AACX4B,mBAAW,KAAKzB,YAAhB,EAA8BH,MAAM,EAApC;AACD;AACF;AACD;;;;;;;;;;2BAOOC,O,EAAS;AACd,WAAKyB,KAAL,4BACKzB,OADL;AAEEmB,eAAO,sBAAYS;AAFrB;AAID;AACD;;;;;;;;;;4BAOQ5B,O,EAAS;AACf,WAAKyB,KAAL,4BACKzB,OADL;AAEEmB,eAAO,sBAAYU;AAFrB;AAID;AACD;;;;;;;;;;yBAOK7B,O,EAAS;AACZ,WAAKyB,KAAL,4BACKzB,OADL;AAEEmB,eAAO,sBAAYC;AAFrB;AAID;AACD;;;;;;;;;;4BAOQpB,O,EAAS;AACf,WAAKyB,KAAL,4BACKzB,OADL;AAEEmB,eAAO,sBAAYW;AAFrB;AAID;AACD;;;;;;;;4BAKQzB,G,EAAK;AACX,WAAKiB,KAAL,CAAWC,QAAX,CAAoB;AAClBC,cAAM,KAAKvB,WAAL,CAAiBa,OADL;AAElBT,aAAK,GAAG0B,MAAH,CAAU1B,GAAV;AAFa,OAApB;AAID;AACD;;;;;;;iCAIa;AACX,WAAKiB,KAAL,CAAWC,QAAX,CAAoB;AAClBC,cAAM,KAAKvB,WAAL,CAAiB+B;AADL,OAApB;AAGD;;;wBA9HY;AACX,aAAO,uBAAaC,KAApB;AACD;AACD;;;;wBACY;AACV,aAAO,IAAP;AACD;;;wBAEc;AACb,aAAO,KAAK3B,KAAL,CAAWC,QAAlB;AACD;;AAED;;;;;;;;;kBA/BmBT,K","file":"index.js","sourcesContent":["import uuid from 'uuid';\nimport RcModule from '../../lib/RcModule';\nimport moduleStatus from '../../enums/moduleStatus';\nimport actionTypes from './actionTypes';\nimport alertLevels from './alertLevels';\nimport getAlertReducer from './getAlertReducer';\n\n/**\n * @class\n * @description Alert messages managing module.\n */\nexport default class Alert extends RcModule {\n  /**\n   * @constructor\n   * @param {Number} ttl - Default time-to-live for alert messages.\n   */\n  constructor({\n    ttl = 5000,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._reducer = getAlertReducer(this.actionTypes);\n    this._ttl = ttl;\n  }\n\n  // this module has no dependency, and is always ready\n  // eslint-disable-next-line class-methods-use-this\n  get status() {\n    return moduleStatus.ready;\n  }\n  // eslint-disable-next-line class-methods-use-this\n  get ready() {\n    return true;\n  }\n\n  get messages() {\n    return this.state.messages;\n  }\n\n  /**\n   * @function\n   * @description Scans the messages for expired ones and dismiss them.\n   */\n  _autoDismiss = () => {\n    const now = Date.now();\n    const ids = this.state.messages\n      .filter(item => item.ttl > 0 && now - item.timestamp > item.ttl)\n      .map(item => item.id);\n    if (ids.length) {\n      this.dismiss(ids);\n    }\n  }\n\n  /**\n   * @function\n   * @description Add alert message to the state.\n   * @param {String} options.message\n   * @param {Any} options.payload\n   * @param {alertLevels} options.level\n   * @param {Number} options.ttl - optional, set ttl to 0 to disable auto dismiss\n   */\n  alert({\n    message,\n    payload,\n    level = alertLevels.info,\n    ttl = this._ttl,\n    allowDuplicates = true,\n  }) {\n    this.store.dispatch({\n      type: this.actionTypes.alert,\n      message,\n      payload,\n      level,\n      ttl,\n      allowDuplicates,\n      id: uuid.v4(),\n      timestamp: Date.now(),\n    });\n    if (ttl > 0) {\n      setTimeout(this._autoDismiss, ttl + 10);\n    }\n  }\n  /**\n   * @function\n   * @description Add alert message of alertLevel \"danger\" to the state.\n   * @param {String} options.message\n   * @param {Any} options.payload\n   * @param {Number} options.ttl - optional, set ttl to 0 to disable auto dismiss\n   */\n  danger(options) {\n    this.alert({\n      ...options,\n      level: alertLevels.danger,\n    });\n  }\n  /**\n   * @function\n   * @description Add alert message of alertLevel \"warning\" to the state.\n   * @param {String} options.message\n   * @param {Any} options.payload\n   * @param {Number} options.ttl - optional, set ttl to 0 to disable auto dismiss\n   */\n  warning(options) {\n    this.alert({\n      ...options,\n      level: alertLevels.warning,\n    });\n  }\n  /**\n   * @function\n   * @description Add alert message of alertLevel \"info\" to the state.\n   * @param {String} options.message\n   * @param {Any} options.payload\n   * @param {Number} options.ttl - optional, set ttl to 0 to disable auto dismiss\n   */\n  info(options) {\n    this.alert({\n      ...options,\n      level: alertLevels.info,\n    });\n  }\n  /**\n   * @function\n   * @description Add alert message of alertLevel \"success\" to the state.\n   * @param {String} options.message\n   * @param {Any} options.payload\n   * @param {Number} options.ttl - optional, set ttl to 0 to disable auto dismiss\n   */\n  success(options) {\n    this.alert({\n      ...options,\n      level: alertLevels.success,\n    });\n  }\n  /**\n   * @function\n   * @description Dismiss the message from the state.\n   * @param {Array<String>|String} ids - The id, or array of ids to be dismissed.\n   */\n  dismiss(ids) {\n    this.store.dispatch({\n      type: this.actionTypes.dismiss,\n      ids: [].concat(ids),\n    });\n  }\n  /**\n   * @function\n   * @description Dismiss all messages.\n   */\n  dismissAll() {\n    this.store.dispatch({\n      type: this.actionTypes.dismissAll,\n    });\n  }\n}\n"]}