{"version":3,"sources":["modules/Conversation/index.js"],"names":["Conversation","messageSender","extensionInfo","messageStore","options","actionTypes","_reducer","_messageSender","_extensionInfo","_messageStore","_promise","replyToReceivers","bind","changeDefaultRecipient","store","subscribe","_onStateChange","_shouldInit","_initModuleStatus","_shouldReset","_resetModuleStatus","_shouldReloadConversation","newConversation","findConversationById","id","_loadConversation","readMessages","ready","messageStoreUpdatedAt","conversationsTimestamp","dispatch","type","initSuccess","resetSuccess","conversation","unload","phoneNumber","recipients","length","slice","defaultNumberIndex","findIndex","number","extensionNumber","defaultNumber","splice","newRecipients","concat","_updateConversationRecipients","updateConversationRecipientList","_updateRecipients","updateRecipients","senderNumber","_getCurrentSenderNumber","_getRecipients","load","conversationId","messages","messageLength","lastMessage","message","myExtensionNumber","myNumber","map","recipient","text","reply","send","fromNumber","_getFromNumber","toNumbers","_getToNumbers","replyOnMessageId","_getReplyOnMessageId","response","pushMessage","replySuccess","_onReplyError","replyError","state","status","conversationStatus","pushing"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport moduleStatus from '../../enums/moduleStatus';\n\nimport {\n  getMyNumberFromMessage,\n  getRecipientNumbersFromMessage,\n} from '../../lib/messageHelper';\n\nimport actionTypes from './actionTypes';\nimport getConversationReducer from './getConversationReducer';\n\nimport conversationStatus from './conversationStatus';\n\nexport default class Conversation extends RcModule {\n  constructor({\n    messageSender,\n    extensionInfo,\n    messageStore,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._reducer = getConversationReducer(this.actionTypes);\n    this._messageSender = messageSender;\n    this._extensionInfo = extensionInfo;\n    this._messageStore = messageStore;\n    this._promise = null;\n    this.replyToReceivers = this.replyToReceivers.bind(this);\n    this.changeDefaultRecipient = this.changeDefaultRecipient.bind(this);\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this._initModuleStatus();\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    } else if (this._shouldReloadConversation()) {\n      const newConversation = this._messageStore\n                                  .findConversationById(this.id);\n      if (newConversation) {\n        this._loadConversation(newConversation);\n        this._messageStore.readMessages(newConversation);\n      }\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._extensionInfo.ready &&\n      this._messageSender.ready &&\n      this._messageStore.ready &&\n      !this.ready\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._extensionInfo.ready ||\n        !this._messageSender.ready ||\n        !this._messageStore.ready\n      ) &&\n      this.ready\n    );\n  }\n\n  _shouldReloadConversation() {\n    return (\n      this.ready &&\n      (!!this.id) &&\n      this.messageStoreUpdatedAt !== this._messageStore.conversationsTimestamp\n    );\n  }\n\n  _initModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n    });\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  loadConversationById(id) {\n    const conversation = this._messageStore.findConversationById(id);\n    if (!conversation) {\n      return;\n    }\n    this._loadConversation(conversation);\n    this._messageStore.readMessages(conversation);\n  }\n\n  unloadConversation() {\n    this.store.dispatch({\n      type: this.actionTypes.unload,\n    });\n  }\n\n  changeDefaultRecipient(phoneNumber) {\n    if (this.recipients.length < 2) {\n      return;\n    }\n    const recipients = this.recipients.slice();\n    const defaultNumberIndex = recipients.findIndex(number =>\n      (number.extensionNumber === phoneNumber || number.phoneNumber === phoneNumber)\n    );\n    if (defaultNumberIndex < 0) {\n      return;\n    }\n    if (this.id) {\n      const defaultNumber = recipients[defaultNumberIndex];\n      recipients.splice(defaultNumberIndex, 1);\n      const newRecipients = [defaultNumber].concat(recipients);\n      this._updateConversationRecipients(newRecipients);\n    }\n  }\n\n  _updateConversationRecipients(newRecipients) {\n    if (!this.id) {\n      return;\n    }\n    this._messageStore.updateConversationRecipientList(this.id, newRecipients);\n    this._updateRecipients(newRecipients);\n  }\n\n  _updateRecipients(recipients) {\n    this.store.dispatch({\n      type: this.actionTypes.updateRecipients,\n      recipients,\n    });\n  }\n\n  _loadConversation(conversation) {\n    const senderNumber = this._getCurrentSenderNumber(conversation);\n    let recipients = conversation.recipients;\n    if (!recipients || recipients.length === 0) {\n      recipients = this._getRecipients(conversation, senderNumber);\n    }\n    this.store.dispatch({\n      type: this.actionTypes.load,\n      conversationId: conversation.id,\n      messages: conversation.messages.slice(),\n      conversationsTimestamp: this._messageStore.conversationsTimestamp,\n      senderNumber,\n      recipients,\n    });\n  }\n\n  _getCurrentSenderNumber(conversation) {\n    if (!conversation || !conversation.messages) {\n      return null;\n    }\n    const messageLength = conversation.messages.length;\n    if (messageLength < 1) {\n      return null;\n    }\n    const lastMessage = conversation.messages[messageLength - 1];\n    return getMyNumberFromMessage({\n      message: lastMessage,\n      myExtensionNumber: this._extensionInfo.extensionNumber,\n    });\n  }\n\n  _getRecipients(conversation, senderNumber) {\n    if (!conversation || !senderNumber || !conversation.messages) {\n      return [];\n    }\n    const messageLength = conversation.messages.length;\n    if (messageLength < 1) {\n      return [];\n    }\n    const lastMessage = conversation.messages[messageLength - 1];\n    return getRecipientNumbersFromMessage({\n      message: lastMessage,\n      myNumber: senderNumber,\n    });\n  }\n\n  _getReplyOnMessageId() {\n    const lastMessage =\n        this.messages &&\n        (this.messages.length > 0) &&\n        this.messages[this.messages.length - 1];\n    if (lastMessage && lastMessage.id) {\n      return lastMessage.id;\n    }\n    return null;\n  }\n\n  _getFromNumber() {\n    if (!this.senderNumber) {\n      return null;\n    }\n    return (this.senderNumber.extensionNumber || this.senderNumber.phoneNumber);\n  }\n\n  _getToNumbers() {\n    return this.recipients.map(\n      recipient => (recipient.extensionNumber || recipient.phoneNumber)\n    );\n  }\n\n  async replyToReceivers(text) {\n    this.store.dispatch({\n      type: this.actionTypes.reply,\n    });\n    try {\n      const response = await this._messageSender\n                                 .send({\n                                   fromNumber: this._getFromNumber(),\n                                   toNumbers: this._getToNumbers(),\n                                   text,\n                                   replyOnMessageId: this._getReplyOnMessageId(),\n                                 });\n      if (response) {\n        this._messageStore.pushMessage(response.conversation.id, response);\n        this.store.dispatch({\n          type: this.actionTypes.replySuccess,\n        });\n        return response;\n      }\n      this._onReplyError();\n      return null;\n    } catch (error) {\n      this._onReplyError();\n      throw error;\n    }\n  }\n\n  _onReplyError() {\n    this.store.dispatch({\n      type: this.actionTypes.replyError,\n    });\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get conversationStatus() {\n    return this.state.conversationStatus;\n  }\n\n  get ready() {\n    return this.status === moduleStatus.ready;\n  }\n\n  get pushing() {\n    return this.conversationStatus === conversationStatus.pushing;\n  }\n\n  get id() {\n    return this.state.id;\n  }\n\n  get messages() {\n    return this.state.messages;\n  }\n\n  get senderNumber() {\n    return this.state.senderNumber;\n  }\n\n  get recipients() {\n    return this.state.recipients;\n  }\n\n  get messageStoreUpdatedAt() {\n    return this.state.messageStoreUpdatedAt;\n  }\n}\n"]}