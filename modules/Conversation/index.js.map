{"version":3,"sources":["modules/Conversation/index.js"],"names":["Conversation","messageSender","extensionInfo","messageStore","options","actionTypes","_reducer","_messageSender","_extensionInfo","_messageStore","_promise","store","subscribe","_onStateChange","_shouldInit","_initModuleStatus","_shouldReset","_resetModuleStatus","_shouldReloadConversation","_loadConversation","id","readMessages","ready","messageStoreUpdatedAt","updatedTimestamp","dispatch","type","initSuccess","resetSuccess","unload","matchedNames","recipients","slice","length","_updateConversationRecipients","phoneNumber","defaultNumberIndex","findIndex","number","extensionNumber","defaultNumber","splice","newRecipients","concat","updateConversationRecipientList","_updateRecipients","updateRecipients","conversationId","conversation","findConversationById","messages","filter","message","lastMessage","allConversations","index","senderNumber","_getCurrentSenderNumber","_getRecipients","load","conversationsTimestamp","myExtensionNumber","myNumber","map","recipient","text","reply","send","fromNumber","_getFromNumber","toNumbers","_getToNumbers","replyOnMessageId","_getReplyOnMessageId","responses","pushMessage","replySuccess","_onReplyError","replyError","state","status","conversationStatus","pushing"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport moduleStatuses from '../../enums/moduleStatuses';\n\nimport {\n  getMyNumberFromMessage,\n  getRecipientNumbersFromMessage,\n} from '../../lib/messageHelper';\n\nimport actionTypes from './actionTypes';\nimport getConversationReducer from './getConversationReducer';\n\nimport conversationStatus from './conversationStatus';\nimport proxify from '../../lib/proxy/proxify';\n\n/**\n * @class\n * @description Conversation managing module\n */\nexport default class Conversation extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {MessageSender} params.messageSender - messageSender module instance\n   * @param {ExtensionInfo} params.extensionInfo - extensionInfo module instance\n   * @param {MessageStore} params.messageStore - messageStore module instance\n   */\n  constructor({\n    messageSender,\n    extensionInfo,\n    messageStore,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._reducer = getConversationReducer(this.actionTypes);\n    this._messageSender = messageSender;\n    this._extensionInfo = extensionInfo;\n    this._messageStore = messageStore;\n    this._promise = null;\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this._initModuleStatus();\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    } else if (this._shouldReloadConversation()) {\n      this._loadConversation(this.id);\n      this._messageStore.readMessages(this.id);\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._extensionInfo.ready &&\n      this._messageSender.ready &&\n      this._messageStore.ready &&\n      !this.ready\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._extensionInfo.ready ||\n        !this._messageSender.ready ||\n        !this._messageStore.ready\n      ) &&\n      this.ready\n    );\n  }\n\n  _shouldReloadConversation() {\n    return (\n      this.ready &&\n      (!!this.id) &&\n      this.messageStoreUpdatedAt !== this._messageStore.updatedTimestamp\n    );\n  }\n\n  _initModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n    });\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  @proxify\n  async loadConversationById(id) {\n    if (this.id !== id) {\n      this._loadConversation(id);\n      this._messageStore.readMessages(id);\n    }\n  }\n\n  @proxify\n  async unloadConversation() {\n    if (this.id) {\n      this.store.dispatch({\n        type: this.actionTypes.unload,\n      });\n    }\n  }\n\n  @proxify\n  async changeMatchedNames(matchedNames) {\n    const recipients = this.recipients.slice();\n    if (recipients.length !== 1) {\n      return;\n    }\n    if (matchedNames) {\n      recipients[0].matchedNames = matchedNames;\n      this._updateConversationRecipients(recipients);\n    }\n  }\n\n  @proxify\n  async changeDefaultRecipient(phoneNumber) {\n    if (this.recipients.length < 2) {\n      return;\n    }\n    const recipients = this.recipients.slice();\n    const defaultNumberIndex = recipients.findIndex(number =>\n      (number.extensionNumber === phoneNumber || number.phoneNumber === phoneNumber)\n    );\n    if (defaultNumberIndex < 0) {\n      return;\n    }\n    if (this.id) {\n      const defaultNumber = recipients[defaultNumberIndex];\n      recipients.splice(defaultNumberIndex, 1);\n      const newRecipients = [defaultNumber].concat(recipients);\n      this._updateConversationRecipients(newRecipients);\n    }\n  }\n\n  _updateConversationRecipients(newRecipients) {\n    if (!this.id) {\n      return;\n    }\n    this._messageStore.updateConversationRecipientList(this.id, newRecipients);\n    this._updateRecipients(newRecipients);\n  }\n\n  _updateRecipients(recipients) {\n    this.store.dispatch({\n      type: this.actionTypes.updateRecipients,\n      recipients,\n    });\n  }\n\n  _loadConversation(conversationId) {\n    const conversation = this._messageStore.findConversationById(conversationId);\n    if (!conversation) {\n      return;\n    }\n    const messages = this._messageStore.messages.filter(message => (\n      message.conversationId === conversationId\n    ));\n    const lastMessage = this._messageStore.allConversations[conversation.index];\n    const senderNumber = this._getCurrentSenderNumber(lastMessage);\n    let recipients = lastMessage && lastMessage.recipients;\n    if (!recipients || recipients.length === 0) {\n      recipients = this._getRecipients(lastMessage, senderNumber);\n    }\n    this.store.dispatch({\n      type: this.actionTypes.load,\n      conversationId,\n      messages,\n      conversationsTimestamp: this._messageStore.updatedTimestamp,\n      senderNumber,\n      recipients,\n    });\n  }\n\n  _getCurrentSenderNumber(lastMessage) {\n    if (!lastMessage) {\n      return null;\n    }\n    return getMyNumberFromMessage({\n      message: lastMessage,\n      myExtensionNumber: this._extensionInfo.extensionNumber,\n    });\n  }\n\n  _getRecipients(lastMessage, senderNumber) {\n    if (!lastMessage || !senderNumber) {\n      return [];\n    }\n    return getRecipientNumbersFromMessage({\n      message: lastMessage,\n      myNumber: senderNumber,\n    });\n  }\n\n  _getReplyOnMessageId() {\n    const lastMessage =\n      this.messages &&\n      (this.messages.length > 0) &&\n      this.messages[this.messages.length - 1];\n    if (lastMessage && lastMessage.id) {\n      return lastMessage.id;\n    }\n    return null;\n  }\n\n  _getFromNumber() {\n    if (!this.senderNumber) {\n      return null;\n    }\n    return (this.senderNumber.extensionNumber || this.senderNumber.phoneNumber);\n  }\n\n  _getToNumbers() {\n    return this.recipients.map(\n      recipient => (recipient.extensionNumber || recipient.phoneNumber)\n    );\n  }\n\n  @proxify\n  async replyToReceivers(text) {\n    this.store.dispatch({\n      type: this.actionTypes.reply,\n    });\n    try {\n      const responses = await this._messageSender\n        .send({\n          fromNumber: this._getFromNumber(),\n          toNumbers: this._getToNumbers(),\n          text,\n          replyOnMessageId: this._getReplyOnMessageId(),\n        });\n      if (responses && responses[0]) {\n        this._messageStore.pushMessage(responses[0]);\n        this.store.dispatch({\n          type: this.actionTypes.replySuccess,\n        });\n        return responses[0];\n      }\n      this._onReplyError();\n      return null;\n    } catch (error) {\n      this._onReplyError();\n      throw error;\n    }\n  }\n\n  _onReplyError() {\n    this.store.dispatch({\n      type: this.actionTypes.replyError,\n    });\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get conversationStatus() {\n    return this.state.conversationStatus;\n  }\n\n  get ready() {\n    return this.status === moduleStatuses.ready;\n  }\n\n  get pushing() {\n    return this.conversationStatus === conversationStatus.pushing;\n  }\n\n  get id() {\n    return this.state.id;\n  }\n\n  get messages() {\n    return this.state.messages;\n  }\n\n  get senderNumber() {\n    return this.state.senderNumber;\n  }\n\n  get recipients() {\n    return this.state.recipients;\n  }\n\n  get messageStoreUpdatedAt() {\n    return this.state.messageStoreUpdatedAt;\n  }\n}\n"]}