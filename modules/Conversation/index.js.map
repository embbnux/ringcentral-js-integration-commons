{"version":3,"sources":["modules/Conversation/index.js"],"names":["Conversation","messageSender","extensionInfo","messageStore","options","actionTypes","_reducer","_messageSender","_extensionInfo","_messageStore","_promise","replyToReceivers","bind","changeDefaultRecipient","store","subscribe","_onStateChange","_shouldInit","_initModuleStatus","_shouldReset","_resetModuleStatus","_shouldReloadConversation","newConversation","findConversationById","conversation","id","_loadConversation","readMessages","ready","messageStoreUpdatedAt","conversationsTimestamp","dispatch","type","initSuccess","resetSuccess","cleanUp","phoneNumber","recipients","length","slice","defaultNumberIndex","findIndex","number","extensionNumber","defaultNumber","splice","newRecipients","concat","_updateConversationRecipients","currentConversationId","updateConversationRecipientList","_updateRecipients","updateRecipients","senderNumber","updateSenderNumber","updateMessageStoreUpdatedAt","updatedAt","load","_getCurrentSenderNumber","_updateSenderNumber","_getRecipients","messages","messageLength","lastMessage","message","myExtensionNumber","myNumber","map","recipient","text","reply","send","fromNumber","_getFromNumber","toNumbers","_getToNumbers","replyOnMessageId","_getReplyOnMessageId","response","pushMessage","replySuccess","_onReplyError","replyError","state","status","conversationStatus","pushing"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport moduleStatus from '../../enums/moduleStatus';\n\nimport {\n  getMyNumberFromMessage,\n  getRecipientNumbersFromMessage,\n} from '../../lib/messageHelper';\n\nimport conversationActionTypes from './conversationActionTypes';\nimport getConversationReducer from './getConversationReducer';\n\nimport conversationStatus from './conversationStatus';\n\nexport default class Conversation extends RcModule {\n  constructor({\n    messageSender,\n    extensionInfo,\n    messageStore,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes: conversationActionTypes,\n    });\n    this._reducer = getConversationReducer(this.actionTypes);\n    this._messageSender = messageSender;\n    this._extensionInfo = extensionInfo;\n    this._messageStore = messageStore;\n    this._promise = null;\n    this.replyToReceivers = this.replyToReceivers.bind(this);\n    this.changeDefaultRecipient = this.changeDefaultRecipient.bind(this);\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this._initModuleStatus();\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    } else if (this._shouldReloadConversation()) {\n      const newConversation = this._messageStore\n                                  .findConversationById(this.conversation.id);\n      if (newConversation) {\n        this._loadConversation(newConversation);\n        this._messageStore.readMessages(newConversation);\n      }\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._extensionInfo.ready &&\n      this._messageSender.ready &&\n      this._messageStore.ready &&\n      !this.ready\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._extensionInfo.ready ||\n        !this._messageSender.ready ||\n        !this._messageStore.ready\n      ) &&\n      this.ready\n    );\n  }\n\n  _shouldReloadConversation() {\n    return (\n      this.ready &&\n      (!!this.conversation) &&\n      this.messageStoreUpdatedAt !== this._messageStore.conversationsTimestamp\n    );\n  }\n\n  _initModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n    });\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  loadConversationById(id) {\n    const conversation = this._messageStore.findConversationById(id);\n    if (!conversation) {\n      return;\n    }\n    this._loadConversation(conversation);\n    this._messageStore.readMessages(conversation);\n  }\n\n  unloadConversation() {\n    this.store.dispatch({\n      type: this.actionTypes.cleanUp,\n    });\n  }\n\n  changeDefaultRecipient(phoneNumber) {\n    if (this.recipients.length < 2) {\n      return;\n    }\n    const recipients = this.recipients.slice();\n    const defaultNumberIndex = recipients.findIndex(number =>\n      (number.extensionNumber === phoneNumber || number.phoneNumber === phoneNumber)\n    );\n    if (defaultNumberIndex < 0) {\n      return;\n    }\n    if (this.conversation) {\n      const defaultNumber = recipients[defaultNumberIndex];\n      recipients.splice(defaultNumberIndex, 1);\n      const newRecipients = [defaultNumber].concat(recipients);\n      this._updateConversationRecipients(newRecipients);\n    }\n  }\n\n  _updateConversationRecipients(newRecipients) {\n    const currentConversationId = this.conversation && this.conversation.id;\n    if (!currentConversationId) {\n      return;\n    }\n    this._messageStore.updateConversationRecipientList(currentConversationId, newRecipients);\n    this._updateRecipients(newRecipients);\n  }\n\n  _updateRecipients(recipients) {\n    this.store.dispatch({\n      type: this.actionTypes.updateRecipients,\n      recipients,\n    });\n  }\n\n  _updateSenderNumber(senderNumber) {\n    this.store.dispatch({\n      type: this.actionTypes.updateSenderNumber,\n      senderNumber,\n    });\n  }\n\n  _loadConversation(conversation) {\n    this.store.dispatch({\n      type: this.actionTypes.updateMessageStoreUpdatedAt,\n      updatedAt: this._messageStore.conversationsTimestamp,\n    });\n    this.store.dispatch({\n      type: this.actionTypes.load,\n      conversation: { ...conversation },\n    });\n    const senderNumber = this._getCurrentSenderNumber(conversation);\n    this._updateSenderNumber(senderNumber);\n    let recipients = conversation.recipients;\n    if (!recipients || recipients.length === 0) {\n      recipients = this._getRecipients(conversation, senderNumber);\n    }\n    this._updateRecipients(recipients);\n  }\n\n  _getCurrentSenderNumber(conversation) {\n    if (!conversation || !conversation.messages) {\n      return null;\n    }\n    const messageLength = conversation.messages.length;\n    if (messageLength < 1) {\n      return null;\n    }\n    const lastMessage = conversation.messages[messageLength - 1];\n    return getMyNumberFromMessage({\n      message: lastMessage,\n      myExtensionNumber: this._extensionInfo.extensionNumber,\n    });\n  }\n\n  _getRecipients(conversation, senderNumber) {\n    if (!conversation || !senderNumber || !conversation.messages) {\n      return [];\n    }\n    const messageLength = conversation.messages.length;\n    if (messageLength < 1) {\n      return [];\n    }\n    const lastMessage = conversation.messages[messageLength - 1];\n    return getRecipientNumbersFromMessage({\n      message: lastMessage,\n      myNumber: senderNumber,\n    });\n  }\n\n  _getReplyOnMessageId() {\n    const lastMessage =\n        this.conversation &&\n        this.conversation.messages &&\n        (this.conversation.messages.length > 0) &&\n        this.conversation.messages[this.conversation.messages.length - 1];\n    if (lastMessage && lastMessage.id) {\n      return lastMessage.id;\n    }\n    return null;\n  }\n\n  _getFromNumber() {\n    if (!this.senderNumber) {\n      return null;\n    }\n    return (this.senderNumber.extensionNumber || this.senderNumber.phoneNumber);\n  }\n\n  _getToNumbers() {\n    return this.recipients.map(\n      recipient => (recipient.extensionNumber || recipient.phoneNumber)\n    );\n  }\n\n  async replyToReceivers(text) {\n    this.store.dispatch({\n      type: this.actionTypes.reply,\n    });\n    try {\n      const response = await this._messageSender\n                                 .send({\n                                   fromNumber: this._getFromNumber(),\n                                   toNumbers: this._getToNumbers(),\n                                   text,\n                                   replyOnMessageId: this._getReplyOnMessageId(),\n                                 });\n      if (response) {\n        this._messageStore.pushMessage(response.conversation.id, response);\n        this.store.dispatch({\n          type: this.actionTypes.replySuccess,\n        });\n        return response;\n      }\n      this._onReplyError();\n      return null;\n    } catch (error) {\n      this._onReplyError();\n      throw error;\n    }\n  }\n\n  _onReplyError() {\n    this.store.dispatch({\n      type: this.actionTypes.replyError,\n    });\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get conversationStatus() {\n    return this.state.conversationStatus;\n  }\n\n  get ready() {\n    return this.status === moduleStatus.ready;\n  }\n\n  get pushing() {\n    return this.conversationStatus === conversationStatus.pushing;\n  }\n\n  get conversation() {\n    return this.state.conversation;\n  }\n\n  get senderNumber() {\n    return this.state.senderNumber;\n  }\n\n  get recipients() {\n    return this.state.recipients;\n  }\n\n  get messageStoreUpdatedAt() {\n    return this.state.messageStoreUpdatedAt;\n  }\n}\n"]}