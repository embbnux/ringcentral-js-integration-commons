{"version":3,"sources":["modules/CallMonitor/index.js"],"names":["CallMonitor","accountInfo","detailedPresence","activityMatcher","contactMatcher","webphone","onRinging","onNewCall","onCallUpdated","onCallEnded","options","actionTypes","_onStateChange","_accountInfo","ready","_detailedPresence","_contactMatcher","_activityMatcher","pending","store","dispatch","type","init","initSuccess","reset","_lastProcessedCalls","_lastProcessedIds","_lastProcessedNumbers","resetSuccess","uniqueNumbers","_selectors","triggerMatch","sessionIds","calls","oldCalls","slice","forEach","call","oldCallIndex","findIndex","item","sessionId","_onNewCall","_onRinging","oldCall","splice","telephonyStatus","_onCallUpdated","_onCallEnded","_webphone","_reducer","addSelector","countryCode","sessions","callsFromPresence","map","fromNumber","phoneNumber","from","toNumber","to","webphoneSession","sipData","find","session","direction","remoteUser","outbound","remoteUri","indexOf","startTime","creationTime","filter","id","sessionItem","normalizedCalls","dataMapping","contactMapping","activityMapping","fromMatches","toMatches","activityMatches","sort","output","numberMap","addIfNotExist","number","push","addQuerySource","getQueriesFn","readyCheckFn","subscribe","state","status"],"mappings":"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","file":"index.js","sourcesContent":["import 'core-js/fn/array/find';\nimport RcModule from '../../lib/RcModule';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport actionTypes from './actionTypes';\nimport callDirections from '../../enums/callDirections';\nimport getCallMonitorReducer from './getCallMonitorReducer';\nimport normalizeNumber from '../../lib/normalizeNumber';\nimport {\n  isRinging,\n  hasRingingCalls,\n  sortByStartTime,\n} from '../../lib/callLogHelpers';\nimport ensureExist from '../../lib/ensureExist';\n\n\nexport default class CallMonitor extends RcModule {\n  constructor({\n    accountInfo,\n    detailedPresence,\n    activityMatcher,\n    contactMatcher,\n    webphone,\n    onRinging,\n    onNewCall,\n    onCallUpdated,\n    onCallEnded,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._accountInfo = this::ensureExist(accountInfo, 'accountInfo');\n    this._detailedPresence = this::ensureExist(detailedPresence, 'detailedPresence');\n    this._contactMatcher = contactMatcher;\n    this._activityMatcher = activityMatcher;\n    this._webphone = webphone;\n    this._onRinging = onRinging;\n    this._onNewCall = onNewCall;\n    this._onCallUpdated = onCallUpdated;\n    this._onCallEnded = onCallEnded;\n\n    this._reducer = getCallMonitorReducer(this.actionTypes);\n    this.addSelector('normalizedCalls',\n      () => this._detailedPresence.calls,\n      () => this._accountInfo.countryCode,\n      () => this._webphone && this._webphone.sessions,\n      (callsFromPresence, countryCode, sessions) => (\n        callsFromPresence.map((call) => {\n          // use account countryCode to normalize number due to API issues [RCINT-3419]\n          const fromNumber = normalizeNumber({\n            phoneNumber: call.from && call.from.phoneNumber,\n            countryCode,\n          });\n          const toNumber = normalizeNumber({\n            phoneNumber: call.to && call.to.phoneNumber,\n            countryCode,\n          });\n          let webphoneSession;\n          if (sessions && call.sipData) {\n            webphoneSession = sessions.find((session) => {\n              if (session.direction !== call.direction) {\n                return false;\n              }\n              let remoteUser;\n              if (session.direction === callDirections.outbound) {\n                remoteUser = session.to;\n              } else {\n                remoteUser = session.from;\n              }\n              if (call.sipData.remoteUri.indexOf(remoteUser) === -1) {\n                return false;\n              }\n              const startTime = session.startTime || session.creationTime;\n              if (\n                call.startTime - startTime > 4000 ||\n                session.startTime - startTime > 4000\n              ) {\n                return false;\n              }\n              return true;\n            });\n          }\n\n          return {\n            ...call,\n            from: {\n              phoneNumber: fromNumber,\n            },\n            to: {\n              phoneNumber: toNumber,\n            },\n            startTime: (\n              (webphoneSession && webphoneSession.startTime) ||\n              call.startTime\n            ),\n            webphoneSession,\n          };\n        }).filter((call) => {\n          if (!call.webphoneSession || !sessions) {\n            return true;\n          }\n          const session = sessions.find(\n            sessionItem => call.webphoneSession.id === sessionItem.id\n          );\n          return !!session;\n        })\n      ),\n    );\n    this.addSelector('calls',\n      this._selectors.normalizedCalls,\n      () => (this._contactMatcher && this._contactMatcher.dataMapping),\n      () => (this._activityMatcher && this._activityMatcher.dataMapping),\n      (normalizedCalls, contactMapping = {}, activityMapping = {}) => (\n        normalizedCalls.map((call) => {\n          const fromNumber = call.from && call.from.phoneNumber;\n          const toNumber = call.to && call.to.phoneNumber;\n          return {\n            ...call,\n            fromMatches: (fromNumber && contactMapping[fromNumber]) || [],\n            toMatches: (toNumber && contactMapping[toNumber]) || [],\n            activityMatches: (activityMapping[call.sessionId]) || [],\n          };\n        }).sort(sortByStartTime)\n      )\n    );\n\n    this.addSelector('uniqueNumbers',\n      this._selectors.normalizedCalls,\n      (normalizedCalls) => {\n        const output = [];\n        const numberMap = {};\n        function addIfNotExist(number) {\n          if (!numberMap[number]) {\n            output.push(number);\n            numberMap[number] = true;\n          }\n        }\n        normalizedCalls.forEach((call) => {\n          if (call.from && call.from.phoneNumber) {\n            addIfNotExist(call.from.phoneNumber);\n          }\n          if (call.to && call.to.phoneNumber) {\n            addIfNotExist(call.to.phoneNumber);\n          }\n        });\n        return output;\n      }\n    );\n\n    if (this._contactMatcher) {\n      this._contactMatcher.addQuerySource({\n        getQueriesFn: this._selectors.uniqueNumbers,\n        readyCheckFn: () => (\n          this._accountInfo.ready &&\n          this._detailedPresence.ready\n        ),\n      });\n    }\n    this.addSelector('sessionIds',\n      () => this._detailedPresence.calls,\n      calls => calls.map(call => call.sessionId)\n    );\n    if (this._activityMatcher) {\n      this._activityMatcher.addQuerySource({\n        getQueriesFn: this._selectors.sessionIds,\n        readyCheckFn: () => this._detailedPresence.ready,\n      });\n    }\n\n    this._lastProcessedNumbers = null;\n    this._lastProcessedCalls = null;\n    this._lastProcessedIds = null;\n  }\n\n  _onStateChange = async () => {\n    if (\n      this._accountInfo.ready &&\n      this._detailedPresence.ready &&\n      (!this._contactMatcher || this._contactMatcher.ready) &&\n      (!this._activityMatcher || this._activityMatcher.ready) &&\n      this.pending\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (\n      (\n        !this._accountInfo.ready ||\n        !this._detailedPresence.ready ||\n        (this._contactMatcher && !this._contactMatcher.ready) ||\n        (this._activityMatcher && !this._activityMatcher.ready)\n      ) &&\n      this.ready\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.reset,\n      });\n      this._lastProcessedCalls = null;\n      this._lastProcessedIds = null;\n      this._lastProcessedNumbers = null;\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    } else if (\n      this.ready\n    ) {\n      const uniqueNumbers = this._selectors.uniqueNumbers();\n      if (this._lastProcessedNumbers !== uniqueNumbers) {\n        this._lastProcessedNumbers = uniqueNumbers;\n        if (this._contactMatcher && this._contactMatcher.ready) {\n          this._contactMatcher.triggerMatch();\n        }\n      }\n      const sessionIds = this._selectors.sessionIds();\n      if (this._lastProcessedIds !== sessionIds) {\n        this._lastProcessedIds = sessionIds;\n        if (this._activityMatcher && this._activityMatcher.ready) {\n          this._activityMatcher.triggerMatch();\n        }\n      }\n\n      if (\n        this._lastProcessedCalls !== this.calls\n      ) {\n        const oldCalls = (\n          this._lastProcessedCalls &&\n          this._lastProcessedCalls.slice()\n        ) || [];\n        this._lastProcessedCalls = this.calls;\n\n        this.calls.forEach((call) => {\n          const oldCallIndex = oldCalls.findIndex(item => item.sessionId === call.sessionId);\n          if (oldCallIndex === -1) {\n            if (typeof this._onNewCall === 'function') {\n              this._onNewCall(call);\n            }\n            if (typeof this._onRinging === 'function' && isRinging(call)) {\n              this._onRinging(call);\n            }\n          } else {\n            const oldCall = oldCalls[oldCallIndex];\n            oldCalls.splice(oldCallIndex, 1);\n            if (\n              call.telephonyStatus !== oldCall.telephonyStatus &&\n              typeof this._onCallUpdated === 'function'\n            ) {\n              this._onCallUpdated(call);\n            }\n          }\n        });\n        oldCalls.forEach((call) => {\n          if (typeof this._onCallEnded === 'function') {\n            this._onCallEnded(call);\n          }\n        });\n      }\n    }\n  }\n  initialize() {\n    this.store.subscribe(this._onStateChange);\n  }\n\n  get hasRingingCalls() {\n    return hasRingingCalls(this.calls);\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get pending() {\n    return this.state.status === moduleStatuses.pending;\n  }\n\n  get calls() {\n    return this._selectors.calls();\n  }\n}\n"]}