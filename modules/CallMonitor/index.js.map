{"version":3,"sources":["modules/CallMonitor/index.js"],"names":["CallMonitor","call","accountInfo","detailedPresence","activityMatcher","contactMatcher","webphone","onRinging","onNewCall","onCallUpdated","onCallEnded","storage","options","actionTypes","_call","_accountInfo","_detailedPresence","_contactMatcher","_activityMatcher","_webphone","_onRinging","_onNewCall","_onCallUpdated","_onCallEnded","_storage","_callMatchedKey","_reducer","registerReducer","key","reducer","addSelector","calls","countryCode","sessions","callsFromPresence","map","callItem","fromNumber","phoneNumber","from","toNumber","to","webphoneSession","sipData","find","session","direction","indexOf","startTime","creationTime","filter","id","sessionItem","sort","_selectors","normalizedCalls","dataMapping","callMatched","contactMapping","activityMapping","fromMatches","toMatches","toNumberEntity","sessionId","activityMatches","output","numberMap","addIfNotExist","number","push","forEach","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","sessionIds","_lastProcessedNumbers","_lastProcessedCalls","_lastProcessedIds","pending","store","dispatch","type","init","initSuccess","reset","resetSuccess","triggerMatch","oldCalls","slice","length","toNumberEntities","cleanToNumberEntities","entities","oldCallIndex","findIndex","item","oldCall","splice","telephonyStatus","entity","index","toEntity","toMatch","entityId","undefined","_removeMatched","_setMatchedData","toEntityId","subscribe","_onStateChange","console","log","matched","setData","state","status","getItem"],"mappings":"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","file":"index.js","sourcesContent":["import 'core-js/fn/array/find';\nimport RcModule from '../../lib/RcModule';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport actionTypes from './actionTypes';\nimport callDirections from '../../enums/callDirections';\nimport getCallMonitorReducer, {\n  getCallMatchedReducer\n} from './getCallMonitorReducer';\nimport normalizeNumber from '../../lib/normalizeNumber';\nimport {\n  isRinging,\n  hasRingingCalls,\n  sortByStartTime,\n} from '../../lib/callLogHelpers';\nimport ensureExist from '../../lib/ensureExist';\nimport { isRing, isOnHold } from '../webphone/webphoneHelper';\n\nexport default class CallMonitor extends RcModule {\n  constructor({\n    call,\n    accountInfo,\n    detailedPresence,\n    activityMatcher,\n    contactMatcher,\n    webphone,\n    onRinging,\n    onNewCall,\n    onCallUpdated,\n    onCallEnded,\n    storage,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._call = call;\n    this._accountInfo = this::ensureExist(accountInfo, 'accountInfo');\n    this._detailedPresence = this::ensureExist(detailedPresence, 'detailedPresence');\n    this._contactMatcher = contactMatcher;\n    this._activityMatcher = activityMatcher;\n    this._webphone = webphone;\n    this._onRinging = onRinging;\n    this._onNewCall = onNewCall;\n    this._onCallUpdated = onCallUpdated;\n    this._onCallEnded = onCallEnded;\n    this._storage = this::ensureExist(storage, 'storage');\n    this._callMatchedKey = 'callMatched';\n\n    this._reducer = getCallMonitorReducer(this.actionTypes);\n\n    this._storage.registerReducer({\n      key: this._callMatchedKey,\n      reducer: getCallMatchedReducer(this.actionTypes),\n    });\n\n\n    this.addSelector('normalizedCalls',\n      () => this._detailedPresence.calls,\n      () => this._accountInfo.countryCode,\n      () => this._webphone && this._webphone.sessions,\n      (callsFromPresence, countryCode, sessions) => (\n        callsFromPresence.map((callItem) => {\n          // use account countryCode to normalize number due to API issues [RCINT-3419]\n          const fromNumber = normalizeNumber({\n            phoneNumber: callItem.from && callItem.from.phoneNumber,\n            countryCode,\n          });\n          const toNumber = normalizeNumber({\n            phoneNumber: callItem.to && callItem.to.phoneNumber,\n            countryCode,\n          });\n          let webphoneSession;\n          if (sessions && call.sipData) {\n            webphoneSession = sessions.find((session) => {\n              if (session.direction !== callItem.direction) {\n                return false;\n              }\n              if (\n                callItem.to.indexOf(session.to) === -1 ||\n                callItem.from.indexOf(session.from)\n              ) {\n                return false;\n              }\n              const startTime = session.creationTime;\n              if (\n                callItem.startTime - session.creationTime > 5000 ||\n                session.creationTime - callItem.startTime > 5000\n              ) {\n                return false;\n              }\n              return true;\n            });\n          }\n\n          return {\n            ...callItem,\n            from: {\n              phoneNumber: fromNumber,\n            },\n            to: {\n              phoneNumber: toNumber,\n            },\n            startTime: (\n              (webphoneSession && webphoneSession.startTime) ||\n              callItem.startTime\n            ),\n            webphoneSession,\n          };\n        }).filter((callItem) => {\n          if (!callItem.webphoneSession || !sessions) {\n            return true;\n          }\n          const session = sessions.find(\n            sessionItem => callItem.webphoneSession.id === sessionItem.id\n          );\n          return !!session;\n        }).sort(sortByStartTime)\n      ),\n    );\n\n    this.addSelector('calls',\n      this._selectors.normalizedCalls,\n      () => (this._contactMatcher && this._contactMatcher.dataMapping),\n      () => (this._activityMatcher && this._activityMatcher.dataMapping),\n      () => (this.callMatched),\n      (normalizedCalls, contactMapping = {}, activityMapping = {}, callMatched) => {\n        const calls = normalizedCalls.map((callItem) => {\n          const fromNumber = callItem.from && callItem.from.phoneNumber;\n          const toNumber = callItem.to && callItem.to.phoneNumber;\n          const fromMatches = (fromNumber && contactMapping[fromNumber]) || [];\n          const toMatches = (toNumber && contactMapping[toNumber]) || [];\n          const toNumberEntity = callMatched[callItem.sessionId];\n          return {\n            ...callItem,\n            fromMatches,\n            toMatches,\n            activityMatches: (activityMapping[callItem.sessionId]) || [],\n            toNumberEntity,\n          };\n        });\n        return calls;\n      }\n    );\n\n    this.addSelector('activeRingCalls',\n      this._selectors.calls,\n      calls => calls.filter(callItem =>\n        callItem.webphoneSession && isRing(callItem.webphoneSession)\n      )\n    );\n\n    this.addSelector('activeOnHoldCalls',\n      this._selectors.calls,\n      calls => calls.filter(callItem =>\n        callItem.webphoneSession && isOnHold(callItem.webphoneSession)\n      )\n    );\n\n    this.addSelector('activeCurrentCalls',\n      this._selectors.calls,\n      calls => calls.filter(callItem =>\n        callItem.webphoneSession &&\n        !isOnHold(callItem.webphoneSession) &&\n        !isRing(callItem.webphoneSession)\n      )\n    );\n\n    this.addSelector('uniqueNumbers',\n      this._selectors.normalizedCalls,\n      (normalizedCalls) => {\n        const output = [];\n        const numberMap = {};\n        function addIfNotExist(number) {\n          if (!numberMap[number]) {\n            output.push(number);\n            numberMap[number] = true;\n          }\n        }\n        normalizedCalls.forEach((callItem) => {\n          if (callItem.from && callItem.from.phoneNumber) {\n            addIfNotExist(callItem.from.phoneNumber);\n          }\n          if (callItem.to && callItem.to.phoneNumber) {\n            addIfNotExist(callItem.to.phoneNumber);\n          }\n        });\n        return output;\n      }\n    );\n\n    if (this._contactMatcher) {\n      this._contactMatcher.addQuerySource({\n        getQueriesFn: this._selectors.uniqueNumbers,\n        readyCheckFn: () => (\n          this._accountInfo.ready &&\n          this._detailedPresence.ready\n        ),\n      });\n    }\n\n    this.addSelector('sessionIds',\n      () => this._detailedPresence.calls,\n      calls => calls.map(callItem => callItem.sessionId)\n    );\n\n    if (this._activityMatcher) {\n      this._activityMatcher.addQuerySource({\n        getQueriesFn: this._selectors.sessionIds,\n        readyCheckFn: () => this._detailedPresence.ready,\n      });\n    }\n\n    this._lastProcessedNumbers = null;\n    this._lastProcessedCalls = null;\n    this._lastProcessedIds = null;\n  }\n\n  async _onStateChange() {\n    if (\n      (!this._call || this._call.ready) &&\n      this._accountInfo.ready &&\n      this._detailedPresence.ready &&\n      (!this._contactMatcher || this._contactMatcher.ready) &&\n      (!this._activityMatcher || this._activityMatcher.ready) &&\n      this._storage.ready &&\n      this.pending\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (\n      (\n        (this._call && !this._call.ready) ||\n        !this._accountInfo.ready ||\n        !this._detailedPresence.ready ||\n        (this._contactMatcher && !this._contactMatcher.ready) ||\n        (this._activityMatcher && !this._activityMatcher.ready) ||\n        !this._storage.ready\n      ) &&\n      this.ready\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.reset,\n      });\n      this._lastProcessedCalls = null;\n      this._lastProcessedIds = null;\n      this._lastProcessedNumbers = null;\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    } else if (\n      this.ready\n    ) {\n      const uniqueNumbers = this._selectors.uniqueNumbers();\n      if (this._lastProcessedNumbers !== uniqueNumbers) {\n        this._lastProcessedNumbers = uniqueNumbers;\n        if (this._contactMatcher && this._contactMatcher.ready) {\n          this._contactMatcher.triggerMatch();\n        }\n      }\n      const sessionIds = this._selectors.sessionIds();\n      if (this._lastProcessedIds !== sessionIds) {\n        this._lastProcessedIds = sessionIds;\n        if (this._activityMatcher && this._activityMatcher.ready) {\n          this._activityMatcher.triggerMatch();\n        }\n      }\n\n      if (\n        this._lastProcessedCalls !== this.calls\n      ) {\n        const oldCalls = (\n          this._lastProcessedCalls &&\n          this._lastProcessedCalls.slice()\n        ) || [];\n\n        this._lastProcessedCalls = this.calls;\n\n        // no ringing calls\n        if (this._call &&\n            oldCalls.length !== 0 &&\n            this.calls.length === 0 &&\n            this._call.toNumberEntities &&\n            this._call.toNumberEntities.length !== 0) {\n          // console.log('no calls clean to number:');\n          this._call.cleanToNumberEntities();\n        }\n\n        let entities = this._call ? this._call.toNumberEntities.sort(sortByStartTime) : [];\n        // const matchedMap = {};\n        this.calls.forEach((call) => {\n          const oldCallIndex = oldCalls.findIndex(item => item.sessionId === call.sessionId);\n          if (oldCallIndex === -1) {\n            if (typeof this._onNewCall === 'function') {\n              this._onNewCall(call);\n            }\n            if (typeof this._onRinging === 'function' && isRinging(call)) {\n              this._onRinging(call);\n            }\n          } else {\n            const oldCall = oldCalls[oldCallIndex];\n            oldCalls.splice(oldCallIndex, 1);\n            if (\n              call.telephonyStatus !== oldCall.telephonyStatus &&\n              typeof this._onCallUpdated === 'function'\n            ) {\n              this._onCallUpdated(call);\n            }\n          }\n          entities.find((entity, index) => {\n            const toEntity = call.toMatches.find(toMatch =>\n              toMatch.id === entity.entityId\n            );\n            if (toEntity !== undefined) {\n              entities = this._removeMatched(index, entities);\n              this._setMatchedData({\n                sessionId: call.sessionId,\n                toEntityId: toEntity.id,\n              });\n              return true;\n            }\n            return false;\n          });\n        });\n\n        oldCalls.forEach((call) => {\n          if (typeof this._onCallEnded === 'function') {\n            this._onCallEnded(call);\n          }\n        });\n      }\n    }\n  }\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _removeMatched(index, entities) {\n    console.log('removeMatched:', index);\n    entities.splice(index, 1);\n    console.log('entities after splice:', entities);\n    return entities;\n  }\n\n  _setMatchedData(matched) {\n    this.store.dispatch({\n      type: this.actionTypes.setData,\n      ...matched,\n    });\n  }\n\n  get hasRingingCalls() {\n    return hasRingingCalls(this.calls);\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get pending() {\n    return this.state.status === moduleStatuses.pending;\n  }\n\n  get calls() {\n    return this._selectors.calls();\n  }\n\n  get callMatched() {\n    return this._storage.getItem(this._callMatchedKey);\n  }\n}\n"]}