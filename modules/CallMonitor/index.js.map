{"version":3,"sources":["modules/CallMonitor/index.js"],"names":["CallMonitor","detailedPresence","activeCalls","activityMatcher","contactMatcher","regionSettings","options","actionTypes","_onStateChange","_detailedPresence","ready","_activeCalls","_regionSettings","_contactMatcher","_activityMatcher","pending","store","dispatch","type","init","initSuccess","reset","resetSuccess","uniqueNumbers","_selectors","_lastProcessedNumbers","triggerMatch","_reducer","addSelector","calls","cache","callsFromPresence","callsFromActiveCalls","contactCache","activityCache","map","call","activeCall","find","item","sessionId","fromNumber","phoneNumber","from","countryCode","areaCode","toNumber","to","startTime","fromMatches","dataMap","toMatches","activityMatches","output","numberMap","forEach","number","areCode","push","extensionNumber","addQuerySource","getQueriesFn","readyCheckFn","sessionIdList","subscribe","state","status"],"mappings":"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","file":"index.js","sourcesContent":["import 'core-js/fn/array/find';\nimport RcModule from '../../lib/RcModule';\nimport moduleStatus from '../../enums/moduleStatus';\nimport actionTypes from './actionTypes';\nimport getCallMonitorReducer from './getCallMonitorReducer';\nimport normalizeNumber from '../../lib/normalizeNumber';\n\nexport default class CallMonitor extends RcModule {\n  constructor({\n    detailedPresence,\n    activeCalls,\n    activityMatcher,\n    contactMatcher,\n    regionSettings,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._detailedPresence = detailedPresence;\n    this._activeCalls = activeCalls;\n    this._contactMatcher = contactMatcher;\n    this._activityMatcher = activityMatcher;\n    this._regionSettings = regionSettings;\n    this._reducer = getCallMonitorReducer(this.actionTypes);\n    this.addSelector('calls',\n      () => this._detailedPresence.calls,\n      () => this._activeCalls.calls,\n      () => (this._contactMatcher && this._contactMatcher.ready ?\n        this._contactMatcher.cache :\n        null),\n      () => (this._activityMatcher && this._activityMatcher.ready ?\n        this._activityMatcher.cache :\n        null),\n      (callsFromPresence, callsFromActiveCalls, contactCache, activityCache) => (\n        callsFromPresence.map((call) => {\n          const activeCall = callsFromActiveCalls.find(item => item.sessionId === call.sessionId);\n          const fromNumber = normalizeNumber({\n            phoneNumber: call.from,\n            countryCode: this._regionSettings.countryCode,\n            areaCode: this._regionSettings.areaCode,\n          });\n          const toNumber = normalizeNumber({\n            phoneNumber: call.to,\n            countryCode: this._regionSettings.countryCode,\n            areaCode: this._regionSettings.areaCode,\n          });\n          return {\n            ...call,\n            from: {\n              phoneNumber: fromNumber,\n            },\n            to: {\n              phoneNumber: toNumber,\n            },\n            startTime: (activeCall && activeCall.startTime) || call.startTime,\n            fromMatches: (contactCache && contactCache.dataMap[fromNumber]) || [],\n            toMatches: (contactCache && contactCache.dataMap[toNumber]) || [],\n            activityMatches: (activityCache && activityCache.dataMap[call.sessionId]) || [],\n          };\n        })\n      )\n    );\n\n    this.addSelector('uniqueNumbers',\n      () => this._detailedPresence.calls,\n      () => this._activeCalls.calls,\n      (callsFromPresence, callsFromActiveCalls) => {\n        const output = [];\n        const numberMap = {};\n        callsFromPresence.forEach((call) => {\n          if (call.from) {\n            const number = normalizeNumber({\n              phoneNumber: call.from,\n              countryCode: this._regionSettings.countryCode,\n              areaCode: this._regionSettings.areCode,\n            });\n            if (!numberMap[number]) {\n              output.push(number);\n              numberMap[number] = true;\n            }\n          }\n          if (call.to) {\n            const number = normalizeNumber({\n              phoneNumber: call.to,\n              countryCode: this._regionSettings.countryCode,\n              areaCode: this._regionSettings.areCode,\n            });\n            if (!numberMap[number]) {\n              output.push(number);\n              numberMap[number] = true;\n            }\n          }\n        });\n        callsFromActiveCalls.forEach((call) => {\n          if (call.from) {\n            const number = normalizeNumber({\n              phoneNumber: call.from.phoneNumber || call.from.extensionNumber,\n              countryCode: this._regionSettings.countryCode,\n              areaCode: this._regionSettings.areaCode,\n            });\n            if (number && !numberMap[number]) {\n              output.push(number);\n              numberMap[number] = true;\n            }\n          }\n          if (call.to) {\n            const number = normalizeNumber({\n              phoneNumber: call.to.phoneNumber || call.to.extensionNumber,\n              countryCode: this._regionSettings.countryCode,\n              areaCode: this._regionSettings.areaCode,\n            });\n            if (number && !numberMap[number]) {\n              output.push(number);\n              numberMap[number] = true;\n            }\n          }\n        });\n        return output;\n      }\n    );\n\n    if (this._contactMatcher) {\n      this._contactMatcher.addQuerySource({\n        getQueriesFn: this._selectors.uniqueNumbers,\n        readyCheckFn: () => (\n          this._activeCalls.ready &&\n          this._detailedPresence.ready &&\n          this._regionSettings.ready\n        ),\n      });\n    }\n    this.addSelector('sessionIdList',\n      () => this._detailedPresence.calls,\n      calls => calls.map(call => call.sessionId)\n    );\n    if (this._activityMatcher) {\n      this._activityMatcher.addQuerySource({\n        getQueriesFn: this._selectors.sessionIdList,\n        readyCheckFn: () => this._detailedPresence.ready,\n      });\n    }\n\n    this._lastProcessedNumbers = null;\n  }\n\n  _onStateChange = async () => {\n    if (\n      this._detailedPresence.ready &&\n      this._activeCalls.ready &&\n      this._regionSettings.ready &&\n      (!this._contactMatcher || this._contactMatcher.ready) &&\n      (!this._activityMatcher || this._activityMatcher.ready) &&\n      this.pending\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (\n      (\n        !this._detailedPresence.ready ||\n        !this._activeCalls.ready ||\n        !this._regionSettings.ready ||\n        (this._contactMatcher && !this._contactMatcher.ready) ||\n        (this._activityMatcher && !this._activityMatcher.ready)\n      ) &&\n      this.ready\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.reset,\n      });\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    } else if (\n      this.ready\n    ) {\n      const uniqueNumbers = this._selectors.uniqueNumbers();\n      if (this._lastProcessedNumbers !== uniqueNumbers) {\n        this._lastProcessedNumbers = uniqueNumbers;\n        if (this._contactMatcher && this._contactMatcher.ready) {\n          this._contactMatcher.triggerMatch();\n        }\n        if (this._activityMatcher && this._activityMatcher.ready) {\n          this._activityMatcher.triggerMatch();\n        }\n      }\n    }\n  }\n  initialize() {\n    this.store.subscribe(this._onStateChange);\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatus.ready;\n  }\n\n  get pending() {\n    return this.state.status === moduleStatus.pending;\n  }\n\n  get calls() {\n    return this._selectors.calls();\n  }\n}\n"]}