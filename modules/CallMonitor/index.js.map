{"version":3,"sources":["modules/CallMonitor/index.js"],"names":["matchWephoneSessionWithAcitveCall","sessions","callItem","sipData","undefined","find","session","direction","inbound","remoteUri","indexOf","from","outbound","to","webphoneStartTime","creationTime","startTime","Math","abs","CallMonitor","call","accountInfo","detailedPresence","activityMatcher","contactMatcher","webphone","onRinging","onNewCall","onCallUpdated","onCallEnded","storage","options","actionTypes","_call","_accountInfo","_detailedPresence","_contactMatcher","_activityMatcher","_webphone","_onRinging","_onNewCall","_onCallUpdated","_onCallEnded","_storage","_callMatchedKey","_reducer","registerReducer","key","reducer","addSelector","calls","countryCode","callsFromPresence","map","fromNumber","phoneNumber","toNumber","webphoneSession","sort","_selectors","normalizedCalls","dataMapping","callMatched","contactMapping","activityMapping","fromMatches","toMatches","toNumberEntity","sessionId","activityMatches","filter","lastEndedSessions","endCall","output","numberMap","addIfNotExist","number","push","forEach","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","sessionIds","_lastProcessedNumbers","_lastProcessedCalls","_lastProcessedIds","pending","store","dispatch","type","init","initSuccess","reset","resetSuccess","triggerMatch","oldCalls","slice","length","toNumberEntities","cleanToNumberEntities","entities","oldCallIndex","findIndex","item","oldCall","splice","telephonyStatus","entity","index","toEntity","toMatch","id","entityId","_removeMatched","_setMatchedData","toEntityId","subscribe","_onStateChange","console","log","matched","setData","state","status","getItem","activeRingCalls","activeOnHoldCalls","activeCurrentCalls","otherDeviceCalls"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA;;;;AACA;;AAKA;;;;AACA;;;;AAEA,SAASA,iCAAT,CAA2CC,QAA3C,EAAqDC,QAArD,EAA+D;AAC7D,MAAI,CAACD,QAAD,IAAa,CAACC,SAASC,OAA3B,EAAoC;AAClC,WAAOC,SAAP;AACD;AACD,SAAOH,SAASI,IAAT,CAAc,UAACC,OAAD,EAAa;AAChC,QAAIA,QAAQC,SAAR,KAAsBL,SAASK,SAAnC,EAA8C;AAC5C,aAAO,KAAP;AACD;AACD,QACED,QAAQC,SAAR,KAAsB,yBAAeC,OAArC,IACAN,SAASC,OAAT,CAAiBM,SAAjB,CAA2BC,OAA3B,CAAmCJ,QAAQK,IAA3C,MAAqD,CAAC,CAFxD,EAGE;AACA,aAAO,KAAP;AACD;AACD,QACEL,QAAQC,SAAR,KAAsB,yBAAeK,QAArC,IACAV,SAASC,OAAT,CAAiBM,SAAjB,CAA2BC,OAA3B,CAAmCJ,QAAQO,EAA3C,MAAmD,CAAC,CAFtD,EAGE;AACA,aAAO,KAAP;AACD;AACD,QAAIC,0BAAJ;AACA,QAAIR,QAAQC,SAAR,KAAsB,yBAAeC,OAAzC,EAAkD;AAChDM,0BAAoBR,QAAQS,YAA5B;AACD,KAFD,MAEO;AACLD,0BAAoBR,QAAQU,SAAR,IAAqBV,QAAQS,YAAjD;AACD;AACD;AACA;AACA;AACA,QACEE,KAAKC,GAAL,CAAShB,SAASc,SAAT,GAAqBF,iBAA9B,IAAmD,KADrD,EAEE;AACA,aAAO,KAAP;AACD;AACD,WAAO,IAAP;AACD,GA/BM,CAAP;AAgCD;;AAED;;;;;IAIqBK,W;;;AACnB;;;;;;;;;;;;;;;AAeA,6BAaG;AAAA,QAZDC,IAYC,QAZDA,IAYC;AAAA,QAXDC,WAWC,QAXDA,WAWC;AAAA,QAVDC,gBAUC,QAVDA,gBAUC;AAAA,QATDC,eASC,QATDA,eASC;AAAA,QARDC,cAQC,QARDA,cAQC;AAAA,QAPDC,QAOC,QAPDA,QAOC;AAAA,QANDC,SAMC,QANDA,SAMC;AAAA,QALDC,SAKC,QALDA,SAKC;AAAA,QAJDC,aAIC,QAJDA,aAIC;AAAA,QAHDC,WAGC,QAHDA,WAGC;AAAA,QAFDC,OAEC,QAFDA,OAEC;AAAA,QADEC,OACF;AAAA;;AAAA,2KAEIA,OAFJ;AAGCC;AAHD;;AAKD,UAAKC,KAAL,GAAab,IAAb;AACA,UAAKc,YAAL,GAAoB,kCAAkBb,WAAlB,EAA+B,aAA/B,CAApB;AACA,UAAKc,iBAAL,GAAyB,kCAAkBb,gBAAlB,EAAoC,kBAApC,CAAzB;AACA,UAAKc,eAAL,GAAuBZ,cAAvB;AACA,UAAKa,gBAAL,GAAwBd,eAAxB;AACA,UAAKe,SAAL,GAAiBb,QAAjB;AACA,UAAKc,UAAL,GAAkBb,SAAlB;AACA,UAAKc,UAAL,GAAkBb,SAAlB;AACA,UAAKc,cAAL,GAAsBb,aAAtB;AACA,UAAKc,YAAL,GAAoBb,WAApB;AACA,UAAKc,QAAL,GAAgB,kCAAkBb,OAAlB,EAA2B,SAA3B,CAAhB;AACA,UAAKc,eAAL,GAAuB,aAAvB;;AAEA,UAAKC,QAAL,GAAgB,qCAAsB,MAAKb,WAA3B,CAAhB;;AAEA,UAAKW,QAAL,CAAcG,eAAd,CAA8B;AAC5BC,WAAK,MAAKH,eADkB;AAE5BI,eAAS,kDAAsB,MAAKhB,WAA3B;AAFmB,KAA9B;;AAMA,UAAKiB,WAAL,CAAiB,iBAAjB,EACE;AAAA,aAAM,MAAKd,iBAAL,CAAuBe,KAA7B;AAAA,KADF,EAEE;AAAA,aAAM,MAAKhB,YAAL,CAAkBiB,WAAxB;AAAA,KAFF,EAGE;AAAA,aAAM,MAAKb,SAAL,IAAkB,MAAKA,SAAL,CAAerC,QAAvC;AAAA,KAHF,EAIE,UAACmD,iBAAD,EAAoBD,WAApB,EAAiClD,QAAjC;AAAA,aACEmD,kBAAkBC,GAAlB,CAAsB,UAACnD,QAAD,EAAc;AAClC;AACA,YAAMoD,aAAa,+BAAgB;AACjCC,uBAAarD,SAASS,IAAT,IAAiBT,SAASS,IAAT,CAAc4C,WADX;AAEjCJ;AAFiC,SAAhB,CAAnB;AAIA,YAAMK,WAAW,+BAAgB;AAC/BD,uBAAarD,SAASW,EAAT,IAAeX,SAASW,EAAT,CAAY0C,WADT;AAE/BJ;AAF+B,SAAhB,CAAjB;AAIA,YAAMM,kBAAkBzD,kCAAkCC,QAAlC,EAA4CC,QAA5C,CAAxB;AACA,0CACKA,QADL;AAEES,gBAAM;AACJ4C,yBAAaD;AADT,WAFR;AAKEzC,cAAI;AACF0C,yBAAaC;AADX,WALN;AAQExC,qBACGyC,mBAAmBA,gBAAgBzC,SAApC,IACAd,SAASc,SAVb;AAYEyC;AAZF;AAcD,OAzBD,EAyBGC,IAzBH,iCADF;AAAA,KAJF;;AAkCA,UAAKT,WAAL,CAAiB,OAAjB,EACE,MAAKU,UAAL,CAAgBC,eADlB,EAEE;AAAA,aAAO,MAAKxB,eAAL,IAAwB,MAAKA,eAAL,CAAqByB,WAApD;AAAA,KAFF,EAGE;AAAA,aAAO,MAAKxB,gBAAL,IAAyB,MAAKA,gBAAL,CAAsBwB,WAAtD;AAAA,KAHF,EAIE;AAAA,aAAO,MAAKC,WAAZ;AAAA,KAJF,EAKE,UAACF,eAAD,EAA6E;AAAA,UAA3DG,cAA2D,uEAA1C,EAA0C;AAAA,UAAtCC,eAAsC,uEAApB,EAAoB;AAAA,UAAhBF,WAAgB;;AAC3E,UAAMZ,QAAQU,gBAAgBP,GAAhB,CAAoB,UAACnD,QAAD,EAAc;AAC9C,YAAMoD,aAAapD,SAASS,IAAT,IAAiBT,SAASS,IAAT,CAAc4C,WAAlD;AACA,YAAMC,WAAWtD,SAASW,EAAT,IAAeX,SAASW,EAAT,CAAY0C,WAA5C;AACA,YAAMU,cAAeX,cAAcS,eAAeT,UAAf,CAAf,IAA8C,EAAlE;AACA,YAAMY,YAAaV,YAAYO,eAAeP,QAAf,CAAb,IAA0C,EAA5D;AACA,YAAMW,iBAAiBL,YAAY5D,SAASkE,SAArB,CAAvB;AACA,0CACKlE,QADL;AAEE+D,kCAFF;AAGEC,8BAHF;AAIEG,2BAAkBL,gBAAgB9D,SAASkE,SAAzB,CAAD,IAAyC,EAJ5D;AAKED;AALF;AAOD,OAba,CAAd;AAcA,aAAOjB,KAAP;AACD,KArBH;;AAwBA,UAAKD,WAAL,CAAiB,iBAAjB,EACE,MAAKU,UAAL,CAAgBT,KADlB,EAEE;AAAA,aAASA,MAAMoB,MAAN,CAAa;AAAA,eACpBpE,SAASuD,eAAT,IAA4B,4BAAOvD,SAASuD,eAAhB,CADR;AAAA,OAAb,CAAT;AAAA,KAFF;;AAOA,UAAKR,WAAL,CAAiB,mBAAjB,EACE,MAAKU,UAAL,CAAgBT,KADlB,EAEE;AAAA,aAASA,MAAMoB,MAAN,CAAa;AAAA,eACpBpE,SAASuD,eAAT,IAA4B,8BAASvD,SAASuD,eAAlB,CADR;AAAA,OAAb,CAAT;AAAA,KAFF;;AAOA,UAAKR,WAAL,CAAiB,oBAAjB,EACE,MAAKU,UAAL,CAAgBT,KADlB,EAEE;AAAA,aAASA,MAAMoB,MAAN,CAAa;AAAA,eACpBpE,SAASuD,eAAT,IACA,CAAC,8BAASvD,SAASuD,eAAlB,CADD,IAEA,CAAC,4BAAOvD,SAASuD,eAAhB,CAHmB;AAAA,OAAb,CAAT;AAAA,KAFF;;AASA,UAAKR,WAAL,CAAiB,kBAAjB,EACE,MAAKU,UAAL,CAAgBT,KADlB,EAEE;AAAA,aAAM,MAAKZ,SAAL,IAAkB,MAAKA,SAAL,CAAeiC,iBAAvC;AAAA,KAFF,EAGE,UAACrB,KAAD,EAAQqB,iBAAR;AAAA,aAA8BrB,MAAMoB,MAAN,CAAa,UAACpE,QAAD,EAAc;AACvD,YAAIA,SAASuD,eAAb,EAA8B;AAC5B,iBAAO,KAAP;AACD;AACD,YAAI,CAACc,iBAAL,EAAwB;AACtB,iBAAO,IAAP;AACD;AACD,YAAMC,UAAUxE,kCAAkCuE,iBAAlC,EAAqDrE,QAArD,CAAhB;AACA,eAAO,CAACsE,OAAR;AACD,OAT6B,CAA9B;AAAA,KAHF;;AAeA,UAAKvB,WAAL,CAAiB,eAAjB,EACE,MAAKU,UAAL,CAAgBC,eADlB,EAEE,UAACA,eAAD,EAAqB;AACnB,UAAMa,SAAS,EAAf;AACA,UAAMC,YAAY,EAAlB;AACA,eAASC,aAAT,CAAuBC,MAAvB,EAA+B;AAC7B,YAAI,CAACF,UAAUE,MAAV,CAAL,EAAwB;AACtBH,iBAAOI,IAAP,CAAYD,MAAZ;AACAF,oBAAUE,MAAV,IAAoB,IAApB;AACD;AACF;AACDhB,sBAAgBkB,OAAhB,CAAwB,UAAC5E,QAAD,EAAc;AACpC,YAAIA,SAASS,IAAT,IAAiBT,SAASS,IAAT,CAAc4C,WAAnC,EAAgD;AAC9CoB,wBAAczE,SAASS,IAAT,CAAc4C,WAA5B;AACD;AACD,YAAIrD,SAASW,EAAT,IAAeX,SAASW,EAAT,CAAY0C,WAA/B,EAA4C;AAC1CoB,wBAAczE,SAASW,EAAT,CAAY0C,WAA1B;AACD;AACF,OAPD;AAQA,aAAOkB,MAAP;AACD,KApBH;;AAuBA,QAAI,MAAKrC,eAAT,EAA0B;AACxB,YAAKA,eAAL,CAAqB2C,cAArB,CAAoC;AAClCC,sBAAc,MAAKrB,UAAL,CAAgBsB,aADI;AAElCC,sBAAc;AAAA,iBACZ,MAAKhD,YAAL,CAAkBiD,KAAlB,IACA,MAAKhD,iBAAL,CAAuBgD,KAFX;AAAA;AAFoB,OAApC;AAOD;;AAED,UAAKlC,WAAL,CAAiB,YAAjB,EACE;AAAA,aAAM,MAAKd,iBAAL,CAAuBe,KAA7B;AAAA,KADF,EAEE;AAAA,aAASA,MAAMG,GAAN,CAAU;AAAA,eAAYnD,SAASkE,SAArB;AAAA,OAAV,CAAT;AAAA,KAFF;;AAKA,QAAI,MAAK/B,gBAAT,EAA2B;AACzB,YAAKA,gBAAL,CAAsB0C,cAAtB,CAAqC;AACnCC,sBAAc,MAAKrB,UAAL,CAAgByB,UADK;AAEnCF,sBAAc;AAAA,iBAAM,MAAK/C,iBAAL,CAAuBgD,KAA7B;AAAA;AAFqB,OAArC;AAID;;AAED,UAAKE,qBAAL,GAA6B,IAA7B;AACA,UAAKC,mBAAL,GAA2B,IAA3B;AACA,UAAKC,iBAAL,GAAyB,IAAzB;AAzKC;AA0KF;;;;;;;;;;;;;AAGC,oBACE,CAAC,CAAC,KAAKtD,KAAN,IAAe,KAAKA,KAAL,CAAWkD,KAA3B,KACA,KAAKjD,YAAL,CAAkBiD,KADlB,IAEA,KAAKhD,iBAAL,CAAuBgD,KAFvB,KAGC,CAAC,KAAK/C,eAAN,IAAyB,KAAKA,eAAL,CAAqB+C,KAH/C,MAIC,CAAC,KAAK9C,gBAAN,IAA0B,KAAKA,gBAAL,CAAsB8C,KAJjD,KAKA,KAAKxC,QAAL,CAAcwC,KALd,IAMA,KAAKK,OAPP,EAQE;AACA,uBAAKC,KAAL,CAAWC,QAAX,CAAoB;AAClBC,0BAAM,KAAK3D,WAAL,CAAiB4D;AADL,mBAApB;AAGA,uBAAKH,KAAL,CAAWC,QAAX,CAAoB;AAClBC,0BAAM,KAAK3D,WAAL,CAAiB6D;AADL,mBAApB;AAGD,iBAfD,MAeO,IACL,CACG,KAAK5D,KAAL,IAAc,CAAC,KAAKA,KAAL,CAAWkD,KAA3B,IACA,CAAC,KAAKjD,YAAL,CAAkBiD,KADnB,IAEA,CAAC,KAAKhD,iBAAL,CAAuBgD,KAFxB,IAGC,KAAK/C,eAAL,IAAwB,CAAC,KAAKA,eAAL,CAAqB+C,KAH/C,IAIC,KAAK9C,gBAAL,IAAyB,CAAC,KAAKA,gBAAL,CAAsB8C,KAJjD,IAKA,CAAC,KAAKxC,QAAL,CAAcwC,KANjB,KAQA,KAAKA,KATA,EAUL;AACA,uBAAKM,KAAL,CAAWC,QAAX,CAAoB;AAClBC,0BAAM,KAAK3D,WAAL,CAAiB8D;AADL,mBAApB;AAGA,uBAAKR,mBAAL,GAA2B,IAA3B;AACA,uBAAKC,iBAAL,GAAyB,IAAzB;AACA,uBAAKF,qBAAL,GAA6B,IAA7B;AACA,uBAAKI,KAAL,CAAWC,QAAX,CAAoB;AAClBC,0BAAM,KAAK3D,WAAL,CAAiB+D;AADL,mBAApB;AAGD,iBApBM,MAoBA,IACL,KAAKZ,KADA,EAEL;AACMF,+BADN,GACsB,KAAKtB,UAAL,CAAgBsB,aAAhB,EADtB;;AAEA,sBAAI,KAAKI,qBAAL,KAA+BJ,aAAnC,EAAkD;AAChD,yBAAKI,qBAAL,GAA6BJ,aAA7B;AACA,wBAAI,KAAK7C,eAAL,IAAwB,KAAKA,eAAL,CAAqB+C,KAAjD,EAAwD;AACtD,2BAAK/C,eAAL,CAAqB4D,YAArB;AACD;AACF;AACKZ,4BARN,GAQmB,KAAKzB,UAAL,CAAgByB,UAAhB,EARnB;;AASA,sBAAI,KAAKG,iBAAL,KAA2BH,UAA/B,EAA2C;AACzC,yBAAKG,iBAAL,GAAyBH,UAAzB;AACA,wBAAI,KAAK/C,gBAAL,IAAyB,KAAKA,gBAAL,CAAsB8C,KAAnD,EAA0D;AACxD,2BAAK9C,gBAAL,CAAsB2D,YAAtB;AACD;AACF;;AAED,sBACE,KAAKV,mBAAL,KAA6B,KAAKpC,KADpC,EAEE;AACM+C,4BADN,GAEE,KAAKX,mBAAL,IACA,KAAKA,mBAAL,CAAyBY,KAAzB,EAFe,IAGZ,EAJL;;;AAMA,yBAAKZ,mBAAL,GAA2B,KAAKpC,KAAhC;;AAEA;AACA,wBAAI,KAAKjB,KAAL,IACAgE,SAASE,MAAT,KAAoB,CADpB,IAEA,KAAKjD,KAAL,CAAWiD,MAAX,KAAsB,CAFtB,IAGA,KAAKlE,KAAL,CAAWmE,gBAHX,IAIA,KAAKnE,KAAL,CAAWmE,gBAAX,CAA4BD,MAA5B,KAAuC,CAJ3C,EAI8C;AAC5C;AACA,2BAAKlE,KAAL,CAAWoE,qBAAX;AACD;;AAEGC,4BAlBJ,GAkBe,KAAKrE,KAAL,GAAa,KAAKA,KAAL,CAAWmE,gBAAX,CAA4B1C,IAA5B,iCAAb,GAAiE,EAlBhF;AAmBA;;AACA,yBAAKR,KAAL,CAAW4B,OAAX,CAAmB,UAAC1D,IAAD,EAAU;AAC3B,0BAAMmF,eAAeN,SAASO,SAAT,CAAmB;AAAA,+BAAQC,KAAKrC,SAAL,KAAmBhD,KAAKgD,SAAhC;AAAA,uBAAnB,CAArB;AACA,0BAAImC,iBAAiB,CAAC,CAAtB,EAAyB;AACvB,4BAAI,OAAO,OAAK/D,UAAZ,KAA2B,UAA/B,EAA2C;AACzC,iCAAKA,UAAL,CAAgBpB,IAAhB;AACD;AACD,4BAAI,OAAO,OAAKmB,UAAZ,KAA2B,UAA3B,IAAyC,+BAAUnB,IAAV,CAA7C,EAA8D;AAC5D,iCAAKmB,UAAL,CAAgBnB,IAAhB;AACD;AACF,uBAPD,MAOO;AACL,4BAAMsF,UAAUT,SAASM,YAAT,CAAhB;AACAN,iCAASU,MAAT,CAAgBJ,YAAhB,EAA8B,CAA9B;AACA,4BACEnF,KAAKwF,eAAL,KAAyBF,QAAQE,eAAjC,IACA,OAAO,OAAKnE,cAAZ,KAA+B,UAFjC,EAGE;AACA,iCAAKA,cAAL,CAAoBrB,IAApB;AACD;AACF;AACDkF,+BAASjG,IAAT,CAAc,UAACwG,MAAD,EAASC,KAAT,EAAmB;AAC/B,4BAAMC,WAAW3F,KAAK8C,SAAL,CAAe7D,IAAf,CAAoB;AAAA,iCACnC2G,QAAQC,EAAR,KAAeJ,OAAOK,QADa;AAAA,yBAApB,CAAjB;AAGA,4BAAIH,aAAa3G,SAAjB,EAA4B;AAC1BkG,qCAAW,OAAKa,cAAL,CAAoBL,KAApB,EAA2BR,QAA3B,CAAX;AACA,iCAAKc,eAAL,CAAqB;AACnBhD,uCAAWhD,KAAKgD,SADG;AAEnBiD,wCAAYN,SAASE;AAFF,2BAArB;AAIA,iCAAO,IAAP;AACD;AACD,+BAAO,KAAP;AACD,uBAbD;AAcD,qBAjCD;;AAmCAhB,6BAASnB,OAAT,CAAiB,UAAC1D,IAAD,EAAU;AACzB,0BAAI,OAAO,OAAKsB,YAAZ,KAA6B,UAAjC,EAA6C;AAC3C,+BAAKA,YAAL,CAAkBtB,IAAlB;AACD;AACF,qBAJD;AAKD;AACF;;;;;;;;;;;;;;;;;;iCAEU;AAAA;;AACX,WAAKqE,KAAL,CAAW6B,SAAX,CAAqB;AAAA,eAAM,OAAKC,cAAL,EAAN;AAAA,OAArB;AACD;;;mCAEcT,K,EAAOR,Q,EAAU;AAC9BkB,cAAQC,GAAR,CAAY,gBAAZ,EAA8BX,KAA9B;AACAR,eAASK,MAAT,CAAgBG,KAAhB,EAAuB,CAAvB;AACAU,cAAQC,GAAR,CAAY,wBAAZ,EAAsCnB,QAAtC;AACA,aAAOA,QAAP;AACD;;;oCAEeoB,O,EAAS;AACvB,WAAKjC,KAAL,CAAWC,QAAX;AACEC,cAAM,KAAK3D,WAAL,CAAiB2F;AADzB,SAEKD,OAFL;AAID;;;wBAEqB;AACpB,aAAO,qCAAgB,KAAKxE,KAArB,CAAP;AACD;;;wBAEY;AACX,aAAO,KAAK0E,KAAL,CAAWC,MAAlB;AACD;;;wBAEW;AACV,aAAO,KAAKD,KAAL,CAAWC,MAAX,KAAsB,yBAAe1C,KAA5C;AACD;;;wBAEa;AACZ,aAAO,KAAKyC,KAAL,CAAWC,MAAX,KAAsB,yBAAerC,OAA5C;AACD;;;wBAEW;AACV,aAAO,KAAK7B,UAAL,CAAgBT,KAAhB,EAAP;AACD;;;wBAEiB;AAChB,aAAO,KAAKP,QAAL,CAAcmF,OAAd,CAAsB,KAAKlF,eAA3B,CAAP;AACD;;;wBAEqB;AACpB,aAAO,KAAKe,UAAL,CAAgBoE,eAAhB,EAAP;AACD;;;wBAEuB;AACtB,aAAO,KAAKpE,UAAL,CAAgBqE,iBAAhB,EAAP;AACD;;;wBAEwB;AACvB,aAAO,KAAKrE,UAAL,CAAgBsE,kBAAhB,EAAP;AACD;;;wBAEsB;AACrB,aAAO,KAAKtE,UAAL,CAAgBuE,gBAAhB,EAAP;AACD;;;;;kBAxXkB/G,W","file":"index.js","sourcesContent":["import 'core-js/fn/array/find';\nimport RcModule from '../../lib/RcModule';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport actionTypes from './actionTypes';\nimport callDirections from '../../enums/callDirections';\nimport getCallMonitorReducer, {\n  getCallMatchedReducer\n} from './getCallMonitorReducer';\nimport normalizeNumber from '../../lib/normalizeNumber';\nimport {\n  isRinging,\n  hasRingingCalls,\n  sortByStartTime,\n} from '../../lib/callLogHelpers';\nimport ensureExist from '../../lib/ensureExist';\nimport { isRing, isOnHold } from '../Webphone/webphoneHelper';\n\nfunction matchWephoneSessionWithAcitveCall(sessions, callItem) {\n  if (!sessions || !callItem.sipData) {\n    return undefined;\n  }\n  return sessions.find((session) => {\n    if (session.direction !== callItem.direction) {\n      return false;\n    }\n    if (\n      session.direction === callDirections.inbound &&\n      callItem.sipData.remoteUri.indexOf(session.from) === -1\n    ) {\n      return false;\n    }\n    if (\n      session.direction === callDirections.outbound &&\n      callItem.sipData.remoteUri.indexOf(session.to) === -1\n    ) {\n      return false;\n    }\n    let webphoneStartTime;\n    if (session.direction === callDirections.inbound) {\n      webphoneStartTime = session.creationTime;\n    } else {\n      webphoneStartTime = session.startTime || session.creationTime;\n    }\n    // 16000 is from experience in test.\n    // there is delay bettween active call created and webphone session created\n    // for example, the time delay is decided by when webphone get invite info\n    if (\n      Math.abs(callItem.startTime - webphoneStartTime) > 16000\n    ) {\n      return false;\n    }\n    return true;\n  });\n}\n\n/**\n * @class\n * @description active calls monitor module\n */\nexport default class CallMonitor extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {Call} params.call - call module instance\n   * @param {AccountInfo} params.accountInfo - accountInfo module instance\n   * @param {DetailedPresence} params.detailedPresence - detailedPresence module instance\n   * @param {ActivityMatcher} params.activityMatcher - activityMatcher module instance\n   * @param {ContactMatcher} params.contactMatcher - contactMatcher module instance\n   * @param {Webphone} params.webphone - webphone module instance\n   * @param {Storage} params.storage - storage module instance\n   * @param {Function} params.onRinging - function on ring\n   * @param {Function} params.onNewCall - function on new call\n   * @param {Function} params.onCallUpdated - function on call updated\n   * @param {Function} params.onCallEnded - function on call ended\n   */\n  constructor({\n    call,\n    accountInfo,\n    detailedPresence,\n    activityMatcher,\n    contactMatcher,\n    webphone,\n    onRinging,\n    onNewCall,\n    onCallUpdated,\n    onCallEnded,\n    storage,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._call = call;\n    this._accountInfo = this::ensureExist(accountInfo, 'accountInfo');\n    this._detailedPresence = this::ensureExist(detailedPresence, 'detailedPresence');\n    this._contactMatcher = contactMatcher;\n    this._activityMatcher = activityMatcher;\n    this._webphone = webphone;\n    this._onRinging = onRinging;\n    this._onNewCall = onNewCall;\n    this._onCallUpdated = onCallUpdated;\n    this._onCallEnded = onCallEnded;\n    this._storage = this::ensureExist(storage, 'storage');\n    this._callMatchedKey = 'callMatched';\n\n    this._reducer = getCallMonitorReducer(this.actionTypes);\n\n    this._storage.registerReducer({\n      key: this._callMatchedKey,\n      reducer: getCallMatchedReducer(this.actionTypes),\n    });\n\n\n    this.addSelector('normalizedCalls',\n      () => this._detailedPresence.calls,\n      () => this._accountInfo.countryCode,\n      () => this._webphone && this._webphone.sessions,\n      (callsFromPresence, countryCode, sessions) => (\n        callsFromPresence.map((callItem) => {\n          // use account countryCode to normalize number due to API issues [RCINT-3419]\n          const fromNumber = normalizeNumber({\n            phoneNumber: callItem.from && callItem.from.phoneNumber,\n            countryCode,\n          });\n          const toNumber = normalizeNumber({\n            phoneNumber: callItem.to && callItem.to.phoneNumber,\n            countryCode,\n          });\n          const webphoneSession = matchWephoneSessionWithAcitveCall(sessions, callItem);\n          return {\n            ...callItem,\n            from: {\n              phoneNumber: fromNumber,\n            },\n            to: {\n              phoneNumber: toNumber,\n            },\n            startTime: (\n              (webphoneSession && webphoneSession.startTime) ||\n              callItem.startTime\n            ),\n            webphoneSession,\n          };\n        }).sort(sortByStartTime)\n      ),\n    );\n\n    this.addSelector('calls',\n      this._selectors.normalizedCalls,\n      () => (this._contactMatcher && this._contactMatcher.dataMapping),\n      () => (this._activityMatcher && this._activityMatcher.dataMapping),\n      () => (this.callMatched),\n      (normalizedCalls, contactMapping = {}, activityMapping = {}, callMatched) => {\n        const calls = normalizedCalls.map((callItem) => {\n          const fromNumber = callItem.from && callItem.from.phoneNumber;\n          const toNumber = callItem.to && callItem.to.phoneNumber;\n          const fromMatches = (fromNumber && contactMapping[fromNumber]) || [];\n          const toMatches = (toNumber && contactMapping[toNumber]) || [];\n          const toNumberEntity = callMatched[callItem.sessionId];\n          return {\n            ...callItem,\n            fromMatches,\n            toMatches,\n            activityMatches: (activityMapping[callItem.sessionId]) || [],\n            toNumberEntity,\n          };\n        });\n        return calls;\n      }\n    );\n\n    this.addSelector('activeRingCalls',\n      this._selectors.calls,\n      calls => calls.filter(callItem =>\n        callItem.webphoneSession && isRing(callItem.webphoneSession)\n      )\n    );\n\n    this.addSelector('activeOnHoldCalls',\n      this._selectors.calls,\n      calls => calls.filter(callItem =>\n        callItem.webphoneSession && isOnHold(callItem.webphoneSession)\n      )\n    );\n\n    this.addSelector('activeCurrentCalls',\n      this._selectors.calls,\n      calls => calls.filter(callItem =>\n        callItem.webphoneSession &&\n        !isOnHold(callItem.webphoneSession) &&\n        !isRing(callItem.webphoneSession)\n      )\n    );\n\n    this.addSelector('otherDeviceCalls',\n      this._selectors.calls,\n      () => this._webphone && this._webphone.lastEndedSessions,\n      (calls, lastEndedSessions) => calls.filter((callItem) => {\n        if (callItem.webphoneSession) {\n          return false;\n        }\n        if (!lastEndedSessions) {\n          return true;\n        }\n        const endCall = matchWephoneSessionWithAcitveCall(lastEndedSessions, callItem);\n        return !endCall;\n      })\n    );\n\n    this.addSelector('uniqueNumbers',\n      this._selectors.normalizedCalls,\n      (normalizedCalls) => {\n        const output = [];\n        const numberMap = {};\n        function addIfNotExist(number) {\n          if (!numberMap[number]) {\n            output.push(number);\n            numberMap[number] = true;\n          }\n        }\n        normalizedCalls.forEach((callItem) => {\n          if (callItem.from && callItem.from.phoneNumber) {\n            addIfNotExist(callItem.from.phoneNumber);\n          }\n          if (callItem.to && callItem.to.phoneNumber) {\n            addIfNotExist(callItem.to.phoneNumber);\n          }\n        });\n        return output;\n      }\n    );\n\n    if (this._contactMatcher) {\n      this._contactMatcher.addQuerySource({\n        getQueriesFn: this._selectors.uniqueNumbers,\n        readyCheckFn: () => (\n          this._accountInfo.ready &&\n          this._detailedPresence.ready\n        ),\n      });\n    }\n\n    this.addSelector('sessionIds',\n      () => this._detailedPresence.calls,\n      calls => calls.map(callItem => callItem.sessionId)\n    );\n\n    if (this._activityMatcher) {\n      this._activityMatcher.addQuerySource({\n        getQueriesFn: this._selectors.sessionIds,\n        readyCheckFn: () => this._detailedPresence.ready,\n      });\n    }\n\n    this._lastProcessedNumbers = null;\n    this._lastProcessedCalls = null;\n    this._lastProcessedIds = null;\n  }\n\n  async _onStateChange() {\n    if (\n      (!this._call || this._call.ready) &&\n      this._accountInfo.ready &&\n      this._detailedPresence.ready &&\n      (!this._contactMatcher || this._contactMatcher.ready) &&\n      (!this._activityMatcher || this._activityMatcher.ready) &&\n      this._storage.ready &&\n      this.pending\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (\n      (\n        (this._call && !this._call.ready) ||\n        !this._accountInfo.ready ||\n        !this._detailedPresence.ready ||\n        (this._contactMatcher && !this._contactMatcher.ready) ||\n        (this._activityMatcher && !this._activityMatcher.ready) ||\n        !this._storage.ready\n      ) &&\n      this.ready\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.reset,\n      });\n      this._lastProcessedCalls = null;\n      this._lastProcessedIds = null;\n      this._lastProcessedNumbers = null;\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    } else if (\n      this.ready\n    ) {\n      const uniqueNumbers = this._selectors.uniqueNumbers();\n      if (this._lastProcessedNumbers !== uniqueNumbers) {\n        this._lastProcessedNumbers = uniqueNumbers;\n        if (this._contactMatcher && this._contactMatcher.ready) {\n          this._contactMatcher.triggerMatch();\n        }\n      }\n      const sessionIds = this._selectors.sessionIds();\n      if (this._lastProcessedIds !== sessionIds) {\n        this._lastProcessedIds = sessionIds;\n        if (this._activityMatcher && this._activityMatcher.ready) {\n          this._activityMatcher.triggerMatch();\n        }\n      }\n\n      if (\n        this._lastProcessedCalls !== this.calls\n      ) {\n        const oldCalls = (\n          this._lastProcessedCalls &&\n          this._lastProcessedCalls.slice()\n        ) || [];\n\n        this._lastProcessedCalls = this.calls;\n\n        // no ringing calls\n        if (this._call &&\n            oldCalls.length !== 0 &&\n            this.calls.length === 0 &&\n            this._call.toNumberEntities &&\n            this._call.toNumberEntities.length !== 0) {\n          // console.log('no calls clean to number:');\n          this._call.cleanToNumberEntities();\n        }\n\n        let entities = this._call ? this._call.toNumberEntities.sort(sortByStartTime) : [];\n        // const matchedMap = {};\n        this.calls.forEach((call) => {\n          const oldCallIndex = oldCalls.findIndex(item => item.sessionId === call.sessionId);\n          if (oldCallIndex === -1) {\n            if (typeof this._onNewCall === 'function') {\n              this._onNewCall(call);\n            }\n            if (typeof this._onRinging === 'function' && isRinging(call)) {\n              this._onRinging(call);\n            }\n          } else {\n            const oldCall = oldCalls[oldCallIndex];\n            oldCalls.splice(oldCallIndex, 1);\n            if (\n              call.telephonyStatus !== oldCall.telephonyStatus &&\n              typeof this._onCallUpdated === 'function'\n            ) {\n              this._onCallUpdated(call);\n            }\n          }\n          entities.find((entity, index) => {\n            const toEntity = call.toMatches.find(toMatch =>\n              toMatch.id === entity.entityId\n            );\n            if (toEntity !== undefined) {\n              entities = this._removeMatched(index, entities);\n              this._setMatchedData({\n                sessionId: call.sessionId,\n                toEntityId: toEntity.id,\n              });\n              return true;\n            }\n            return false;\n          });\n        });\n\n        oldCalls.forEach((call) => {\n          if (typeof this._onCallEnded === 'function') {\n            this._onCallEnded(call);\n          }\n        });\n      }\n    }\n  }\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _removeMatched(index, entities) {\n    console.log('removeMatched:', index);\n    entities.splice(index, 1);\n    console.log('entities after splice:', entities);\n    return entities;\n  }\n\n  _setMatchedData(matched) {\n    this.store.dispatch({\n      type: this.actionTypes.setData,\n      ...matched,\n    });\n  }\n\n  get hasRingingCalls() {\n    return hasRingingCalls(this.calls);\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get pending() {\n    return this.state.status === moduleStatuses.pending;\n  }\n\n  get calls() {\n    return this._selectors.calls();\n  }\n\n  get callMatched() {\n    return this._storage.getItem(this._callMatchedKey);\n  }\n\n  get activeRingCalls() {\n    return this._selectors.activeRingCalls();\n  }\n\n  get activeOnHoldCalls() {\n    return this._selectors.activeOnHoldCalls();\n  }\n\n  get activeCurrentCalls() {\n    return this._selectors.activeCurrentCalls();\n  }\n\n  get otherDeviceCalls() {\n    return this._selectors.otherDeviceCalls();\n  }\n}\n"]}