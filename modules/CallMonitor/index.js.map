{"version":3,"sources":["modules/CallMonitor/index.js"],"names":["CallMonitor","detailedPresence","activeCalls","activityMatcher","contactMatcher","regionSettings","options","actionTypes","_onStateChange","_detailedPresence","ready","_activeCalls","_regionSettings","_contactMatcher","_activityMatcher","pending","store","dispatch","type","init","initSuccess","reset","resetSuccess","uniqueNumbers","_selectors","_lastProcessedNumbers","triggerMatch","sessionIds","_lastProcessedIds","_reducer","addSelector","calls","countryCode","areaCode","callsFromPresence","callsFromActiveCalls","map","call","activeCall","find","item","sessionId","fromNumber","phoneNumber","from","toNumber","to","name","startTime","normalizedCalls","cache","contactCache","activityCache","fromMatches","dataMap","toMatches","activityMatches","output","numberMap","addIfNotExist","number","push","forEach","addQuerySource","getQueriesFn","readyCheckFn","subscribe","state","status"],"mappings":"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","file":"index.js","sourcesContent":["import 'core-js/fn/array/find';\nimport RcModule from '../../lib/RcModule';\nimport moduleStatus from '../../enums/moduleStatus';\nimport actionTypes from './actionTypes';\nimport getCallMonitorReducer from './getCallMonitorReducer';\nimport normalizeNumber from '../../lib/normalizeNumber';\n\nexport default class CallMonitor extends RcModule {\n  constructor({\n    detailedPresence,\n    activeCalls,\n    activityMatcher,\n    contactMatcher,\n    regionSettings,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._detailedPresence = detailedPresence;\n    this._activeCalls = activeCalls;\n    this._contactMatcher = contactMatcher;\n    this._activityMatcher = activityMatcher;\n    this._regionSettings = regionSettings;\n    this._reducer = getCallMonitorReducer(this.actionTypes);\n    this.addSelector('normalizedCalls',\n      () => this._detailedPresence.calls,\n      () => this._activeCalls.calls,\n      () => this._regionSettings.countryCode,\n      () => this._regionSettings.areaCode,\n      (callsFromPresence, callsFromActiveCalls, countryCode, areaCode) => (\n        callsFromPresence.map((call) => {\n          const activeCall = callsFromActiveCalls.find(item => item.sessionId === call.sessionId);\n          const fromNumber = normalizeNumber({\n            phoneNumber: call.from && call.from.phoneNumber,\n            countryCode,\n            areaCode,\n          });\n          const toNumber = normalizeNumber({\n            phoneNumber: call.to && call.to.phoneNumber,\n            countryCode,\n            areaCode,\n          });\n          return {\n            ...call,\n            from: {\n              phoneNumber: fromNumber,\n              name: activeCall && activeCall.from && activeCall.from.name,\n            },\n            to: {\n              phoneNumber: toNumber,\n              name: activeCall && activeCall.to && activeCall.to.name,\n            },\n            startTime: (activeCall && activeCall.startTime) || call.startTime,\n          };\n        })\n      ),\n    );\n    this.addSelector('calls',\n      this._selectors.normalizedCalls,\n      () => (this._contactMatcher && this._contactMatcher.ready ?\n        this._contactMatcher.cache :\n        null),\n      () => (this._activityMatcher && this._activityMatcher.ready ?\n        this._activityMatcher.cache :\n        null),\n      (normalizedCalls, contactCache, activityCache) => (\n        normalizedCalls.map((call) => {\n          const fromNumber = call.from && call.from.phoneNumber;\n          const toNumber = call.to && call.to.phoneNumber;\n          return {\n            ...call,\n            fromMatches: (fromNumber && contactCache && contactCache.dataMap[fromNumber]) || [],\n            toMatches: (toNumber && contactCache && contactCache.dataMap[toNumber]) || [],\n            activityMatches: (activityCache && activityCache.dataMap[call.sessionId]) || [],\n          };\n        })\n      )\n    );\n\n    this.addSelector('uniqueNumbers',\n      this._selectors.normalizedCalls,\n      (normalizedCalls) => {\n        const output = [];\n        const numberMap = {};\n        function addIfNotExist(number) {\n          if (!numberMap[number]) {\n            output.push(number);\n            numberMap[number] = true;\n          }\n        }\n        normalizedCalls.forEach((call) => {\n          if (call.from && call.from.phoneNumber) {\n            addIfNotExist(call.from.phoneNumber);\n          }\n          if (call.to && call.to.phoneNumber) {\n            addIfNotExist(call.to.phoneNumber);\n          }\n        });\n        return output;\n      }\n    );\n\n    if (this._contactMatcher) {\n      this._contactMatcher.addQuerySource({\n        getQueriesFn: this._selectors.uniqueNumbers,\n        readyCheckFn: () => (\n          this._activeCalls.ready &&\n          this._detailedPresence.ready &&\n          this._regionSettings.ready\n        ),\n      });\n    }\n    this.addSelector('sessionIds',\n      () => this._detailedPresence.calls,\n      calls => calls.map(call => call.sessionId)\n    );\n    if (this._activityMatcher) {\n      this._activityMatcher.addQuerySource({\n        getQueriesFn: this._selectors.sessionIds,\n        readyCheckFn: () => this._detailedPresence.ready,\n      });\n    }\n\n    this._lastProcessedNumbers = null;\n  }\n\n  _onStateChange = async () => {\n    if (\n      this._detailedPresence.ready &&\n      this._activeCalls.ready &&\n      this._regionSettings.ready &&\n      (!this._contactMatcher || this._contactMatcher.ready) &&\n      (!this._activityMatcher || this._activityMatcher.ready) &&\n      this.pending\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (\n      (\n        !this._detailedPresence.ready ||\n        !this._activeCalls.ready ||\n        !this._regionSettings.ready ||\n        (this._contactMatcher && !this._contactMatcher.ready) ||\n        (this._activityMatcher && !this._activityMatcher.ready)\n      ) &&\n      this.ready\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.reset,\n      });\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    } else if (\n      this.ready\n    ) {\n      const uniqueNumbers = this._selectors.uniqueNumbers();\n      if (this._lastProcessedNumbers !== uniqueNumbers) {\n        this._lastProcessedNumbers = uniqueNumbers;\n        if (this._contactMatcher && this._contactMatcher.ready) {\n          this._contactMatcher.triggerMatch();\n        }\n      }\n      const sessionIds = this._selectors.sessionIds();\n      if (this._lastProcessedIds !== sessionIds) {\n        this._lastProcessedIds = sessionIds;\n        if (this._activityMatcher && this._activityMatcher.ready) {\n          this._activityMatcher.triggerMatch();\n        }\n      }\n    }\n  }\n  initialize() {\n    this.store.subscribe(this._onStateChange);\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatus.ready;\n  }\n\n  get pending() {\n    return this.state.status === moduleStatus.pending;\n  }\n\n  get calls() {\n    return this._selectors.calls();\n  }\n}\n"]}