{"version":3,"sources":["modules/ConnectivityMonitor/index.js"],"names":["DEFAULT_TIME_TO_RETRY","DEFAULT_HEART_BEAT_INTERVAL","ConnectivityMonitor","alert","client","environment","timeToRetry","heartBeatInterval","options","actionTypes","_alert","_client","_environment","_timeToRetry","_heartBeatInterval","_reducer","_retryTimeoutId","_lastEnvironmentCounter","_beforeRequestHandler","_requestSuccessHandler","_requestErrorHandler","pending","ready","changeCounter","_shouldInit","_bindHandlers","store","dispatch","type","initSuccess","_retry","_shouldRebindHandlers","subscribe","_onStateChange","_clearTimeout","connectivity","connectSuccess","alertIds","messages","filter","m","message","disconnected","map","id","length","dismiss","danger","allowDuplicates","apiResponse","Error","response","connectFail","showAlert","_unbindHandlers","service","platform","on","events","requestSuccess","requestError","removeListener","get","skipAuthCheck","clearTimeout","t","setTimeout","_checkConnection","state","status"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport actionTypes from './actionTypes';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport getConnectivityMonitorReducer from './getConnectivityMonitorReducer';\nimport connectivityMonitorMessages from './connectivityMonitorMessages';\nimport ensureExist from '../../lib/ensureExist';\n\nexport const DEFAULT_TIME_TO_RETRY = 5 * 1000;\nexport const DEFAULT_HEART_BEAT_INTERVAL = 60 * 1000;\n\nexport default class ConnectivityMonitor extends RcModule {\n  constructor({\n    alert,\n    client,\n    environment,\n    timeToRetry = DEFAULT_TIME_TO_RETRY,\n    heartBeatInterval = DEFAULT_HEART_BEAT_INTERVAL,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._alert = alert;\n    this._client = this::ensureExist(client, 'client');\n    this._environment = environment;\n    this._timeToRetry = timeToRetry;\n    this._heartBeatInterval = heartBeatInterval;\n    this._reducer = getConnectivityMonitorReducer(this.actionTypes);\n    this._retryTimeoutId = null;\n    this._lastEnvironmentCounter = 0;\n\n    // auto bind this\n    this._beforeRequestHandler = this::this._beforeRequestHandler;\n    this._requestSuccessHandler = this::this._requestSuccessHandler;\n    this._requestErrorHandler = this::this._requestErrorHandler;\n  }\n  _shouldInit() {\n    return !!(this.pending &&\n      (!this._environment || this._environment.ready));\n  }\n  _shouldRebindHandlers() {\n    return !!(this.ready &&\n      this._environment &&\n      this._environment.ready &&\n      this._environment.changeCounter !== this._lastEnvironmentCounter);\n  }\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this._bindHandlers();\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n      this._retry();\n    } else if (this._shouldRebindHandlers()) {\n      this._lastEnvironmentCounter = this._environment.changeCounter;\n      this._bindHandlers();\n    }\n  }\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n  _beforeRequestHandler() {\n    this._clearTimeout();\n  }\n  _requestSuccessHandler() {\n    if (!this.connectivity) {\n      this.store.dispatch({\n        type: this.actionTypes.connectSuccess,\n      });\n      if (this._alert) {\n        // dismiss disconnected alerts if found\n        const alertIds = this._alert.messages.filter(m => (\n          m.message === connectivityMonitorMessages.disconnected\n        )).map(m => m.id);\n        if (alertIds.length) {\n          this._alert.dismiss(alertIds);\n        }\n      }\n    }\n    this._retry();\n  }\n  showAlert() {\n    if (!this.connectivity && this._alert) {\n      this._alert.danger({\n        message: connectivityMonitorMessages.disconnected,\n        allowDuplicates: false,\n      });\n    }\n  }\n  _requestErrorHandler(apiResponse) {\n    if (\n      apiResponse instanceof Error &&\n      (\n        !apiResponse.apiResponse ||\n        typeof apiResponse.apiResponse.response !== 'function' ||\n        !apiResponse.apiResponse.response()\n      )\n    ) {\n      if (this.connectivity) {\n        this.store.dispatch({\n          type: this.actionTypes.connectFail,\n        });\n        this.showAlert();\n      }\n      this._retry();\n    }\n  }\n  _bindHandlers() {\n    if (this._unbindHandlers) {\n      this._unbindHandlers();\n    }\n    const client = this._client.service.platform().client();\n    client.on(client.events.requestSuccess, this._requestSuccessHandler);\n    client.on(client.events.requestError, this._requestErrorHandler);\n    this._unbindHandlers = () => {\n      client.removeListener(client.events.requestSuccess, this._requestSuccessHandler);\n      client.removeListener(client.events.requestError, this._requestErrorHandler);\n      this._unbindHandlers = null;\n    };\n  }\n\n  async _checkConnection() {\n    try {\n      // query api info as a test of connectivity\n      await this._client.service.platform().get('', null, { skipAuthCheck: true });\n    } catch (error) {\n      /* falls through */\n    }\n  }\n  _clearTimeout() {\n    if (this._retryTimeoutId) {\n      clearTimeout(this._retryTimeoutId);\n      this._retryTimeoutId = null;\n    }\n  }\n  _retry(t = (this.connectivity ? this._heartBeatInterval : this._timeToRetry)) {\n    this._clearTimeout();\n    this._retryTimeoutId = setTimeout(() => {\n      this._retryTimeoutId = null;\n      this._checkConnection();\n    }, t);\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.state.status === moduleStatuses.ready;\n  }\n\n  get pending() {\n    return this.state.status === moduleStatuses.pending;\n  }\n\n  get connectivity() {\n    return this.state.connectivity;\n  }\n}\n\n"]}