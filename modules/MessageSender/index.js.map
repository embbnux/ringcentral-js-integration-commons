{"version":3,"sources":["modules/MessageSender/index.js"],"names":["MessageSender","alert","client","extensionInfo","extensionPhoneNumber","numberValidate","options","actionTypes","_alert","_client","_extensionPhoneNumber","_extensionInfo","_reducer","_numberValidate","send","bind","store","subscribe","_onStateChange","_shouldInit","_initModuleStatus","_shouldReset","_resetModuleStatus","ready","dispatch","type","initSuccess","resetSuccess","message","warning","text","_alertWarning","textEmpty","length","textTooLong","toNumbers","recipientsEmpty","senderNumber","validateResult","isMySenderNumber","senderNumbersList","find","number","senderNumberInvalids","errors","forEach","error","recipientNumberInvalids","result","_validateToNumbersIsEmpty","recipientNumbers","filter","item","index","arr","indexOf","validate","validateNumbers","numberValidateResult","_alertInvalidRecipientErrors","validateError","numbers","map","e164","fromNumber","replyOnMessageId","_validateText","_validateToNumbers","validateToNumberResult","extensionNumbers","phoneNumbers","_validateSenderNumber","responses","_sendPager","pagerResponse","push","phoneNumber","_sendSms","toNumber","smsResponse","sendOver","sendError","_onSendError","console","debug","toUsers","account","extension","sms","post","from","to","response","extensionNumber","params","replyOn","companyPager","errResp","apiResponse","ok","_json","errorCode","err","parameterName","startsWith","notSmsToExtension","state","status","sendStatus","idle","smsSenderNumbers"],"mappings":"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","file":"index.js","sourcesContent":["import 'core-js/fn/array/find';\nimport RcModule from '../../lib/RcModule';\nimport isBlank from '../../lib/isBlank';\nimport moduleStatus from '../../enums/moduleStatus';\n\nimport messageSenderActionTypes from './messageSenderActionTypes';\nimport getMessageSenderReducer from './getMessageSenderReducer';\n\nimport messageSenderStatus from './messageSenderStatus';\nimport messageSenderMessages from './messageSenderMessages';\n\nexport default class MessageSender extends RcModule {\n  constructor({\n    alert,\n    client,\n    extensionInfo,\n    extensionPhoneNumber,\n    numberValidate,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes: messageSenderActionTypes,\n    });\n\n    this._alert = alert;\n    this._client = client;\n    this._extensionPhoneNumber = extensionPhoneNumber;\n    this._extensionInfo = extensionInfo;\n    this._reducer = getMessageSenderReducer(this.actionTypes);\n    this._numberValidate = numberValidate;\n    this.send = this.send.bind(this);\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this._initModuleStatus();\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._extensionPhoneNumber.ready &&\n      this._extensionInfo.ready &&\n      !this.ready\n    );\n  }\n\n  _initModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n    });\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._extensionPhoneNumber.ready ||\n        !this._extensionInfo.ready\n      ) &&\n      this.ready\n    );\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  _alertWarning(message) {\n    if (message) {\n      this._alert.warning({\n        message,\n      });\n      return true;\n    }\n    return false;\n  }\n\n  _validateText(text) {\n    if (isBlank(text)) {\n      this._alertWarning(messageSenderMessages.textEmpty);\n      return false;\n    }\n\n    if (text.length > 1000) {\n      this._alertWarning(messageSenderMessages.textTooLong);\n      return false;\n    }\n\n    return true;\n  }\n\n  _validateToNumbersIsEmpty(toNumbers) {\n    if (toNumbers.length === 0) {\n      this._alertWarning(messageSenderMessages.recipientsEmpty);\n      return true;\n    }\n    return false;\n  }\n\n  _validateSenderNumber(senderNumber) {\n    let validateResult = true;\n    if (isBlank(senderNumber)) {\n      validateResult = false;\n    }\n    if (validateResult) {\n      const isMySenderNumber = this.senderNumbersList.find(number => (\n        number === senderNumber\n      ));\n      if (!isMySenderNumber) {\n        validateResult = false;\n      }\n    }\n    if (!validateResult) {\n      this._alertWarning(messageSenderMessages.senderNumberInvalids);\n    }\n    return validateResult;\n  }\n\n  _alertInvalidRecipientErrors(errors) {\n    errors.forEach((error) => {\n      const message = messageSenderMessages[error.type];\n      if (!this._alertWarning(message)) {\n        this._alertWarning(messageSenderMessages.recipientNumberInvalids);\n      }\n    });\n  }\n\n  async _validateToNumbers(toNumbers) {\n    const result = {\n      result: false,\n    };\n    if (this._validateToNumbersIsEmpty(toNumbers)) {\n      return result;\n    }\n    let recipientNumbers = toNumbers.filter((item, index, arr) => arr.indexOf(item) === index);\n    this.store.dispatch({ type: this.actionTypes.validate });\n    const numberValidateResult = await this._numberValidate.validateNumbers(recipientNumbers);\n    if (!numberValidateResult.result) {\n      this._alertInvalidRecipientErrors(numberValidateResult.errors);\n      this.store.dispatch({ type: this.actionTypes.validateError });\n      return result;\n    }\n\n    recipientNumbers = numberValidateResult.numbers.map(number => number.e164);\n    result.result = true;\n    result.numbers = recipientNumbers;\n    return result;\n  }\n\n  async send({ fromNumber, toNumbers, text, replyOnMessageId }) {\n    if (!this._validateText(text)) {\n      return null;\n    }\n\n    try {\n      const validateToNumberResult = await this._validateToNumbers(toNumbers);\n      if (!validateToNumberResult.result) {\n        return null;\n      }\n      const recipientNumbers = validateToNumberResult.numbers;\n\n      const extensionNumbers = recipientNumbers.filter(number => (number.length <= 5));\n      const phoneNumbers = recipientNumbers.filter(number => (number.length > 5));\n\n      // not validate sender number if recipient is only extension number\n      if (phoneNumbers.length > 0) {\n        if (!this._validateSenderNumber(fromNumber)) {\n          return null;\n        }\n      }\n\n      this.store.dispatch({\n        type: this.actionTypes.send,\n      });\n      const responses = [];\n      if (extensionNumbers.length > 0) {\n        const pagerResponse = await this._sendPager({\n          toNumbers: extensionNumbers,\n          text,\n          replyOnMessageId,\n        });\n        responses.push(pagerResponse);\n      }\n\n      if (phoneNumbers.length > 0) {\n        for (const phoneNumber of phoneNumbers) {\n          const smsResponse = await this._sendSms({ fromNumber, toNumber: phoneNumber, text });\n          responses.push(smsResponse);\n        }\n      }\n      this.store.dispatch({\n        type: this.actionTypes.sendOver,\n      });\n      return responses;\n    } catch (error) {\n      this.store.dispatch({\n        type: this.actionTypes.sendError,\n        error: 'error'\n      });\n      this._onSendError(error);\n      console.debug('sendComposeText e ', error);\n      throw error;\n    }\n  }\n\n  async _sendSms({ fromNumber, toNumber, text }) {\n    const toUsers = [{ phoneNumber: toNumber }];\n    const response = await this._client.account().extension().sms().post({\n      from: { phoneNumber: fromNumber },\n      to: toUsers,\n      text,\n    });\n    return response;\n  }\n\n  async _sendPager({ toNumbers, text, replyOnMessageId }) {\n    const from = { extensionNumber: this._extensionInfo.extensionNumber };\n    const toUsers = toNumbers.map(number => ({ extensionNumber: number }));\n    const params = { from, to: toUsers, text };\n    if (replyOnMessageId) {\n      params.replyOn = replyOnMessageId;\n    }\n    const response = await this._client.account().extension().companyPager().post(params);\n    return response;\n  }\n\n  _onSendError(error) {\n    const errResp = error.apiResponse;\n    if (\n      errResp && errResp.response &&\n      !errResp.response.ok\n      && errResp._json.errorCode === 'InvalidParameter'\n    ) {\n      errResp._json.errors.map((err) => {\n        if (\n          (err.errorCode === 'CMN-101' || err.errorCode === 'CMN-102') &&\n          err.parameterName.startsWith('to')\n        ) {\n          // 101 : \"Parameter [to.extensionNumber] value is invalid\"\n          // 101 : \"Parameter [to.phoneNumber] value is invalid\"\n          // 102 : \"Resource for parameter [to] is not found\"\n          this._alertWarning(messageSenderMessages.recipientNumberInvalids);\n          return null;\n        }\n        if (err.errorCode === 'MSG-246') {\n          // MSG-246 : \"Sending SMS from/to extension numbers is not available\"\n          this._alertWarning(messageSenderMessages.notSmsToExtension);\n        }\n        return null;\n      });\n      return;\n    }\n    this._alertWarning(messageSenderMessages.sendError);\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get sendStatus() {\n    return this.state.sendStatus;\n  }\n\n  get ready() {\n    return this.status === moduleStatus.ready;\n  }\n\n  get idle() {\n    return this.sendStatus === messageSenderStatus.idle;\n  }\n\n  get senderNumbersList() {\n    return this._extensionPhoneNumber.smsSenderNumbers.map(\n      number => number.phoneNumber\n    );\n  }\n}\n"]}