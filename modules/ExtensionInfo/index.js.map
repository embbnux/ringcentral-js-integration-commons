{"version":3,"sources":["modules/ExtensionInfo/index.js"],"names":["DEFAULT_MASK","join","DEFAULT_COUNTRY","id","isoCode","callingCode","extractData","info","serviceFeatures","forEach","f","featureName","enabled","reason","output","ExtensionInfo","client","options","name","fetchFunction","_client","account","extension","get","addSelector","data","_selectors","extensionNumber","regionalSettings","homeCountry"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,eAAe,CACnB,IADmB,EAEnB,iBAFmB,EAGnB,YAHmB,EAInB,MAJmB,EAKnB,MALmB,EAMnB,QANmB,EAOnB,aAPmB,EAQnB,cARmB,wBASC,CAClB,wBADkB,EAElB,qCAFkB,EAGlB,sBAHkB,EAIlB,8BAJkB,EAKlB,YALkB,EAMlBC,IANkB,CAMb,GANa,CATD,QAgBnBA,IAhBmB,CAgBd,GAhBc,CAArB;;AAkBA,IAAMC,kBAAkB;AACtBC,MAAI,GADkB;AAEtBC,WAAS,IAFa;AAGtBC,eAAa;AAHS,CAAxB;;AAMA,SAASC,WAAT,CAAqBC,IAArB,EAA2B;AACzB,MAAMC,kBAAkB,EAAxB;AACAD,OAAKC,eAAL,CAAqBC,OAArB,CAA6B,UAACC,CAAD,EAAO;AAClCF,oBAAgBE,EAAEC,WAAlB,IAAiC;AAC/BC,eAASF,EAAEE;AADoB,KAAjC;AAGA,QAAI,CAACF,EAAEE,OAAP,EAAgB;AACdJ,sBAAgBE,EAAEC,WAAlB,EAA+BE,MAA/B,GAAwCH,EAAEG,MAA1C;AACD;AACF,GAPD;AAQA,MAAMC,SAAS,wBAAKP,IAAL,EAAWP,YAAX,CAAf;AACAc,SAAON,eAAP,GAAyBA,eAAzB;AACA,SAAOM,MAAP;AACD;;IAEoBC,a;;;AACnB,+BAGG;AAAA;;AAAA,QAFDC,MAEC,QAFDA,MAEC;AAAA,QADEC,OACF;AAAA;;AAAA;AAECC,YAAM,eAFP;AAGCF,oBAHD;AAICG;AAAA,+EAAe;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAYb,WAAZ;AAAA;AAAA,yBAA8B,MAAKc,OAAL,CAAaC,OAAb,GAAuBC,SAAvB,GAAmCC,GAAnC,EAA9B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAf;;AAAA;AAAA;AAAA;AAAA;AAJD,OAKIN,OALJ;;AAOD,UAAKO,WAAL,CACE,MADF,EAEE;AAAA,aAAM,MAAKC,IAAX;AAAA,KAFF,EAGE;AAAA,aAAQA,QAAQ,EAAhB;AAAA,KAHF;AAPC;AAYF;;;;wBAGU;AACT,aAAO,KAAKC,UAAL,CAAgBnB,IAAhB,EAAP;AACD;;;wBAEQ;AACP,aAAO,KAAKA,IAAL,CAAUJ,EAAjB;AACD;;;wBAEqB;AACpB,aAAO,KAAKI,IAAL,CAAUoB,eAAjB;AACD;;;wBAEqB;AACpB,aAAO,KAAKpB,IAAL,CAAUC,eAAjB;AACD;;;wBAEa;AACZ,aAAQ,KAAKD,IAAL,CAAUqB,gBAAV,IAA8B,KAAKrB,IAAL,CAAUqB,gBAAV,CAA2BC,WAA1D,IACL3B,eADF;AAED;;;;;kBAtCkBa,a","file":"index.js","sourcesContent":["import mask from 'json-mask';\nimport DataFetcher from '../../lib/DataFetcher';\n\nconst DEFAULT_MASK = [\n  'id',\n  'extensionNumber',\n  'contact(*)',\n  'name',\n  'type',\n  'status',\n  'permissions',\n  'profileImage',\n  `regionalSettings(${[\n    'timezone(id,name,bias)',\n    'homeCountry(id,isoCode,callingCode)',\n    'language(localeCode)',\n    'formattingLocale(localeCode)',\n    'timeFormat',\n  ].join(',')})`,\n].join(',');\n\nconst DEFAULT_COUNTRY = {\n  id: '1',\n  isoCode: 'US',\n  callingCode: '1',\n};\n\nfunction extractData(info) {\n  const serviceFeatures = {};\n  info.serviceFeatures.forEach((f) => {\n    serviceFeatures[f.featureName] = {\n      enabled: f.enabled,\n    };\n    if (!f.enabled) {\n      serviceFeatures[f.featureName].reason = f.reason;\n    }\n  });\n  const output = mask(info, DEFAULT_MASK);\n  output.serviceFeatures = serviceFeatures;\n  return output;\n}\n\nexport default class ExtensionInfo extends DataFetcher {\n  constructor({\n    client,\n    ...options\n  }) {\n    super({\n      name: 'extensionInfo',\n      client,\n      fetchFunction: async () => extractData(await this._client.account().extension().get()),\n      ...options\n    });\n    this.addSelector(\n      'info',\n      () => this.data,\n      data => data || {},\n    );\n  }\n\n\n  get info() {\n    return this._selectors.info();\n  }\n\n  get id() {\n    return this.info.id;\n  }\n\n  get extensionNumber() {\n    return this.info.extensionNumber;\n  }\n\n  get serviceFeatures() {\n    return this.info.serviceFeatures;\n  }\n\n  get country() {\n    return (this.info.regionalSettings && this.info.regionalSettings.homeCountry) ||\n      DEFAULT_COUNTRY;\n  }\n}\n"]}