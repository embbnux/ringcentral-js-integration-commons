{"version":3,"sources":["modules/Messages/index.js"],"names":["Messages","messageStore","extensionInfo","defaultPerPage","contactMatcher","conversationMatcher","conversationLogger","options","actionTypes","_contactMatcher","_conversationLogger","_messageStore","_extensionInfo","_reducer","addSelector","conversations","messages","output","numberMap","addIfNotExist","number","push","forEach","message","from","phoneNumber","extensionNumber","to","length","toUser","state","searchInput","input","dataMapping","loggingMap","contactMapping","conversationLogMapping","map","self","correspondents","selfNumber","selfMatches","correspondentMatches","reduce","matches","contact","concat","conversationLogId","getConversationLogId","isLogging","conversationMatches","_selectors","allConversations","effectiveSearchString","searchResults","searchNumber","find","indexOf","matchOrder","entity","name","subject","matchedMessage","item","conversationId","matchOrders","sort","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","_lastProcessedNumbers","store","subscribe","_onStateChange","_shouldInit","dispatch","type","init","triggerMatch","initSuccess","_shouldReset","reset","resetSuccess","pending","page","setPage","nextPage","updateSearchInput","status","filteredConversations"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport ensureExist from '../../lib/ensureExist';\nimport actionTypes from './actionTypes';\nimport getMessagesReducer from './getMessagesReducer';\nimport { getNumbersFromMessage, sortSearchResults } from '../../lib/messageHelper';\nimport cleanNumber from '../../lib/cleanNumber';\n\nexport default class Messages extends RcModule {\n  constructor({\n    messageStore,\n    extensionInfo,\n    defaultPerPage = 20,\n    contactMatcher,\n    conversationMatcher,\n    conversationLogger,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._contactMatcher = contactMatcher;\n    this._conversationLogger = conversationLogger;\n    this._messageStore = this::ensureExist(messageStore, 'messageStore');\n    this._extensionInfo = this::ensureExist(extensionInfo, 'extensionInfo');\n    this._reducer = getMessagesReducer(this.actionTypes, defaultPerPage);\n\n    this.addSelector('uniqueNumbers',\n      () => this._messageStore.conversations,\n      (messages) => {\n        const output = [];\n        const numberMap = {};\n        function addIfNotExist(number) {\n          if (!numberMap[number]) {\n            output.push(number);\n            numberMap[number] = true;\n          }\n        }\n        messages.forEach((message) => {\n          if (message.from && message.from.phoneNumber) {\n            addIfNotExist(message.from.phoneNumber);\n          } else if (message.from && message.from.extensionNumber) {\n            addIfNotExist(message.from.extensionNumber);\n          }\n          if (message.to && message.to.length > 0) {\n            message.to.forEach((toUser) => {\n              if (toUser && toUser.phoneNumber) {\n                addIfNotExist(toUser.phoneNumber);\n              } else if (toUser && toUser.extensionNumber) {\n                addIfNotExist(toUser.extensionNumber);\n              }\n            });\n          }\n        });\n        return output;\n      },\n    );\n    this.addSelector('effectiveSearchString',\n      () => this.state.searchInput,\n      (input) => {\n        if (input.length >= 3) return input;\n        return '';\n      }\n    );\n    this.addSelector('allConversations',\n      () => this._messageStore.conversations,\n      () => this._extensionInfo.extensionNumber,\n      () => this._contactMatcher && this._contactMatcher.dataMapping,\n      () => this._conversationLogger && this._conversationLogger.loggingMap,\n      () => this._conversationLogger && this._conversationLogger.dataMapping,\n      (\n        conversations,\n        extensionNumber,\n        contactMapping = {},\n        loggingMap = {},\n        conversationLogMapping = {},\n      ) => (\n          conversations.map((message) => {\n            const {\n            self,\n              correspondents,\n          } = getNumbersFromMessage({ extensionNumber, message });\n            const selfNumber = self && (self.phoneNumber || self.extensionNumber);\n            const selfMatches = (selfNumber && contactMapping[selfNumber]) || [];\n            const correspondentMatches = correspondents.reduce((matches, contact) => {\n              const number = contact && (contact.phoneNumber || contact.extensionNumber);\n              return number && contactMapping[number] && contactMapping[number].length ?\n                matches.concat(contactMapping[number]) :\n                matches;\n            }, []);\n            const conversationLogId = this._conversationLogger ?\n              this._conversationLogger.getConversationLogId(message) :\n              null;\n            const isLogging = !!(conversationLogId && loggingMap[conversationLogId]);\n            const conversationMatches = conversationLogMapping[conversationLogId] || [];\n            return {\n              ...message,\n              self,\n              selfMatches,\n              correspondents,\n              correspondentMatches,\n              conversationLogId,\n              isLogging,\n              conversationMatches,\n            };\n          })\n        ),\n    );\n    this.addSelector('filteredConversations',\n      this._selectors.allConversations,\n      () => this._selectors.effectiveSearchString(),\n      (allConversations, effectiveSearchString) => {\n        if (effectiveSearchString !== '') {\n          const searchResults = [];\n          allConversations.forEach((message) => {\n            const searchNumber = cleanNumber(effectiveSearchString, false);\n            if (searchNumber !== '' && message.correspondents.find(contact => (\n              cleanNumber(contact.phoneNumber || contact.extensionNumber || '')\n                .indexOf(searchNumber) > -1\n            ))) {\n              // match by phoneNumber or extensionNumber\n              searchResults.push({\n                ...message,\n                matchOrder: 0,\n              });\n              return;\n            }\n            if (message.correspondentMatches.length) {\n              if (\n                message.correspondentMatches.find(entity => (\n                  entity.name && entity.name.indexOf(effectiveSearchString) > -1\n                ))\n              ) {\n                // match by entity's name\n                searchResults.push({\n                  ...message,\n                  matchOrder: 0,\n                });\n                return;\n              }\n            } else if (message.correspondents.find(contact => (\n              (contact.name || '')\n                .indexOf(effectiveSearchString) > -1\n            ))) {\n              searchResults.push({\n                ...message,\n                matchOrder: 0,\n              });\n              return;\n            }\n\n            // try match messages of the same conversation\n            if (message.subject.indexOf(effectiveSearchString) > -1) {\n              searchResults.push({\n                ...message,\n                matchOrder: 1,\n              });\n              return;\n            }\n            const matchedMessage = this._messageStore.messages.find(item => (\n              item.conversationId === message.conversationId &&\n              item.subject.indexOf(effectiveSearchString) > -1\n            ));\n            if (matchedMessage) {\n              searchResults.push({\n                ...message,\n                matchedMessage,\n                matchOrders: 1,\n              });\n            }\n          });\n          return searchResults.sort(sortSearchResults);\n        }\n        return allConversations;\n      },\n    );\n\n    if (this._contactMatcher) {\n      this._contactMatcher.addQuerySource({\n        getQueriesFn: this._selectors.uniqueNumbers,\n        readyCheckFn: () => (\n          this._messageStore.ready\n        ),\n      });\n    }\n\n    this._lastProcessedNumbers = null;\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      if (this._contactMatcher) {\n        await this._contactMatcher.triggerMatch();\n      }\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this.store.dispatch({\n        type: this.actionTypes.reset,\n      });\n      this._lastProcessedNumbers = null;\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess,\n      });\n    } else if (this._lastProcessedNumbers !== this.uniqueNumbers) {\n      this._lastProcessedNumbers = this.uniqueNumbers;\n      if (this._contactMatcher) {\n        this._contactMatcher.triggerMatch();\n      }\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._messageStore.ready &&\n      this._extensionInfo.ready &&\n      (!this._contactMatcher || this._contactMatcher.ready) &&\n      (!this._conversationLogger || this._conversationLogger.ready) &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._messageStore.ready ||\n        !this._extensionInfo.ready ||\n        (this._contactMatcher && !this._contactMatcher.ready) ||\n        (this._conversationLogger && !this._conversationLogger.ready)\n      ) &&\n      this.ready\n    );\n  }\n\n  _getCurrnetPageMessages(page) {\n    this.store.dispatch({\n      type: this.actionTypes.setPage,\n      page,\n    });\n  }\n\n  loadNextPageMessages() {\n    this.store.dispatch({\n      type: this.actionTypes.nextPage,\n    });\n  }\n\n  updateSearchInput(input) {\n    this.store.dispatch({\n      type: this.actionTypes.updateSearchInput,\n      input,\n    });\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.status === moduleStatuses.ready;\n  }\n\n  get pending() {\n    return this.status === moduleStatuses.pending;\n  }\n\n  get searchInput() {\n    return this.state.searchInput;\n  }\n\n  get allConversations() {\n    return this._selectors.allConversations();\n  }\n\n  get filteredConversations() {\n    return this._selectors.filteredConversations();\n  }\n}\n"]}