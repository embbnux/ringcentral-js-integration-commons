{"version":3,"sources":["modules/Messages/index.js"],"names":["messageHelper","Messages","messageStore","perPage","contactMatcher","options","actionTypes","_contactMatcher","_messageStore","_perPage","_reducer","loadNextPageMessages","bind","updateSearchingString","updateSearchResults","addSelector","conversations","messages","output","numberMap","addIfNotExist","number","push","forEach","message","from","phoneNumber","extensionNumber","to","length","toUser","filter","messageIsTextMessage","addQuerySource","getQueriesFn","_selectors","uniqueNumbers","readyCheckFn","ready","_lastProcessedNumbers","store","subscribe","_onStateChange","_shouldInit","dispatch","type","init","_initMessages","initSuccess","_shouldReset","_resetModuleStatus","_shouldReload","_reloadMessages","_triggerMatch","pending","messageStoreUpdatedAt","updatedTimestamp","_getCurrnetPageMessages","resetPage","_updateMessages","resetSuccess","page","currentPage","allMessages","bottomIndex","newMessages","slice","reverse","updateMessages","messagesTimestamp","triggerMatch","maxIndex","topIndex","pushMessages","nextPage","searchingString","searchResults","state","status","lastUpdatedAt","searchingResults"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport * as messageHelper from '../../lib/messageHelper';\n\nimport actionTypes from './actionTypes';\nimport getMessagesReducer from './getMessagesReducer';\n\nexport default class Messages extends RcModule {\n  constructor({\n    messageStore,\n    perPage = 20,\n    contactMatcher,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._contactMatcher = contactMatcher;\n    this._messageStore = messageStore;\n    this._perPage = perPage;\n    this._reducer = getMessagesReducer(this.actionTypes);\n    this.loadNextPageMessages = this.loadNextPageMessages.bind(this);\n    this.updateSearchingString = this.updateSearchingString.bind(this);\n    this.updateSearchResults = this.updateSearchResults.bind(this);\n\n    this.addSelector('uniqueNumbers',\n      () => this._messageStore.conversations,\n      (messages) => {\n        const output = [];\n        const numberMap = {};\n        function addIfNotExist(number) {\n          if (!numberMap[number]) {\n            output.push(number);\n            numberMap[number] = true;\n          }\n        }\n        messages.forEach((message) => {\n          if (message.from && message.from.phoneNumber) {\n            addIfNotExist(message.from.phoneNumber);\n          } else if (message.from && message.from.extensionNumber) {\n            addIfNotExist(message.from.extensionNumber);\n          }\n          if (message.to && message.to.length > 0) {\n            message.to.forEach((toUser) => {\n              if (toUser && toUser.phoneNumber) {\n                addIfNotExist(toUser.phoneNumber);\n              } else if (toUser && toUser.extensionNumber) {\n                addIfNotExist(toUser.extensionNumber);\n              }\n            });\n          }\n        });\n        return output;\n      },\n    );\n\n    this.addSelector('allMessages',\n      () => this._messageStore.conversations,\n      messages => messages.filter(message => messageHelper.messageIsTextMessage(message))\n    );\n\n    if (this._contactMatcher) {\n      this._contactMatcher.addQuerySource({\n        getQueriesFn: this._selectors.uniqueNumbers,\n        readyCheckFn: () => (\n          this._messageStore.ready\n        ),\n      });\n    }\n\n    this._lastProcessedNumbers = null;\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this.store.dispatch({\n        type: this.actionTypes.init,\n      });\n      this._initMessages();\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    } else if (this._shouldReload()) {\n      this._reloadMessages();\n      this._triggerMatch();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._messageStore.ready &&\n      this.pending\n    );\n  }\n\n  _shouldReset() {\n    return (\n      (!this._messageStore.ready) &&\n      this.ready\n    );\n  }\n\n  _shouldReload() {\n    return (\n      this.ready &&\n      this.messageStoreUpdatedAt !== this._messageStore.updatedTimestamp\n    );\n  }\n\n  _initMessages() {\n    const messages = this._getCurrnetPageMessages(1);\n    this.store.dispatch({\n      type: this.actionTypes.resetPage,\n    });\n    this._updateMessages(messages);\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  _reloadMessages() {\n    const page = this.currentPage;\n    const allMessages = this.allMessages;\n    let bottomIndex = allMessages.length - (this._perPage * page);\n    if (bottomIndex < 0) {\n      bottomIndex = 0;\n    }\n    const newMessages = allMessages.slice(bottomIndex, allMessages.length).reverse();\n    this._updateMessages(newMessages);\n  }\n\n  _updateMessages(messages) {\n    this.store.dispatch({\n      type: this.actionTypes.updateMessages,\n      messagesTimestamp: this._messageStore.updatedTimestamp,\n      messages,\n    });\n  }\n\n  _triggerMatch() {\n    const uniqueNumbers = this._selectors.uniqueNumbers();\n    if (this._lastProcessedNumbers !== uniqueNumbers) {\n      this._lastProcessedNumbers = uniqueNumbers;\n      if (this._contactMatcher && this._contactMatcher.ready) {\n        this._contactMatcher.triggerMatch();\n      }\n    }\n  }\n\n  _getCurrnetPageMessages(page) {\n    const allMessages = this.allMessages;\n    const maxIndex = allMessages.length - 1;\n    if (maxIndex < 0) {\n      return [];\n    }\n    if (page < 1) {\n      page = 1;\n    }\n    const topIndex = maxIndex - (this._perPage * (page - 1));\n    if (topIndex < 0) {\n      return [];\n    }\n    let bottomIndex = (topIndex - this._perPage) + 1;\n    if (bottomIndex < 0) {\n      bottomIndex = 0;\n    }\n    return allMessages.slice(bottomIndex, topIndex + 1).reverse();\n  }\n\n  loadNextPageMessages() {\n    const page = this.currentPage + 1;\n    const messages = this._getCurrnetPageMessages(page);\n    if (messages.length === 0) {\n      return;\n    }\n    this.store.dispatch({\n      type: this.actionTypes.pushMessages,\n      messagesTimestamp: this._messageStore.updatedTimestamp,\n      messages,\n    });\n    this.store.dispatch({\n      type: this.actionTypes.nextPage,\n    });\n  }\n\n  updateSearchingString(searchingString) {\n    this.store.dispatch({\n      type: this.actionTypes.updateSearchingString,\n      searchingString,\n    });\n  }\n\n  updateSearchResults(searchResults) {\n    this.store.dispatch({\n      type: this.actionTypes.updateSearchResults,\n      searchResults,\n    });\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.status === moduleStatuses.ready;\n  }\n\n  get pending() {\n    return this.status === moduleStatuses.pending;\n  }\n\n  get messages() {\n    return this.state.messages;\n  }\n\n  get allMessages() {\n    return this._selectors.allMessages();\n  }\n\n  get currentPage() {\n    return this.state.currentPage;\n  }\n\n  get loading() {\n    return this.messages.length < this.allMessages.length;\n  }\n\n  get lastUpdatedAt() {\n    return this.state.lastUpdatedAt;\n  }\n\n  get messageStoreUpdatedAt() {\n    return this.state.messageStoreUpdatedAt;\n  }\n\n  get searchingString() {\n    return this.state.searchingString;\n  }\n\n  get searchingResults() {\n    return this.state.searchingResults;\n  }\n}\n"]}