{"version":3,"sources":["modules/Messages/index.js"],"names":["Messages","messageStore","extensionInfo","defaultPerPage","contactMatcher","conversationMatcher","conversationLogger","options","actionTypes","_contactMatcher","_conversationLogger","_messageStore","_extensionInfo","_reducer","addSelector","conversations","messages","output","numberMap","addIfNotExist","number","push","forEach","message","from","phoneNumber","extensionNumber","to","length","toUser","state","searchInput","input","dataMapping","loggingMap","contactMapping","conversationLogMapping","map","self","correspondents","selfNumber","selfMatches","correspondentMatches","reduce","matches","contact","concat","conversationLogId","getConversationLogId","isLogging","conversationMatches","lastMatchedCorrespondentEntity","getLastMatchedCorrespondentEntity","_selectors","allConversations","effectiveSearchString","searchResults","searchNumber","searchRegExp","RegExp","find","indexOf","matchOrder","entity","name","test","subject","matchedMessage","item","conversationId","matchOrders","sort","addQuerySource","getQueriesFn","uniqueNumbers","readyCheckFn","ready","_lastProcessedNumbers","store","subscribe","_onStateChange","_shouldInit","_init","_shouldReset","_reset","triggerMatch","pending","dispatch","type","init","initSuccess","reset","resetSuccess","page","setPage","nextPage","updateSearchInput","status","filteredConversations"],"mappings":"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","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport moduleStatuses from '../../enums/moduleStatuses';\nimport ensureExist from '../../lib/ensureExist';\nimport actionTypes from './actionTypes';\nimport getMessagesReducer from './getMessagesReducer';\nimport { getNumbersFromMessage, sortSearchResults } from '../../lib/messageHelper';\nimport cleanNumber from '../../lib/cleanNumber';\nimport proxify from '../../lib/proxy/proxify';\n\n/**\n * @class\n * @description Conversation list managing module\n */\nexport default class Messages extends RcModule {\n  /**\n   * @constructor\n   * @param {Object} params - params object\n   * @param {MessageStore} params.messageStore - messageStore module instance\n   * @param {ExtensionInfo} params.extensionInfo - extensionInfo module instance\n   * @param {ContactMatcher} params.contactMatcher - contactMatcher module instance\n   * @param {ConversationMatcher} params.conversationMatcher - conversationMatcher module instance\n   * @param {ConversationLogger} params.conversationLogger - conversationLogger module instance\n   * @param {Number} params.defaultPerPage - default numbers of perPage, default 20\n   */\n  constructor({\n    messageStore,\n    extensionInfo,\n    defaultPerPage = 20,\n    contactMatcher,\n    conversationMatcher,\n    conversationLogger,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes,\n    });\n    this._contactMatcher = contactMatcher;\n    this._conversationLogger = conversationLogger;\n    this._messageStore = this::ensureExist(messageStore, 'messageStore');\n    this._extensionInfo = this::ensureExist(extensionInfo, 'extensionInfo');\n    this._reducer = getMessagesReducer(this.actionTypes, defaultPerPage);\n\n    this.addSelector('uniqueNumbers',\n      () => this._messageStore.conversations,\n      (messages) => {\n        const output = [];\n        const numberMap = {};\n        function addIfNotExist(number) {\n          if (!numberMap[number]) {\n            output.push(number);\n            numberMap[number] = true;\n          }\n        }\n        messages.forEach((message) => {\n          if (message.from && message.from.phoneNumber) {\n            addIfNotExist(message.from.phoneNumber);\n          } else if (message.from && message.from.extensionNumber) {\n            addIfNotExist(message.from.extensionNumber);\n          }\n          if (message.to && message.to.length > 0) {\n            message.to.forEach((toUser) => {\n              if (toUser && toUser.phoneNumber) {\n                addIfNotExist(toUser.phoneNumber);\n              } else if (toUser && toUser.extensionNumber) {\n                addIfNotExist(toUser.extensionNumber);\n              }\n            });\n          }\n        });\n        return output;\n      },\n    );\n    this.addSelector('effectiveSearchString',\n      () => this.state.searchInput,\n      (input) => {\n        if (input.length >= 3) return input;\n        return '';\n      }\n    );\n    this.addSelector('allConversations',\n      () => this._messageStore.conversations,\n      () => this._extensionInfo.extensionNumber,\n      () => this._contactMatcher && this._contactMatcher.dataMapping,\n      () => this._conversationLogger && this._conversationLogger.loggingMap,\n      () => this._conversationLogger && this._conversationLogger.dataMapping,\n      (\n        conversations,\n        extensionNumber,\n        contactMapping = {},\n        loggingMap = {},\n        conversationLogMapping = {},\n      ) => (\n          conversations.map((message) => {\n            const {\n              self,\n              correspondents,\n          } = getNumbersFromMessage({ extensionNumber, message });\n            const selfNumber = self && (self.phoneNumber || self.extensionNumber);\n            const selfMatches = (selfNumber && contactMapping[selfNumber]) || [];\n            const correspondentMatches = correspondents.reduce((matches, contact) => {\n              const number = contact && (contact.phoneNumber || contact.extensionNumber);\n              return number && contactMapping[number] && contactMapping[number].length ?\n                matches.concat(contactMapping[number]) :\n                matches;\n            }, []);\n            const conversationLogId = this._conversationLogger ?\n              this._conversationLogger.getConversationLogId(message) :\n              null;\n            const isLogging = !!(conversationLogId && loggingMap[conversationLogId]);\n            const conversationMatches = conversationLogMapping[conversationLogId] || [];\n            return {\n              ...message,\n              self,\n              selfMatches,\n              correspondents,\n              correspondentMatches,\n              conversationLogId,\n              isLogging,\n              conversationMatches,\n              lastMatchedCorrespondentEntity: (\n                this._conversationLogger &&\n                this._conversationLogger.getLastMatchedCorrespondentEntity(message)\n              ) || null,\n            };\n          })\n        ),\n    );\n    this.addSelector('filteredConversations',\n      this._selectors.allConversations,\n      () => this._selectors.effectiveSearchString(),\n      (allConversations, effectiveSearchString) => {\n        if (effectiveSearchString !== '') {\n          const searchResults = [];\n          allConversations.forEach((message) => {\n            const searchNumber = cleanNumber(effectiveSearchString, false);\n            const searchRegExp = new RegExp(effectiveSearchString, 'i');\n            if (searchNumber !== '' && message.correspondents.find(contact => (\n              cleanNumber(contact.phoneNumber || contact.extensionNumber || '')\n                .indexOf(searchNumber) > -1\n            ))) {\n              // match by phoneNumber or extensionNumber\n              searchResults.push({\n                ...message,\n                matchOrder: 0,\n              });\n              return;\n            }\n            if (message.correspondentMatches.length) {\n              if (\n                message.correspondentMatches.find(entity => (\n                  entity.name && searchRegExp.test(entity.name)\n                ))\n              ) {\n                // match by entity's name\n                searchResults.push({\n                  ...message,\n                  matchOrder: 0,\n                });\n                return;\n              }\n            } else if (message.correspondents.find(contact => (\n              searchRegExp.test(contact.name || '')\n            ))) {\n              searchResults.push({\n                ...message,\n                matchOrder: 0,\n              });\n              return;\n            }\n\n            // try match messages of the same conversation\n            if (searchRegExp.test(message.subject)) {\n              searchResults.push({\n                ...message,\n                matchOrder: 1,\n              });\n              return;\n            }\n            const matchedMessage = this._messageStore.messages.find(item => (\n              item.conversationId === message.conversationId &&\n              searchRegExp.test(item.subject)\n            ));\n            if (matchedMessage) {\n              searchResults.push({\n                ...message,\n                matchedMessage,\n                matchOrders: 1,\n              });\n            }\n          });\n          return searchResults.sort(sortSearchResults);\n        }\n        return allConversations.sort(sortSearchResults);\n      },\n    );\n\n    if (this._contactMatcher) {\n      this._contactMatcher.addQuerySource({\n        getQueriesFn: this._selectors.uniqueNumbers,\n        readyCheckFn: () => (\n          this._messageStore.ready\n        ),\n      });\n    }\n\n    this._lastProcessedNumbers = null;\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  async _onStateChange() {\n    if (this._shouldInit()) {\n      this._init();\n    } else if (this._shouldReset()) {\n      this._reset();\n    } else if (this._lastProcessedNumbers !== this.uniqueNumbers) {\n      this._lastProcessedNumbers = this.uniqueNumbers;\n      if (this._contactMatcher) {\n        this._contactMatcher.triggerMatch();\n      }\n    }\n  }\n\n  _shouldInit() {\n    return !!(\n      this._messageStore.ready &&\n      this._extensionInfo.ready &&\n      (!this._contactMatcher || this._contactMatcher.ready) &&\n      (!this._conversationLogger || this._conversationLogger.ready) &&\n      this.pending\n    );\n  }\n  _init() {\n    this.store.dispatch({\n      type: this.actionTypes.init,\n    });\n    if (this._contactMatcher) {\n      this._contactMatcher.triggerMatch();\n    }\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n    });\n  }\n\n  _shouldReset() {\n    return !!(\n      (\n        !this._messageStore.ready ||\n        !this._extensionInfo.ready ||\n        (this._contactMatcher && !this._contactMatcher.ready) ||\n        (this._conversationLogger && !this._conversationLogger.ready)\n      ) &&\n      this.ready\n    );\n  }\n  _reset() {\n    this.store.dispatch({\n      type: this.actionTypes.reset,\n    });\n    this._lastProcessedNumbers = null;\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  @proxify\n  async _getCurrentPageMessages(page) {\n    this.store.dispatch({\n      type: this.actionTypes.setPage,\n      page,\n    });\n  }\n\n  @proxify\n  async loadNextPageMessages() {\n    this.store.dispatch({\n      type: this.actionTypes.nextPage,\n    });\n  }\n\n  @proxify\n  async updateSearchInput(input) {\n    this.store.dispatch({\n      type: this.actionTypes.updateSearchInput,\n      input,\n    });\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.status === moduleStatuses.ready;\n  }\n\n  get pending() {\n    return this.status === moduleStatuses.pending;\n  }\n\n  get searchInput() {\n    return this.state.searchInput;\n  }\n\n  get allConversations() {\n    return this._selectors.allConversations();\n  }\n\n  get filteredConversations() {\n    return this._selectors.filteredConversations();\n  }\n}\n"]}