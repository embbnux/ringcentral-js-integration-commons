{"version":3,"sources":["modules/NumberValidate/index.js"],"names":["NumberValidate","client","accountExtension","regionSettings","options","actionTypes","_client","_accountExtension","_regionSettings","_reducer","store","subscribe","_onStateChange","_shouldInit","_initModuleStatus","_shouldReset","_resetModuleStatus","ready","dispatch","type","initSuccess","resetSuccess","phoneNumber","cleaned","length","hasPlus","number","isServiceNumber","countryCode","areaCode","special","extensionNumber","isAvailableExtension","phoneNumbers","validateResult","validateFormat","result","validateWithNumberParser","validatedNumbers","errors","map","isNoToNumber","push","isNoAreaCode","_numberParser","pasedNumers","validatedPhoneNumbers","_isSpecial","originalString","_isNotAnExtension","numbers","homeCountry","normalizedNumbers","_numberParserApi","response","originalStrings","numberParser","parse","post","state","status"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AACA;;;;;;IAEqBA,c;;;AACnB,gCAKG;AAAA,QAJDC,MAIC,QAJDA,MAIC;AAAA,QAHDC,gBAGC,QAHDA,gBAGC;AAAA,QAFDC,cAEC,QAFDA,cAEC;AAAA,QADEC,OACF;AAAA;;AAAA,iLAEIA,OAFJ;AAGCC;AAHD;;AAKD,UAAKC,OAAL,GAAeL,MAAf;AACA,UAAKM,iBAAL,GAAyBL,gBAAzB;AACA,UAAKM,eAAL,GAAuBL,cAAvB;AACA,UAAKM,QAAL,GAAgB,wCAAyB,MAAKJ,WAA9B,CAAhB;AARC;AASF;;;;iCAEY;AAAA;;AACX,WAAKK,KAAL,CAAWC,SAAX,CAAqB;AAAA,eAAM,OAAKC,cAAL,EAAN;AAAA,OAArB;AACD;;;qCAEgB;AACf,UAAI,KAAKC,WAAL,EAAJ,EAAwB;AACtB,aAAKC,iBAAL;AACD,OAFD,MAEO,IAAI,KAAKC,YAAL,EAAJ,EAAyB;AAC9B,aAAKC,kBAAL;AACD;AACF;;;kCAEa;AACZ,aACE,KAAKR,eAAL,CAAqBS,KAArB,IACA,KAAKV,iBAAL,CAAuBU,KADvB,IAEA,CAAC,KAAKA,KAHR;AAKD;;;wCAEmB;AAClB,WAAKP,KAAL,CAAWQ,QAAX,CAAoB;AAClBC,cAAM,KAAKd,WAAL,CAAiBe;AADL,OAApB;AAGD;;;mCAEc;AACb,aACE,CACE,CAAC,KAAKZ,eAAL,CAAqBS,KAAtB,IACA,CAAC,KAAKV,iBAAL,CAAuBU,KAF1B,KAIA,KAAKA,KALP;AAOD;;;yCAEoB;AACnB,WAAKP,KAAL,CAAWQ,QAAX,CAAoB;AAClBC,cAAM,KAAKd,WAAL,CAAiBgB;AADL,OAApB;AAGD;;;iCAEYC,W,EAAa;AACxB,UAAI,uBAAQA,WAAR,CAAJ,EAA0B;AACxB,eAAO,IAAP;AACD;AACD,UAAMC,UAAU,2BAAYD,WAAZ,CAAhB;AACA,UAAIC,QAAQC,MAAR,KAAmB,CAAvB,EAA0B;AACxB,eAAO,IAAP;AACD;AACD,aAAO,KAAP;AACD;;;iCAEYF,W,EAAa;AAAA,yBAKpB,2BAAYA,WAAZ,CALoB;AAAA,UAEtBG,OAFsB,gBAEtBA,OAFsB;AAAA,UAGtBC,MAHsB,gBAGtBA,MAHsB;AAAA,UAItBC,eAJsB,gBAItBA,eAJsB;;AAMxB,UACE,CAACA,eAAD,IACA,CAACF,OADD,IAEAC,OAAOF,MAAP,KAAkB,CAFlB,KAGC,KAAKhB,eAAL,CAAqBoB,WAArB,KAAqC,IAArC,IAA6C,KAAKpB,eAAL,CAAqBoB,WAArB,KAAqC,IAHnF,KAIA,KAAKpB,eAAL,CAAqBqB,QAArB,KAAkC,EALpC,EAME;AACA,eAAO,IAAP;AACD;AACD,aAAO,KAAP;AACD;;;+BAEUP,W,EAAa;AACtB,UAAIA,eAAeA,YAAYQ,OAA/B,EAAwC;AACtC,eAAO,IAAP;AACD;AACD,aAAO,KAAP;AACD;;;sCAEiBC,e,EAAiB;AACjC,UAAIA,mBACFA,gBAAgBP,MAAhB,IAA0B,CADxB,IAEF,CAAC,KAAKjB,iBAAL,CAAuByB,oBAAvB,CAA4CD,eAA5C,CAFH,EAGE;AACA,eAAO,IAAP;AACD;AACD,aAAO,KAAP;AACD;;;;8FAEqBE,Y;;;;;;AACdC,8B,GAAiB,KAAKC,cAAL,CAAoBF,YAApB,C;;oBAClBC,eAAeE,M;;;;;iDACXF,c;;;;uBAEsB,KAAKG,wBAAL,CAA8BJ,YAA9B,C;;;AAAzBK,gC;iDACCA,gB;;;;;;;;;;;;;;;;;;mCAGML,Y,EAAc;AAAA;;AAC3B,UAAMM,SAAS,EAAf;AACAN,mBAAaO,GAAb,CAAiB,UAAClB,WAAD,EAAiB;AAChC,YAAI,OAAKmB,YAAL,CAAkBnB,WAAlB,CAAJ,EAAoC;AAClCiB,iBAAOG,IAAP,CAAY,EAAEpB,wBAAF,EAAeH,MAAM,YAArB,EAAZ;AACA,iBAAO,IAAP;AACD;AACD,YAAI,OAAKwB,YAAL,CAAkBrB,WAAlB,CAAJ,EAAoC;AAClCiB,iBAAOG,IAAP,CAAY,EAAEpB,wBAAF,EAAeH,MAAM,YAArB,EAAZ;AACD;AACD,eAAO,IAAP;AACD,OATD;AAUA,aAAO;AACLiB,gBAASG,OAAOf,MAAP,KAAkB,CADtB;AAELe;AAFK,OAAP;AAID;;;;+FAE8BN,Y;;;;;;;;;uBACH,KAAKW,aAAL,CAAmBX,YAAnB,C;;;AAApBY,2B;AACAN,sB,GAAS,E;AACTO,qC,GAAwB,E;;AAC9BD,4BAAYL,GAAZ,CAAgB,UAAClB,WAAD,EAAiB;AAC/B,sBAAI,OAAKyB,UAAL,CAAgBzB,WAAhB,CAAJ,EAAkC;AAChCiB,2BAAOG,IAAP,CAAY,EAAEpB,aAAaA,YAAY0B,cAA3B,EAA2C7B,MAAM,eAAjD,EAAZ;AACA,2BAAO,IAAP;AACD;AACD,sBAAI,OAAK8B,iBAAL,CAAuB3B,YAAY0B,cAAnC,CAAJ,EAAwD;AACtDT,2BAAOG,IAAP,CAAY,EAAEpB,aAAaA,YAAY0B,cAA3B,EAA2C7B,MAAM,gBAAjD,EAAZ;AACA,2BAAO,IAAP;AACD;AACD2B,wCAAsBJ,IAAtB,CAA2BpB,WAA3B;AACA,yBAAO,IAAP;AACD,iBAXD;kDAYO;AACLc,0BAASG,OAAOf,MAAP,KAAkB,CADtB;AAEL0B,2BAASJ,qBAFJ;AAGLP;AAHK,iB;;;;;;;;;;;;;;;;;;;+FAOWN,Y;;;;;;AACZL,2B,GAAc,KAAKpB,eAAL,CAAqBoB,W;AACnCC,wB,GAAW,KAAKrB,eAAL,CAAqBqB,Q;AAChCsB,2B,GAAcvB,cAAc,EAAEuB,aAAavB,WAAf,EAAd,GAA6C,E;AAC3DwB,iC,GAAoBnB,aAAaO,GAAb,CAAiB;AAAA,yBACzC,+BAAgB,EAAElB,wBAAF,EAAeM,wBAAf,EAA4BC,kBAA5B,EAAhB,CADyC;AAAA,iBAAjB,C;;uBAGH,KAAKwB,gBAAL,CAAsBD,iBAAtB,EAAyCD,WAAzC,C;;;AAAjBG,wB;kDACCA,SAASrB,Y;;;;;;;;;;;;;;;;;;;+FAGKsB,e,EAAiBJ,W;;;;;;;uBACf,KAAK7C,OAAL,CAAakD,YAAb,GAA4BC,KAA5B,GAAoCC,IAApC,CACrB;AACEH;AADF,iBADqB,EAIrBJ,WAJqB,C;;;AAAjBG,wB;kDAMCA,Q;;;;;;;;;;;;;;;;;;wBAGI;AACX,aAAO,KAAKK,KAAL,CAAWC,MAAlB;AACD;;;wBAEW;AACV,aAAO,KAAKA,MAAL,KAAgB,uBAAa3C,KAApC;AACD;;;;;kBAtLkBjB,c","file":"index.js","sourcesContent":["import RcModule from '../../lib/RcModule';\nimport isBlank from '../../lib/isBlank';\nimport moduleStatus from '../../enums/moduleStatus';\nimport normalizeNumber from '../../lib/normalizeNumber';\nimport cleanNumber from '../../lib/cleanNumber';\nimport parseNumber from '../../lib/parseNumber';\n\nimport numberValidateActionTypes from './numberValidateActionTypes';\nimport getNumberValidateReducer from './getNumberValidateReducer';\n\nexport default class NumberValidate extends RcModule {\n  constructor({\n    client,\n    accountExtension,\n    regionSettings,\n    ...options\n  }) {\n    super({\n      ...options,\n      actionTypes: numberValidateActionTypes,\n    });\n    this._client = client;\n    this._accountExtension = accountExtension;\n    this._regionSettings = regionSettings;\n    this._reducer = getNumberValidateReducer(this.actionTypes);\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (this._shouldInit()) {\n      this._initModuleStatus();\n    } else if (this._shouldReset()) {\n      this._resetModuleStatus();\n    }\n  }\n\n  _shouldInit() {\n    return (\n      this._regionSettings.ready &&\n      this._accountExtension.ready &&\n      !this.ready\n    );\n  }\n\n  _initModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.initSuccess,\n    });\n  }\n\n  _shouldReset() {\n    return (\n      (\n        !this._regionSettings.ready ||\n        !this._accountExtension.ready\n      ) &&\n      this.ready\n    );\n  }\n\n  _resetModuleStatus() {\n    this.store.dispatch({\n      type: this.actionTypes.resetSuccess,\n    });\n  }\n\n  isNoToNumber(phoneNumber) {\n    if (isBlank(phoneNumber)) {\n      return true;\n    }\n    const cleaned = cleanNumber(phoneNumber);\n    if (cleaned.length === 0) {\n      return true;\n    }\n    return false;\n  }\n\n  isNoAreaCode(phoneNumber) {\n    const {\n      hasPlus,\n      number,\n      isServiceNumber\n    } = parseNumber(phoneNumber);\n    if (\n      !isServiceNumber &&\n      !hasPlus &&\n      number.length === 7 &&\n      (this._regionSettings.countryCode === 'CA' || this._regionSettings.countryCode === 'US') &&\n      this._regionSettings.areaCode === ''\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  _isSpecial(phoneNumber) {\n    if (phoneNumber && phoneNumber.special) {\n      return true;\n    }\n    return false;\n  }\n\n  _isNotAnExtension(extensionNumber) {\n    if (extensionNumber &&\n      extensionNumber.length <= 5 &&\n      !this._accountExtension.isAvailableExtension(extensionNumber)\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  async validateNumbers(phoneNumbers) {\n    const validateResult = this.validateFormat(phoneNumbers);\n    if (!validateResult.result) {\n      return validateResult;\n    }\n    const validatedNumbers = await this.validateWithNumberParser(phoneNumbers);\n    return validatedNumbers;\n  }\n\n  validateFormat(phoneNumbers) {\n    const errors = [];\n    phoneNumbers.map((phoneNumber) => {\n      if (this.isNoToNumber(phoneNumber)) {\n        errors.push({ phoneNumber, type: 'noToNumber' });\n        return null;\n      }\n      if (this.isNoAreaCode(phoneNumber)) {\n        errors.push({ phoneNumber, type: 'noAreaCode' });\n      }\n      return null;\n    });\n    return {\n      result: (errors.length === 0),\n      errors\n    };\n  }\n\n  async validateWithNumberParser(phoneNumbers) {\n    const pasedNumers = await this._numberParser(phoneNumbers);\n    const errors = [];\n    const validatedPhoneNumbers = [];\n    pasedNumers.map((phoneNumber) => {\n      if (this._isSpecial(phoneNumber)) {\n        errors.push({ phoneNumber: phoneNumber.originalString, type: 'specialNumber' });\n        return null;\n      }\n      if (this._isNotAnExtension(phoneNumber.originalString)) {\n        errors.push({ phoneNumber: phoneNumber.originalString, type: 'notAnExtension' });\n        return null;\n      }\n      validatedPhoneNumbers.push(phoneNumber);\n      return null;\n    });\n    return {\n      result: (errors.length === 0),\n      numbers: validatedPhoneNumbers,\n      errors,\n    };\n  }\n\n  async _numberParser(phoneNumbers) {\n    const countryCode = this._regionSettings.countryCode;\n    const areaCode = this._regionSettings.areaCode;\n    const homeCountry = countryCode ? { homeCountry: countryCode } : {};\n    const normalizedNumbers = phoneNumbers.map(phoneNumber => (\n      normalizeNumber({ phoneNumber, countryCode, areaCode })\n    ));\n    const response = await this._numberParserApi(normalizedNumbers, homeCountry);\n    return response.phoneNumbers;\n  }\n\n  async _numberParserApi(originalStrings, homeCountry) {\n    const response = await this._client.numberParser().parse().post(\n      {\n        originalStrings,\n      },\n      homeCountry,\n    );\n    return response;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  get ready() {\n    return this.status === moduleStatus.ready;\n  }\n}\n"]}