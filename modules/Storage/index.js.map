{"version":3,"sources":["modules/Storage/index.js"],"names":["Storage","auth","options","name","_auth","storedData","self","store","subscribe","loginStatus","loggedIn","ready","storageKey","prefix","ownerId","_storage","_StorageProvider","getData","key","_reducers","removeItem","dispatch","type","actionTypes","initSuccess","data","_storageHandler","value","sync","on","notLoggedIn","reset","off","destroy","resetSuccess","status","pending","currentData","setItem"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA;;;;;IAKqBA,O;;;AACnB,yBAGG;AAAA,QAFDC,IAEC,QAFDA,IAEC;AAAA,QADEC,OACF;AAAA;;AAAA;AAECC,YAAM;AAFP,OAGID,OAHJ;;AAKD,UAAKE,KAAL,GAAaH,IAAb;AALC;AAMF;;;;iCACY;AAAA;;AACX,UAAII,aAAa,IAAjB;AACA,UAAMC,OAAO,IAAb;AACA,WAAKC,KAAL,CAAWC,SAAX,CAAqB,YAAM;AACzB,YACE,OAAKJ,KAAL,CAAWK,WAAX,KAA2B,sBAAYC,QAAvC,IACA,CAAC,OAAKC,KAFR,EAGE;AACA,cAAMC,cACD,OAAKC,MAAL,GAAiB,OAAKA,MAAtB,SAAkC,EADjC,iBAC8C,OAAKT,KAAL,CAAWU,OAD/D;AAEA,iBAAKC,QAAL,GAAgB,IAAI,OAAKC,gBAAT,CAA0B;AACxCJ;AADwC,WAA1B,CAAhB;AAGAP,uBAAa,OAAKU,QAAL,CAAcE,OAAd,EAAb;AACA,eAAK,IAAMC,GAAX,IAAkBb,UAAlB,EAA8B;AAC5B,gBAAI,CAAC,OAAKc,SAAL,CAAeD,GAAf,CAAL,EAA0B;AACxB,qBAAOb,WAAWa,GAAX,CAAP;AACA,qBAAKH,QAAL,CAAcK,UAAd,CAAyBF,GAAzB;AACD;AACF;AACD,iBAAKX,KAAL,CAAWc,QAAX,CAAoB;AAClBC,kBAAM,OAAKC,WAAL,CAAiBC,WADL;AAElBZ,kCAFkB;AAGlBa,kBAAMpB;AAHY,WAApB;AAKA,iBAAKqB,eAAL,GAAuB,iBAAoB;AAAA,gBAAjBR,GAAiB,SAAjBA,GAAiB;AAAA,gBAAZS,KAAY,SAAZA,KAAY;;AACzC,gBAAI,OAAKhB,KAAT,EAAgB;AACdN,yBAAWa,GAAX,IAAkBS,KAAlB;AACA,qBAAKpB,KAAL,CAAWc,QAAX,CAAoB;AAClBC,sBAAM,OAAKC,WAAL,CAAiBK,IADL;AAElBV,wBAFkB;AAGlBS;AAHkB,eAApB;AAKD;AACF,WATD;AAUA,iBAAKZ,QAAL,CAAcc,EAAd,CAAiB,SAAjB,EAA4B,OAAKH,eAAjC;AACD,SAhCD,MAgCO,IACL,OAAKtB,KAAL,CAAWK,WAAX,KAA2B,sBAAYqB,WAAvC,IACA,OAAKnB,KAFA,EAGL;AACA,iBAAKJ,KAAL,CAAWc,QAAX,CAAoB;AAClBC,kBAAM,OAAKC,WAAL,CAAiBQ;AADL,WAApB;AAGA,cAAI,OAAKL,eAAT,EAA0B;AACxB,mBAAKX,QAAL,CAAciB,GAAd,CAAkB,SAAlB,EAA6B,OAAKN,eAAlC;AACA,mBAAKA,eAAL,GAAuB,IAAvB;AACD;AACD,cAAI,OAAKX,QAAT,EAAmB;AACjB,mBAAKA,QAAL,CAAckB,OAAd;AACA,mBAAKlB,QAAL,GAAgB,IAAhB;AACD;AACD,iBAAKR,KAAL,CAAWc,QAAX,CAAoB;AAClBC,kBAAM,OAAKC,WAAL,CAAiBW;AADL,WAApB;AAGD;AACD,YAAI,OAAKC,MAAL,KAAgB,yBAAeC,OAAnC,EAA4C;AAC1C;AACA,cAAMC,cAAc,OAAKZ,IAAzB;AACA,eAAK,IAAMP,IAAX,IAAkBmB,WAAlB,EAA+B;AAC7B,gBAAIhC,WAAWa,IAAX,MAAoBmB,YAAYnB,IAAZ,CAAxB,EAA0C;AACxC,qBAAKH,QAAL,CAAcuB,OAAd,CAAsBpB,IAAtB,EAA2BmB,YAAYnB,IAAZ,CAA3B;AACAb,yBAAWa,IAAX,IAAkBmB,YAAYnB,IAAZ,CAAlB;AACD;AACF;AACF;AACF,OA9DD;AA+DD;;;;;kBA7EkBlB,O","file":"index.js","sourcesContent":["import StorageBase from '../../lib/StorageBase';\nimport loginStatus from '../Auth/loginStatus';\nimport moduleStatuses from '../../enums/moduleStatuses';\n\n/**\n * @class\n * @description Alternative implementation of the Storage class.\n *  Allows registeration of reducers so that persisted states can be computed with reducers.\n */\nexport default class Storage extends StorageBase {\n  constructor({\n    auth,\n    ...options,\n  }) {\n    super({\n      name: 'storage',\n      ...options,\n    });\n    this._auth = auth;\n  }\n  initialize() {\n    let storedData = null;\n    const self = this;\n    this.store.subscribe(() => {\n      if (\n        this._auth.loginStatus === loginStatus.loggedIn &&\n        !this.ready\n      ) {\n        const storageKey =\n          `${this.prefix ? `${this.prefix}-` : ''}storage-${this._auth.ownerId}`;\n        this._storage = new this._StorageProvider({\n          storageKey,\n        });\n        storedData = this._storage.getData();\n        for (const key in storedData) {\n          if (!this._reducers[key]) {\n            delete storedData[key];\n            this._storage.removeItem(key);\n          }\n        }\n        this.store.dispatch({\n          type: this.actionTypes.initSuccess,\n          storageKey,\n          data: storedData,\n        });\n        this._storageHandler = ({ key, value }) => {\n          if (this.ready) {\n            storedData[key] = value;\n            this.store.dispatch({\n              type: this.actionTypes.sync,\n              key,\n              value,\n            });\n          }\n        };\n        this._storage.on('storage', this._storageHandler);\n      } else if (\n        this._auth.loginStatus === loginStatus.notLoggedIn &&\n        this.ready\n      ) {\n        this.store.dispatch({\n          type: this.actionTypes.reset,\n        });\n        if (this._storageHandler) {\n          this._storage.off('storage', this._storageHandler);\n          this._storageHandler = null;\n        }\n        if (this._storage) {\n          this._storage.destroy();\n          this._storage = null;\n        }\n        this.store.dispatch({\n          type: this.actionTypes.resetSuccess,\n        });\n      }\n      if (this.status !== moduleStatuses.pending) {\n        // save new data to storage when changed\n        const currentData = this.data;\n        for (const key in currentData) {\n          if (storedData[key] !== currentData[key]) {\n            this._storage.setItem(key, currentData[key]);\n            storedData[key] = currentData[key];\n          }\n        }\n      }\n    });\n  }\n}\n"]}