{"version":3,"sources":["modules/RecentCalls/index.js"],"names":["RecentCalls","client","callLog","options","actionTypes","_client","_callLog","_reducer","store","subscribe","_onStateChange","pending","ready","dispatch","type","initSuccess","resetSuccess","currentContact","_currentContact","initLoad","loadReset","_getRecentCalls","calls","loadSuccess","daySpan","length","dateFrom","recentCalls","_getLocalRecentCalls","_fetchRemoteRecentCalls","toISOString","sort","_sortByTime","_dedup","slice","phoneNumbers","reduce","acc","call","to","from","matches","find","_filterPhoneNumber","Date","startTime","concat","phoneNumber","extensionNumber","params","perPage","recentCallsPromises","phoneType","replace","promise","_fetchCallLogList","then","_flattenToRecords","account","extension","list","items","records","a","b","hash","cur","id","state","callStatus","loaded","status"],"mappings":"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","file":"index.js","sourcesContent":["import proxify from '../../lib/proxy/proxify';\nimport RcModule from '../../lib/RcModule';\nimport actionTypes from './actionTypes';\nimport callStatus from './callStatus';\nimport getRecentCallsReducer from './getRecentCallsReducer';\nimport getDateFrom from '../../lib/getDateFrom';\nimport ensureExist from '../../lib/ensureExist';\nimport concurrentExecute from '../../lib/concurrentExecute';\n\n/**\n * Retrieve all recent calls related to a specified contact.\n */\nexport default class RecentCalls extends RcModule {\n  constructor({\n    client,\n    callLog,\n    ...options\n  }) {\n    super({\n      actionTypes,\n      ...options\n    });\n    this._client = this::ensureExist(client, 'client');\n    this._callLog = this::ensureExist(callLog, 'callLog');\n    this._reducer = getRecentCallsReducer(this.actionTypes);\n  }\n\n  initialize() {\n    this.store.subscribe(() => this._onStateChange());\n  }\n\n  _onStateChange() {\n    if (\n      this.pending &&\n      this._callLog.ready\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.initSuccess,\n      });\n    } else if (\n      this.ready &&\n      !this._callLog.ready\n    ) {\n      this.store.dispatch({\n        type: this.actionTypes.resetSuccess\n      });\n    }\n  }\n\n  get calls() {\n    return this.state.calls;\n  }\n\n  get isCallsLoaded() {\n    return this.state.callStatus === callStatus.loaded;\n  }\n\n  @proxify\n  async getCalls(currentContact) {\n    // No need to calculate recent calls of the same contact repeatly\n    if (\n      !!currentContact &&\n      currentContact === this._currentContact\n    ) {\n      return;\n    }\n    this._currentContact = currentContact;\n    this.store.dispatch({\n      type: this.actionTypes.initLoad\n    });\n    if (!currentContact) {\n      this.store.dispatch({\n        type: this.actionTypes.loadReset\n      });\n      return;\n    }\n    const calls = await this._getRecentCalls(\n      currentContact,\n      this._callLog.calls\n    );\n    this.store.dispatch({\n      type: this.actionTypes.loadSuccess,\n      calls\n    });\n  }\n\n  cleanUpCalls() {\n    this.store.dispatch({\n      type: this.actionTypes.loadReset\n    });\n    this._currentContact = null;\n  }\n\n  get status() {\n    return this.state.status;\n  }\n\n  /**\n   * Searching for recent calls of specific contact.\n   * @param {Object} currentContact Current contact\n   * @param {Array} calls Calls in callLog\n   * @param {Number} daySpan Find calls within certain days\n   * @param {Number} length Maximum length of recent calls\n   * @return {Array}\n   * @private\n   */\n  async _getRecentCalls(currentContact, calls = [], daySpan = 60, length = 5) {\n    const dateFrom = getDateFrom(daySpan);\n    let recentCalls = this._getLocalRecentCalls(\n      currentContact,\n      calls,\n      dateFrom\n    );\n\n    // If we could not find enough recent calls,\n    // we need to search for calls on server.\n    if (recentCalls.length < length) {\n      recentCalls = await this._fetchRemoteRecentCalls(\n        currentContact,\n        dateFrom.toISOString(),\n        length\n      );\n    }\n\n    recentCalls.sort(this._sortByTime);\n    recentCalls = this._dedup(recentCalls);\n    return recentCalls.length > length\n      ? recentCalls.slice(0, length)\n      : recentCalls;\n  }\n\n  /**\n   * Get recent calls from callLog.\n   * @param {Object} currentContact\n   * @param {Array} calls\n   * @param {Date} dateFrom\n   */\n  _getLocalRecentCalls(currentContact, calls, dateFrom) {\n    // Get all calls related to this contact\n    const phoneNumbers = currentContact.phoneNumbers;\n    return calls.reduce((acc, call) => {\n      if (call && call.to && call.from) {\n        const matches = phoneNumbers.find(this._filterPhoneNumber(call));\n\n        // Check if calls is within certain days\n        if (!!matches && new Date(call.startTime) > dateFrom) {\n          return acc.concat(call);\n        }\n      }\n      return acc;\n    }, []);\n  }\n\n  _filterPhoneNumber(call) {\n    return ({ phoneNumber }) => (\n      phoneNumber === call.from.phoneNumber ||\n      phoneNumber === call.to.phoneNumber ||\n      phoneNumber === call.from.extensionNumber ||\n      phoneNumber === call.to.extensionNumber\n    );\n  }\n\n  /**\n   * Fetch recent calls from server by given current contact.\n   * @param {Object} currentContact\n   * @param {String} dateFrom\n   * @param {String} dateTo\n   * @param {Number} length The number of calls\n   * @return {Array}\n   */\n  _fetchRemoteRecentCalls(\n    currentContact,\n    dateFrom,\n    length\n  ) {\n    const params = {\n      dateFrom,\n      perPage: length,\n      type: 'Voice'\n    };\n\n    // CallLog API doesn't support plus sign in phoneNumber\n    const phoneNumbers = currentContact.phoneNumbers;\n    const recentCallsPromises = phoneNumbers.reduce((acc, { phoneType, phoneNumber }) => {\n      phoneNumber = phoneNumber.replace('+', '');\n      if (phoneType === 'extension') {\n        const promise = this._fetchCallLogList(\n          Object.assign({}, params, {\n            extensionNumber: phoneNumber\n          })\n        );\n        return acc.concat(promise);\n      }\n      const promise = this._fetchCallLogList(\n        Object.assign({}, params, {\n          phoneNumber\n        })\n      );\n      return acc.concat(promise);\n    }, []);\n\n    return concurrentExecute(recentCallsPromises, 5, 500)\n      .then(this._flattenToRecords);\n  }\n\n  _fetchCallLogList(params) {\n    return () => this._client.account().extension().callLog().list(params);\n  }\n\n  _flattenToRecords(items) {\n    return items.reduce((acc, { records }) => acc.concat(records), []);\n  }\n\n  // Sort by time in descending order\n  _sortByTime(a, b) {\n    return new Date(b.startTime) - new Date(a.startTime);\n  }\n\n  _dedup(calls) {\n    const hash = {};\n    return calls.reduce((acc, cur) => {\n      if (hash[cur.id]) return acc;\n      hash[cur.id] = true;\n      return acc.concat(cur);\n    }, []);\n  }\n}\n"]}